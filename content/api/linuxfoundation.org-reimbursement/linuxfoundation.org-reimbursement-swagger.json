{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Reimbursements API",
    "version" : "1.0"
  },
  "servers" : [ {
    "url" : "/v1"
  } ],
  "security" : [ {
    "ApiKeyAuth" : null
  } ],
  "tags" : [ {
    "name" : "reimbursement"
  } ],
  "paths" : {
    "/api-docs" : {
      "get" : {
        "tags" : [ "docs" ],
        "summary" : "Get swagger documentation",
        "operationId" : "getDoc",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/health" : {
      "get" : {
        "summary" : "Get API Health Status",
        "operationId" : "healthCheck",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/health"
                }
              }
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/health"
                }
              }
            }
          }
        }
      }
    },
    "/reimbursement/{projectId}" : {
      "post" : {
        "tags" : [ "reimbursement" ],
        "summary" : "Create Reimbursement",
        "description" : "Create a new Reimbursement policy",
        "operationId" : "createReimbursement",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "allOf" : [ {
                  "$ref" : "#/components/schemas/policy-create-input"
                }, {
                  "$ref" : "#/components/schemas/policy-update-input"
                } ]
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error-response"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error-response"
                }
              }
            }
          },
          "500" : {
            "description" : "Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error-response"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "reimbursement" ],
        "summary" : "Update Reimbursement",
        "description" : "Update an existing Reimbursement policy",
        "operationId" : "updateReimbursement",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/policy-update-input"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error-response"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error-response"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error-response"
                }
              }
            }
          },
          "500" : {
            "description" : "Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error-response"
                }
              }
            }
          }
        }
      }
    },
    "/reset" : {
      "post" : {
        "summary" : "Reset Policy",
        "description" : "Reset an existing policy to match with templatePolicy",
        "operationId" : "resetPolicy",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/policy-reset-input"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error-response"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error-response"
                }
              }
            }
          },
          "500" : {
            "description" : "Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error-response"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "contact" : {
        "title" : "Contact",
        "type" : "object",
        "properties" : {
          "EmailAddress" : {
            "type" : "string",
            "example" : "BugsBunny@example.org"
          },
          "Name" : {
            "type" : "string",
            "example" : "Bugs Bunny"
          }
        },
        "description" : "Contact information"
      },
      "error-response" : {
        "title" : "Error Response",
        "type" : "object",
        "properties" : {
          "Code" : {
            "type" : "number",
            "description" : "Error Code",
            "format" : "int64",
            "example" : 401.0
          },
          "Message" : {
            "type" : "string",
            "description" : "Error Message",
            "example" : "Unauthorized"
          }
        },
        "description" : "Standard error format"
      },
      "health" : {
        "title" : "Health",
        "type" : "object",
        "properties" : {
          "BuildTimeStamp" : {
            "type" : "string",
            "description" : "Time the service was built and deployed",
            "example" : "2019-06-06_02:59:49PM"
          },
          "Githash" : {
            "type" : "string",
            "description" : "hash of the latest Git commit of the service at time of building",
            "example" : "62009963c9e1cedaf7a24649208983163f8c439e"
          },
          "Healths" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/health-status"
            }
          },
          "Status" : {
            "type" : "string",
            "description" : "Confirmation that the service is doing well",
            "example" : "healthy"
          },
          "TimeStamp" : {
            "type" : "string",
            "description" : "Current server time",
            "example" : "2019-06-07 15:37:43.131125775 +0000 UTC m=+0.257970409"
          }
        }
      },
      "health-status" : {
        "title" : "Health Status",
        "type" : "object",
        "properties" : {
          "Duration" : {
            "type" : "string",
            "description" : "Service response time"
          },
          "Error" : {
            "type" : "string",
            "description" : "Service Name"
          },
          "Healthy" : {
            "type" : "boolean",
            "description" : "Service is healthy?"
          },
          "Name" : {
            "type" : "string",
            "description" : "Service Name"
          },
          "TimeStamp" : {
            "type" : "string",
            "description" : "Service's server time",
            "example" : "2019-06-07 15:37:43.131120884 +0000 UTC m=+0.257965506"
          }
        }
      },
      "policy-create-input" : {
        "title" : "Policy Create",
        "required" : [ "ProjectName" ],
        "type" : "object",
        "properties" : {
          "ProjectName" : {
            "type" : "string",
            "example" : "The Looney Tunes Show"
          }
        },
        "description" : "Reimbursement creation information"
      },
      "policy-reset-input" : {
        "title" : "Policy Reset",
        "required" : [ "PolicyID" ],
        "type" : "object",
        "properties" : {
          "PolicyID" : {
            "type" : "string",
            "description" : "Unique ID of the policy to reset",
            "example" : "F11B6C1D67DC6A3D"
          },
          "TemplatePolicyID" : {
            "type" : "string",
            "description" : "Unique ID of the template policy to copy from",
            "example" : "F11B6C1D67DC6A3D"
          }
        },
        "description" : "Expensify policy reset information"
      },
      "policy-update-input" : {
        "title" : "Policy Update",
        "required" : [ "Categories", "Owner", "ProjectURL" ],
        "type" : "object",
        "properties" : {
          "Beneficiaries" : {
            "type" : "array",
            "example" : [ {
              "EmailAddress" : "DaffyDuck@example.org",
              "Name" : "Daffy Duck"
            }, {
              "EmailAddress" : "PorkyPig@example.org",
              "Name" : "Porky Pik"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/contact"
            }
          },
          "Categories" : {
            "type" : "array",
            "example" : [ "Anvils", "Carrots", "Travel" ],
            "items" : {
              "type" : "string"
            }
          },
          "EntityType" : {
            "type" : "string",
            "example" : "other"
          },
          "Owner" : {
            "$ref" : "#/components/schemas/contact"
          },
          "ProjectURL" : {
            "type" : "string",
            "example" : "https://funding.dev.platform.linuxfoundation.org/projects/asp-net"
          }
        },
        "description" : "Reimbursement update information"
      }
    },
    "responses" : {
      "error" : {
        "description" : "Server Error",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/error-response"
            }
          }
        }
      },
      "invalid-request" : {
        "description" : "Invalid Request",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/error-response"
            }
          }
        }
      },
      "not-found" : {
        "description" : "Not Found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/error-response"
            }
          }
        }
      },
      "ok" : {
        "description" : "OK"
      },
      "unauthorized" : {
        "description" : "Unauthorized",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/error-response"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "ApiKeyAuth" : {
        "type" : "apiKey",
        "description" : "For accessing the API a valid API Key must be passed in all the queries in the 'X-API-KEY' header.\n",
        "name" : "X-API-Key",
        "in" : "header"
      }
    }
  }
}