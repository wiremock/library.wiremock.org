{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Advicent.FactFinderService",
    "description" : "An API for accessing the NaviPlan Fact Finder.",
    "version" : "v1"
  },
  "servers" : [ {
    "url" : "https://demo.uat.naviplancentral.com/factfinder"
  }, {
    "url" : "http://demo.uat.naviplancentral.com/factfinder"
  } ],
  "paths" : {
    "/api/AccountTypes" : {
      "get" : {
        "tags" : [ "AccountTypes" ],
        "description" : "Description: This operation retrieves all Account Types for the specified country.<br />\r\n              Purpose: Provides access to the Account Types including id and type description.",
        "operationId" : "AccountTypes_GetByCountry",
        "parameters" : [ {
          "name" : "country",
          "in" : "query",
          "description" : "The country used to filter Account Types",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "UnitedStates", "Canada" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountTypesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountTypesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Account Type not found"
          }
        },
        "deprecated" : false
      }
    },
    "/api/AccountTypes/{id}" : {
      "get" : {
        "tags" : [ "AccountTypes" ],
        "description" : "Description: This operation retrieves all Account Types for the specified id.<br />\r\n              Purpose: Provides access to the Account Types including id and type description.",
        "operationId" : "AccountTypes_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of Account Type used to retreive the Account Type information",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountTypeModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountTypeModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Account Type not found"
          }
        },
        "deprecated" : false
      }
    },
    "/api/Accounts" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "description" : "Description: This operation retrieves all Accounts for the specified Fact Finder ID and/or external source ID.<br />\r\n              Purpose: Provides access to the Account information including description and market value.",
        "operationId" : "Accounts_GetAccountsByFactFinderIdByFactfinderidExternalsourceid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Accounts",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "externalSourceId",
          "in" : "query",
          "description" : "The external ID used to filter Accounts",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountsModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountsModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "Accounts" ],
        "description" : "Description: The operation creates an Account.<br />\r\n              Purpose: Allows for creation of Accounts on a Fact Finder.",
        "operationId" : "Accounts_PostByModel",
        "requestBody" : {
          "description" : "The Account to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Accounts/{accountId}/Holdings" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "description" : "Retrieves all holdings in the specified Account.",
        "operationId" : "Accounts_GetAccountHoldingsByAccountid",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "The ID of the Account used to retrieve the Account Holding data",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountHoldingsModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountHoldingsModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Accounts" ],
        "description" : "Updates all holdings associated with an account",
        "operationId" : "Accounts_PutHoldingsByAccountidHoldings",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "The account with the holding to be updated",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The list of holdings for an account",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHoldingsWithoutIdModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHoldingsWithoutIdModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountHoldingsModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountHoldingsModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "Accounts" ],
        "description" : "Creates a holding and adds it to an existing Account.",
        "operationId" : "Accounts_PostAccountHoldingByAccountidModel",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "The existing Account ID used to identify which Account to add the holding to",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The holding data",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHoldingModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHoldingModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountHoldingWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountHoldingWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Accounts/{accountId}/Holdings/{id}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "description" : "Description: This operation retrieves a single Account Holding for the specified Account Holding ID and Account ID.<br />\r\n              Purpose: Provides access to the Account Holding information including description and market value.",
        "operationId" : "Accounts_GetAccountHoldingByAccountidId",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "The ID of the Account used to retrieve the Account Holding data",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Account Holding used to retrieve the Account Holding data",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountHoldingWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountHoldingWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Accounts" ],
        "description" : "Updates a holding associated with an account",
        "operationId" : "Accounts_PutByAccountidIdHolding",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "The account with the holding to be updated",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the holding to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The holding values used to update the current holding",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHoldingModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHoldingModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountHoldingModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountHoldingModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Accounts" ],
        "description" : "Description: This operation deletes a single Account Holding for the specified Account Holding ID and Account ID.<br />\r\n              Purpose: Provides the ability to remove individual holdings from a specified Account.",
        "operationId" : "Accounts_DeleteAccountHoldingByAccountidId",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "The ID of the Account used to retrieve the Account data that the specified holding belongs to.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Account Holding used to delete the Account Holding",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Accounts/{accountId}/SavingsStrategies" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "description" : "Get all of the savings strategies for a specific account",
        "operationId" : "Accounts_GetSavingsStrategiesByAccountIdByAccountid",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "The id of the account to retrieve the savings strategies from",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SavingsStrategiesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SavingsStrategiesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "Accounts" ],
        "description" : "Creates a savings strategy on a specific account",
        "operationId" : "Accounts_PostSavingsStrategyByAccountidSavingsstrategy",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Id of the account to create a savings strategy for",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Values for the strategy to be created",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SavingsStrategyModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SavingsStrategyModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SavingsStrategyWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SavingsStrategyWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Accounts" ],
        "description" : "Deletes all savings strategies tied to an account",
        "operationId" : "Accounts_DeleteSavingsStrategiesByAccountid",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Id of the account that holds the savings strategies",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Accounts/{accountId}/SavingsStrategies/{id}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "description" : "Get a specific savings strategy for an account",
        "operationId" : "Accounts_GetSavingsStrategiesByAccountIdAndSavingsStrategyIdByAccountidId",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "The id of the account to retrieve the savings strategies from",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the savings strategy to get",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SavingsStrategyWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SavingsStrategyWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Accounts" ],
        "description" : "Updates a specific savings strategy",
        "operationId" : "Accounts_PutSavingsStrategyByAccountidIdSavingsstrategy",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Id of the account that holds the savings strategy",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the savings strategy to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The model with which to update the savings strategy with",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SavingsStrategyModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SavingsStrategyModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SavingsStrategyWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SavingsStrategyWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Accounts" ],
        "description" : "Deletes a specific savings strategy",
        "operationId" : "Accounts_DeleteSavingsStrategyByAccountidId",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Id of the account that holds the savings strategy",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the savings strategy to be deleted",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Accounts/{id}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "description" : "Description: This operation retrieves a single Account for the specified Account ID.<br />\r\n              Purpose: Provides access to the Account information including description and market value.",
        "operationId" : "Accounts_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Account used to retrieve the Account data",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Accounts" ],
        "description" : "Description: The operation updates an Account, deletes associated saving strategies if the account type changes.<br />\r\n              Purpose: Allows for complete replacement of an Account on a Fact Finder.",
        "operationId" : "Accounts_PutByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Account ID used to identify which Account to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Account to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Accounts" ],
        "description" : "Description: The operation removes an Account tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of an Account from a Fact Finder.",
        "operationId" : "Accounts_DeleteAccountById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Account ID used to identify which Account to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Clients" : {
      "post" : {
        "tags" : [ "Clients" ],
        "description" : "Description: This operation submits the Fact Finder data to an external system.<br />\r\n              Purpose: Allows Fact Finder data to be persisted in another system for that system's consumption and use.",
        "operationId" : "Clients_PostByModel",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClientsModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClientsModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Client data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Client."
          }
        },
        "deprecated" : false
      }
    },
    "/api/CriticalIllnessInsurancePolicies" : {
      "get" : {
        "tags" : [ "CriticalIllnessInsurancePolicies" ],
        "description" : "Description: This operation retrieves all Critical Illness Insurance Policies for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Critical Illness Insurance Policies including description and policy type.",
        "operationId" : "CriticalIllnessInsurancePolicies_GetCriticalIllnessInsurancePoliciesByFactFinderIdByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Critical Illness Insurance Policies",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CriticalIllnessInsurancePoliciesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CriticalIllnessInsurancePoliciesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Critical Illness Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Critical Illness Insurance Policy."
          },
          "404" : {
            "description" : "Critical Illness Insurance Policy not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "CriticalIllnessInsurancePolicies" ],
        "description" : "Description: The operation creates a Critical Illness Insurance Policy.<br />\r\n              Purpose: Allows for creation of Critical Illness Insurance Policies on a Fact Finder.",
        "operationId" : "CriticalIllnessInsurancePolicies_PostByModel",
        "requestBody" : {
          "description" : "The Critical Illness Insurance Policy to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Critical Illness Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Critical Illness Insurance Policy."
          },
          "404" : {
            "description" : "Critical Illness Insurance Policy not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/CriticalIllnessInsurancePolicies/{id}" : {
      "get" : {
        "tags" : [ "CriticalIllnessInsurancePolicies" ],
        "description" : "Description: This operation retrieves a single Critical Illness Insurance Policy for the specified Critical Illness Insurance Policy ID.<br />\r\n              Purpose: Provides access to the Critical Illness Insurance Policy including description and policy type.",
        "operationId" : "CriticalIllnessInsurancePolicies_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Critical Illness Insurance Policy used to retreive the Critical Illness Insurance Policy",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Critical Illness Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Critical Illness Insurance Policy."
          },
          "404" : {
            "description" : "Critical Illness Insurance Policy not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "CriticalIllnessInsurancePolicies" ],
        "description" : "Description: The operation updates a Critical Illness Insurance Policy.<br />\r\n              Purpose: Allows for complete replacement of a Critical Illness Insurance Policy on a Fact Finder.",
        "operationId" : "CriticalIllnessInsurancePolicies_PutByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Critical Illness Insurance Policy ID used to identify which Critical Illness Insurance Policy to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Critical Illness Insurance Policy to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Critical Illness Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Critical Illness Insurance Policy."
          },
          "404" : {
            "description" : "Critical Illness Insurance Policy not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "CriticalIllnessInsurancePolicies" ],
        "description" : "Description: The operation removes a Critical Illness Insurance Policy tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of a Critical Illness Insurance Policy from a Fact Finder.",
        "operationId" : "CriticalIllnessInsurancePolicies_DeleteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Critical Illness Insurance Policy ID used to identify which Critical Illness Insurance Policy to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Critical Illness Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Critical Illness Insurance Policy."
          },
          "404" : {
            "description" : "Critical Illness Insurance Policy not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/CriticalIllnessInsurancePolicyTypes" : {
      "get" : {
        "tags" : [ "CriticalIllnessInsurancePolicyTypes" ],
        "description" : "Description: This operation retrieves all Critical Illness Insurance Policy Types for the specified country.<br />\r\n              Purpose: Provides access to the Critical Illness Insurance Policy Types including id and type description.",
        "operationId" : "CriticalIllnessInsurancePolicyTypes_GetByCountry",
        "parameters" : [ {
          "name" : "country",
          "in" : "query",
          "description" : "The country used to filter Critical Illness Insurance Policy Types",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "UnitedStates", "Canada" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyTypesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyTypesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Critical Illness Insurance Policy Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/CriticalIllnessInsurancePolicyTypes/{id}" : {
      "get" : {
        "tags" : [ "CriticalIllnessInsurancePolicyTypes" ],
        "description" : "Description: This operation retrieves the Critical Illness Insurance Policy Type for the specified id.<br />\r\n              Purpose: Provides access to the Critical Illness Insurance Policy Types including id and type description.",
        "operationId" : "CriticalIllnessInsurancePolicyTypes_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of Critical Illness Insurance Policy Type used to retreive the Critical Illness Insurance Policy Type information",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyTypeModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyTypeModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Critical Illness Insurance Policy Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/DefinedBenefitPensions" : {
      "get" : {
        "tags" : [ "DefinedBenefitPensions" ],
        "description" : "Description: This operation retrieves all Defined Benefit Pensions for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Defined Benefit Pensions including description and start date.",
        "operationId" : "DefinedBenefitPensions_GetDefinedBenefitPensionsByFactFinderIdByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Defined Benefit Pensions",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefinedBenefitPensionsModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefinedBenefitPensionsModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Defined Benefit Pension data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Defined Benefit Pension."
          },
          "404" : {
            "description" : "Defined Benefit Pension not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "DefinedBenefitPensions" ],
        "description" : "Description: The operation creates a Defined Benefit Pension.<br />\r\n              Purpose: Allows for creation of Defined Benefit Pensions on a Fact Finder.",
        "operationId" : "DefinedBenefitPensions_PostByModel",
        "requestBody" : {
          "description" : "The Defined Benefit Pension to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DefinedBenefitPensionModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DefinedBenefitPensionModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Object"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Object"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefinedBenefitPensionWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefinedBenefitPensionWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Defined Benefit Pension data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Defined Benefit Pension."
          },
          "404" : {
            "description" : "Defined Benefit Pension not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/DefinedBenefitPensions/{id}" : {
      "get" : {
        "tags" : [ "DefinedBenefitPensions" ],
        "description" : "Description: This operation retrieves a single Defined Benefit Pension for the specified Defined Benefit Pension ID.<br />\r\n              Purpose: Provides access to the Defined Benefit Pension including description and start date.",
        "operationId" : "DefinedBenefitPensions_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Defined Benefit Pension used to retreive the Defined Benefit Pension",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefinedBenefitPensionWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefinedBenefitPensionWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Defined Benefit Pension data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Defined Benefit Pension."
          },
          "404" : {
            "description" : "Defined Benefit Pension not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "DefinedBenefitPensions" ],
        "description" : "Description: The operation updates a Defined Benefit Pension.<br />\r\n              Purpose: Allows for complete replacement of a Defined Benefit Pension on a Fact Finder.",
        "operationId" : "DefinedBenefitPensions_PutDefinedBenefitPensionByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Defined Benefit Pension ID used to identify which Defined Benefit Pension to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Defined Benefit Pension to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DefinedBenefitPensionModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DefinedBenefitPensionModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefinedBenefitPensionModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefinedBenefitPensionModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Defined Benefit Pension data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Defined Benefit Pension."
          },
          "404" : {
            "description" : "Defined Benefit Pension not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "DefinedBenefitPensions" ],
        "description" : "Description: The operation removes a Defined Benefit Pension tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of a Defined Benefit Pension from a Fact Finder.",
        "operationId" : "DefinedBenefitPensions_DeleteDefinedBenefitPensionById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Defined Benefit Pension ID used to identify which Defined Benefit Pension to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Object"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Object"
                }
              }
            }
          },
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Defined Benefit Pension data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Defined Benefit Pension."
          },
          "404" : {
            "description" : "Defined Benefit Pension not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Demographics" : {
      "get" : {
        "tags" : [ "Demographics" ],
        "description" : "Description: This operation retrieves all Demographic information for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Demographic information including city and state.",
        "operationId" : "Demographics_GetDemographicsByFactFinderIdByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Demographic information",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Demographic information data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Demographic information."
          },
          "404" : {
            "description" : "Demographic information not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "Demographics" ],
        "description" : "Description: The operation creates Demographic information.<br />\r\n              Purpose: Allows for creation of Demographic information on a Fact Finder.",
        "operationId" : "Demographics_PostByModel",
        "requestBody" : {
          "description" : "The Demographic information to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DemographicsModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DemographicsModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Demographic information data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Demographic information."
          },
          "404" : {
            "description" : "Demographic information not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Demographics/{demographicId}/Dependents" : {
      "get" : {
        "tags" : [ "Demographics" ],
        "description" : "Description: This operation retrieves all Dependents for the specified Demographic information ID.<br />\r\n              Purpose: Provides access to the Dependents including first and last name.",
        "operationId" : "Demographics_GetDependentsByDemographicid",
        "parameters" : [ {
          "name" : "demographicId",
          "in" : "path",
          "description" : "The ID of the Demographic information used to retrieve Dependents",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsDependentsModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsDependentsModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Demographic information data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Demographic information."
          },
          "404" : {
            "description" : "Demographic information not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "Demographics" ],
        "description" : "Description: The operation creates a Dependent.<br />\r\n              Purpose: Allows for creation of Dependents on a Fact Finder.",
        "operationId" : "Demographics_PostByDemographicidModel",
        "parameters" : [ {
          "name" : "demographicId",
          "in" : "path",
          "description" : "The ID of the Demographic information to add the Dependent to",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Dependent to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DemographicsDependentModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DemographicsDependentModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsDependentWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsDependentWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Dependent information data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Dependent information."
          },
          "404" : {
            "description" : "Dependent information not found."
          },
          "409" : {
            "description" : "The request cannot be completed."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Demographics/{demographicId}/Dependents/{id}" : {
      "get" : {
        "tags" : [ "Demographics" ],
        "description" : "Description: This operation retrieves a single Dependent for the specified Dependent ID.<br />\r\n              Purpose: Provides access to the Dependent including first and last name.",
        "operationId" : "Demographics_GetDependentByDemographicidId",
        "parameters" : [ {
          "name" : "demographicId",
          "in" : "path",
          "description" : "The ID of the Demographic information used to retrieve Dependents",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Dependent used to retreive the Dependent",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsDependentWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsDependentWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Demographic information data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Demographic information."
          },
          "404" : {
            "description" : "Demographic information not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Demographics" ],
        "description" : "Description: The operation updates a Dependent.<br />\r\n              Purpose: Allows for complete replacement of a Dependent on a Fact Finder.",
        "operationId" : "Demographics_PutByDemographicidIdModel",
        "parameters" : [ {
          "name" : "demographicId",
          "in" : "path",
          "description" : "The ID of the Demographic information used to identify which Dependent to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Dependent ID used to identify which Dependent to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Dependent to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DemographicsDependentModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DemographicsDependentModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsDependentWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsDependentWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Dependent information data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Dependent information."
          },
          "404" : {
            "description" : "Dependent information not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Demographics" ],
        "description" : "Description: The operation removes a Dependent tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of a Dependent from a Fact Finder.",
        "operationId" : "Demographics_DeleteDependentByDemographicidId",
        "parameters" : [ {
          "name" : "demographicId",
          "in" : "path",
          "description" : "The ID of the Demographic information used to identify which Dependent to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The Dependent ID used to identify which Dependent to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Dependent information data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Dependent information."
          },
          "404" : {
            "description" : "Dependent information not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Demographics/{id}" : {
      "get" : {
        "tags" : [ "Demographics" ],
        "description" : "Description: This operation retrieves Demographic information for the specified Demographic information ID.<br />\r\n              Purpose: Provides access to the Demographic information including city and state.",
        "operationId" : "Demographics_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Demographic information used to retreive the Demographic information",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Demographic information data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Demographic information."
          },
          "404" : {
            "description" : "Demographic information not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Demographics" ],
        "description" : "Description: The operation updates Demographic information.<br />\r\n              Purpose: Allows for complete replacement of Demographic information on a Fact Finder.",
        "operationId" : "Demographics_PutByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Demographic information ID used to identify which Demographic information to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Demographic information to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DemographicsModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DemographicsModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DemographicsWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Demographic information data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Demographic information."
          },
          "404" : {
            "description" : "Demographic information not found."
          },
          "409" : {
            "description" : "The request cannot be completed."
          }
        },
        "deprecated" : false
      }
    },
    "/api/DisabilityInsurancePolicies" : {
      "get" : {
        "tags" : [ "DisabilityInsurancePolicies" ],
        "description" : "Description: This operation retrieves all Disability Insurance Policies for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Disability Insurance Policies including description and policy type.",
        "operationId" : "DisabilityInsurancePolicies_GetDisabilityInsurancePoliciesByFactFinderIdByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Disability Insurance Policies",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DisabilityInsurancePoliciesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DisabilityInsurancePoliciesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Disability Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Disability Insurance Policy."
          },
          "404" : {
            "description" : "Disability Insurance Policy not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "DisabilityInsurancePolicies" ],
        "description" : "Description: The operation creates a Disability Insurance Policy.<br />\r\n              Purpose: Allows for creation of Disability Insurance Policies on a Fact Finder.",
        "operationId" : "DisabilityInsurancePolicies_PostByModel",
        "requestBody" : {
          "description" : "The Disability Insurance Policy to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DisabilityInsurancePolicyModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DisabilityInsurancePolicyModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DisabilityInsurancePolicyWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DisabilityInsurancePolicyWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Disability Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Disability Insurance Policy."
          },
          "404" : {
            "description" : "Disability Insurance Policy not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/DisabilityInsurancePolicies/{id}" : {
      "get" : {
        "tags" : [ "DisabilityInsurancePolicies" ],
        "description" : "Description: This operation retrieves a single Disability Insurance Policy for the specified Disability Insurance Policy ID.<br />\r\n              Purpose: Provides access to the Disability Insurance Policy including description and policy type.",
        "operationId" : "DisabilityInsurancePolicies_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Disability Insurance Policy used to retreive the Disability Insurance Policy",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DisabilityInsurancePolicyWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DisabilityInsurancePolicyWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Disability Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Disability Insurance Policy."
          },
          "404" : {
            "description" : "Disability Insurance Policy not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "DisabilityInsurancePolicies" ],
        "description" : "Description: The operation updates a Disability Insurance Policy.<br />\r\n              Purpose: Allows for complete replacement of a Disability Insurance Policy on a Fact Finder.",
        "operationId" : "DisabilityInsurancePolicies_PutByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Disability Insurance Policy ID used to identify which Disability Insurance Policy to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Disability Insurance Policy to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DisabilityInsurancePolicyModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DisabilityInsurancePolicyModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DisabilityInsurancePolicyWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DisabilityInsurancePolicyWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Disability Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Disability Insurance Policy."
          },
          "404" : {
            "description" : "Disability Insurance Policy not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "DisabilityInsurancePolicies" ],
        "description" : "Description: The operation removes a Disability Insurance Policy tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of a Disability Insurance Policy from a Fact Finder.",
        "operationId" : "DisabilityInsurancePolicies_DeleteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Disability Insurance Policy ID used to identify which Disability Insurance Policy to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Disability Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Disability Insurance Policy."
          },
          "404" : {
            "description" : "Disability Insurance Policy not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/DisabilityInsurancePolicyTypes" : {
      "get" : {
        "tags" : [ "DisabilityInsurancePolicyTypes" ],
        "description" : "Description: This operation retrieves all Disability Insurance Policy Types for the specified country.<br />\r\n              Purpose: Provides access to the Disability Insurance Policy Types including id and type description.",
        "operationId" : "DisabilityInsurancePolicyTypes_GetByCountry",
        "parameters" : [ {
          "name" : "country",
          "in" : "query",
          "description" : "The country used to filter Disability Insurance Policy Types",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "UnitedStates", "Canada" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DisabilityInsurancePolicyTypesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DisabilityInsurancePolicyTypesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Disability Insurance Policy Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/DisabilityInsurancePolicyTypes/{id}" : {
      "get" : {
        "tags" : [ "DisabilityInsurancePolicyTypes" ],
        "description" : "Description: This operation retrieves all Disability Insurance Policy Types for the specified id.<br />\r\n              Purpose: Provides access to the Disability Insurance Policy Types including id and type description.",
        "operationId" : "DisabilityInsurancePolicyTypes_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of Disability Insurance Policy Type used to retreive the Disability Insurance Policy Type information",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DisabilityInsurancePolicyTypeModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DisabilityInsurancePolicyTypeModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Disability Insurance Policy Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/EducationGoals" : {
      "get" : {
        "tags" : [ "EducationGoals" ],
        "description" : "Description: This operation retrieves all Education Goals for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Education Goals including description and projected cost.",
        "operationId" : "EducationGoals_GetEducationGoalsByFactFinderIdByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Education Goals",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationGoalsModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationGoalsModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Education Goal data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Education Goal."
          },
          "404" : {
            "description" : "Education Goal not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "EducationGoals" ],
        "description" : "Description: The operation creates an Education Goal.<br />\r\n              Purpose: Allows for creation of Education Goals on a Fact Finder.",
        "operationId" : "EducationGoals_PostByModel",
        "requestBody" : {
          "description" : "The Education Goal to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EducationGoalModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EducationGoalModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationGoalWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationGoalWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Education Goal data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Education Goal."
          },
          "404" : {
            "description" : "Education Goal not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/EducationGoals/{educationGoalId}/Expenses" : {
      "get" : {
        "tags" : [ "EducationGoals" ],
        "description" : "Description: This operation retrieves all Education Goal Expenses for the specified Education Goal ID.<br />\r\n              Purpose: Provides access to the Education Goal Expenses including description and annual cost.",
        "operationId" : "EducationGoals_GetEducationExpensesByEducationGoalIdByEducationgoalid",
        "parameters" : [ {
          "name" : "educationGoalId",
          "in" : "path",
          "description" : "The ID of the Education Goal used to retrieve Education Goal Expenses",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationExpensesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationExpensesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Education Goal Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Education Goal Expense."
          },
          "404" : {
            "description" : "Education Goal Expense not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "EducationGoals" ],
        "description" : "Description: The operation creates an Education Goal Expense.<br />\r\n              Purpose: Allows for creation of Education Goal Expenses on a Fact Finder.",
        "operationId" : "EducationGoals_PostByEducationgoalidModel",
        "parameters" : [ {
          "name" : "educationGoalId",
          "in" : "path",
          "description" : "The Education Goal ID used to locate the Goal to add the expense to",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Education Goal Expense to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EducationExpenseModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EducationExpenseModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationExpenseWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationExpenseWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Education Goal Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Education Goal Expense."
          },
          "404" : {
            "description" : "Education Goal Expense not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/EducationGoals/{educationGoalId}/Expenses/{id}" : {
      "get" : {
        "tags" : [ "EducationGoals" ],
        "description" : "Description: This operation retrieves a single Education Goal Expense for the specified Education Goal Expense ID.<br />\r\n              Purpose: Provides access to the Education Goal Expense including description and annual cost.",
        "operationId" : "EducationGoals_GetEducationExpenseByEducationgoalidId",
        "parameters" : [ {
          "name" : "educationGoalId",
          "in" : "path",
          "description" : "The ID of the Education Goal used to retrieve Education Goal Expenses",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Education Goal Expense used to retreive the Education Goal Expense",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationExpenseWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationExpenseWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Education Goal Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Education Goal Expense."
          },
          "404" : {
            "description" : "Education Goal Expense not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "EducationGoals" ],
        "description" : "Description: The operation updates an Education Goal Expense.<br />\r\n              Purpose: Allows for complete replacement of an Education Goal Expense on a Fact Finder.",
        "operationId" : "EducationGoals_PutByEducationgoalidIdModel",
        "parameters" : [ {
          "name" : "educationGoalId",
          "in" : "path",
          "description" : "The Education Goal ID used to locate the Goal to update the Expense under",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Education Goal Expense ID used to identify which Education Goal Expense to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Education Goal Expense to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EducationExpenseModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EducationExpenseModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationExpenseWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationExpenseWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Education Goal Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Education Goal Expense."
          },
          "404" : {
            "description" : "Education Goal Expense not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "EducationGoals" ],
        "description" : "Description: The operation removes an Education Goal Expense tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of an Education Goal Expense from a Fact Finder.",
        "operationId" : "EducationGoals_DeleteByEducationgoalidId",
        "parameters" : [ {
          "name" : "educationGoalId",
          "in" : "path",
          "description" : "The Education Goal ID used to locate the Goal to delete the Expense under",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The Education Goal Expense ID used to identify which Education Goal Expense to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Education Goal Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Education Goal Expense."
          },
          "404" : {
            "description" : "Education Goal Expense not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/EducationGoals/{id}" : {
      "get" : {
        "tags" : [ "EducationGoals" ],
        "description" : "Description: This operation retrieves a single Education Goal for the specified Education Goal ID.<br />\r\n              Purpose: Provides access to the Education Goal including description and projected cost.",
        "operationId" : "EducationGoals_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Education Goal used to retreive the Education Goal",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationGoalWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationGoalWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Education Goal data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Education Goal."
          },
          "404" : {
            "description" : "Education Goal not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "EducationGoals" ],
        "description" : "Description: The operation creates an Education Goal Expense.<br />\r\n              Purpose: Allows for creation of Education Goal Expenses on a Fact Finder.",
        "operationId" : "EducationGoals_PutByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Education Goal ID used to locate the Goal to add the Expense to",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Education Goal Expense to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EducationGoalModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EducationGoalModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationGoalWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EducationGoalWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Education Goal Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Education Goal Expense."
          },
          "404" : {
            "description" : "Education Goal Expense not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "EducationGoals" ],
        "description" : "Description: The operation removes an Education Goal tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of an Education Goal from a Fact Finder.",
        "operationId" : "EducationGoals_DeleteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Education Goal ID used to identify which Education Goal to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Education Goal data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Education Goal."
          },
          "404" : {
            "description" : "Education Goal not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/ExpenseTypes" : {
      "get" : {
        "tags" : [ "ExpenseTypes" ],
        "description" : "Description: This operation retrieves all Expense Types for the specified country.<br />\r\n              Purpose: Provides access to the Expense Types including id and type description.",
        "operationId" : "ExpenseTypes_GetByCountry",
        "parameters" : [ {
          "name" : "country",
          "in" : "query",
          "description" : "The country used to filter Expense Types",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "UnitedStates", "Canada" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpenseTypesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpenseTypesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Expense Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/ExpenseTypes/{id}" : {
      "get" : {
        "tags" : [ "ExpenseTypes" ],
        "description" : "Description: This operation retrieves all Expense Types for the specified country.<br />\r\n              Purpose: Provides access to the Expense Types including id and type description.",
        "operationId" : "ExpenseTypes_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of Expense Type used to retreive the Expense Type information",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpenseTypeModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpenseTypeModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Expense Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Expenses" : {
      "get" : {
        "tags" : [ "Expenses" ],
        "description" : "Description: This operation retrieves all Expenses for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Expenses including description and Expense type.",
        "operationId" : "Expenses_GetExpensesByFactFinderIdByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Expenses",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpensesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpensesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Expense."
          },
          "404" : {
            "description" : "Expense not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "Expenses" ],
        "description" : "Description: The operation creates an Expense.<br />\r\n              Purpose: Allows for creation of Expenses on a Fact Finder.",
        "operationId" : "Expenses_PostByModel",
        "requestBody" : {
          "description" : "The Expense to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExpenseModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExpenseModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpenseWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpenseWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Expense."
          },
          "404" : {
            "description" : "Expense not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Expenses/{id}" : {
      "get" : {
        "tags" : [ "Expenses" ],
        "description" : "Description: This operation retrieves a single Expense for the specified Expense ID.<br />\r\n              Purpose: Provides access to the Expense including description and Expense type.",
        "operationId" : "Expenses_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Expense used to retreive the Expense",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpenseWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpenseWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Expense."
          },
          "404" : {
            "description" : "Expense not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Expenses" ],
        "description" : "Description: The operation updates an Expense.<br />\r\n              Purpose: Allows for complete replacement of an Expense on a Fact Finder. <br /><br />\r\n              Note: Expense type cannot be changed for expenses prepopulated from NaviPlan.",
        "operationId" : "Expenses_PutByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Expense ID used to identify which Expense to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Expense to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExpenseModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExpenseModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpenseWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExpenseWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Expense."
          },
          "404" : {
            "description" : "Expense not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Expenses" ],
        "description" : "Description: The operation removes an Expense tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of an Expense from a Fact Finder.",
        "operationId" : "Expenses_DeleteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Expense ID used to identify which Expense to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Expense."
          },
          "404" : {
            "description" : "Expense not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/FactFinders" : {
      "get" : {
        "tags" : [ "FactFinders" ],
        "description" : "Description: This operation retrieves all Fact Finders for the specified householdId, \r\n              or if null, all households associated with the user.<br />\r\n              Purpose: Provides access to the Fact Finder including status.",
        "operationId" : "FactFinders_GetByHouseholdIdByHouseholdid",
        "parameters" : [ {
          "name" : "householdId",
          "in" : "query",
          "description" : "The ID of the household used to retrieve the fact finders. If not set, uses all households associated with the user",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FactFinderWithIdModel"
                  }
                }
              },
              "text/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FactFinderWithIdModel"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Fact Finder data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Fact Finder."
          },
          "404" : {
            "description" : "Fact Finder not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "FactFinders" ],
        "description" : "Description: The operation creates a completely empty draft Fact Finder.<br />\r\n              Requirements: A householdId and list of modules must be provided.<br />\r\n              Purpose: Stages a Fact Finder for population.",
        "operationId" : "FactFinders_PostByModel",
        "requestBody" : {
          "description" : "The Household the Fact Finder will belong to and the modules that are available.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FactFinderEntityModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FactFinderEntityModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Object"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Object"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Fact Finder data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Fact Finder."
          },
          "404" : {
            "description" : "Fact Finder not found."
          },
          "409" : {
            "description" : "The request cannot be completed."
          }
        },
        "deprecated" : false
      }
    },
    "/api/FactFinders/Populate" : {
      "post" : {
        "tags" : [ "FactFinders" ],
        "description" : "Description: The operation creates a new Populated Fact Finder.<br />\r\n              Requirements: A householdId and list of modules must be provided.<br />\r\n              Purpose: Creation of a Fact Finder.",
        "operationId" : "FactFinders_PostPopulateByModel",
        "requestBody" : {
          "description" : "The Household the Fact Finder will belong to and the modules that are available. \r\n            Optional PlanId to populate from",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FactFinderPopulatableEntityModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FactFinderPopulatableEntityModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Object"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Object"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Fact Finder data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Fact Finder."
          },
          "404" : {
            "description" : "Fact Finder not found."
          },
          "409" : {
            "description" : "The request cannot be completed."
          }
        },
        "deprecated" : false
      }
    },
    "/api/FactFinders/{factFinderId}/Modules" : {
      "get" : {
        "tags" : [ "FactFinderModules" ],
        "description" : "Description: This operation retrieves all Fact Finder Modules for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Fact Finder Modules including description and policy type.",
        "operationId" : "FactFinderModules_GetByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "path",
          "description" : "The ID of the Fact Finder used to retrieve Fact Finder Modules",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderModulesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderModulesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Fact Finder Module data access."
          },
          "404" : {
            "description" : "Fact Finder Module not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/FactFinders/{factFinderId}/Modules/{id}" : {
      "get" : {
        "tags" : [ "FactFinderModules" ],
        "description" : "Description: This operation retrieves a single Fact Finder Module for the specified Fact Finder Module ID.<br />\r\n              Purpose: Provides access to the Fact Finder Module including description and policy type.",
        "operationId" : "FactFinderModules_GetByFactfinderidId",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "path",
          "description" : "The ID of the Fact Finder used to retrieve Fact Finder Module",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Fact Finder Module used to retreive the Fact Finder Module",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderModuleWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderModuleWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Fact Finder Module data access."
          },
          "404" : {
            "description" : "Fact Finder Module not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "FactFinderModules" ],
        "description" : "Description: The operation updates a Fact Finder Module.<br />\r\n              Purpose: Allows for complete replacement of a Fact Finder Module on a Fact Finder.",
        "operationId" : "FactFinderModules_PutByModelFactfinderidId",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "path",
          "description" : "The ID of the Fact Finder used to identify the Fact Finder Module to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Fact Finder Module ID used to identify which Fact Finder Module to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Fact Finder Module to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FactFinderModuleModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FactFinderModuleModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderModuleWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderModuleWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Fact Finder Module data access."
          },
          "404" : {
            "description" : "Fact Finder Module not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/FactFinders/{factFinderId}/Snapshots" : {
      "get" : {
        "tags" : [ "FactFinders" ],
        "description" : "Description: The operation retrieves Snapshots of a Fact Finder.<br />\r\n              Purpose: Allows for advisors to view all Snapshots taken of a Fact Finder.",
        "operationId" : "FactFinders_GetSnapshotsByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "path",
          "description" : "The ID of the Fact Finder to retrieve Snapshots for",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderSnapshotsModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderSnapshotsModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Fact Finder data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Fact Finder."
          },
          "404" : {
            "description" : "Fact Finder not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "FactFinders" ],
        "description" : "Description: The operation creates a Snapshot of a Fact Finder.<br />\r\n              Purpose: Allows for advisors to compare the current fact finder to a snapshot prior to acceptance.",
        "operationId" : "FactFinders_PostSnapshotsByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "path",
          "description" : "The ID of the Fact Finder used to create the Fact Finder Snapshot",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Object"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Object"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderSnapshotWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderSnapshotWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Fact Finder data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Fact Finder."
          },
          "404" : {
            "description" : "Fact Finder not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/FactFinders/{id}" : {
      "get" : {
        "tags" : [ "FactFinders" ],
        "description" : "Description: This operation retrieves a single Fact Finder for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Fact Finder including status.",
        "operationId" : "FactFinders_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Fact Finder used to retrieve the Fact Finder",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Fact Finder data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Fact Finder."
          },
          "404" : {
            "description" : "Fact Finder not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "FactFinders" ],
        "description" : "Description: The operation updates a Fact Finder.<br />\r\n              Purpose: Allows for the updating of a Fact Finder.",
        "operationId" : "FactFinders_PutByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Fact Finder ID used to identify which Fact Finder to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Fact Finder to be updated",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FactFinderModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FactFinderModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Fact Finder data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Fact Finder."
          },
          "404" : {
            "description" : "Fact Finder not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "FactFinders" ],
        "description" : "Description: This operation deletes a single Fact Finder for the specified Fact Finder ID.<br />\r\n              Purpose: Deletes the fact finder.",
        "operationId" : "FactFinders_DeleteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Fact Finder to be deleted",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Object"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Object"
                }
              }
            }
          },
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Fact Finder data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Fact Finder."
          },
          "404" : {
            "description" : "Fact Finder not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/FactFinders/{id}/Populate" : {
      "put" : {
        "tags" : [ "FactFinders" ],
        "description" : "Description: The operation populates a fact finder.<br />\r\n              Purpose: Allows for the population of a Fact Finder based on a NaviPlan plan or client. This\r\n                       operation cannot be performed on a Fact Finder more than once.",
        "operationId" : "FactFinders_PutPopulateFactFinderByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Fact Finder ID used to identify which Fact Finder to populate.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The plan to populate a fact finder from. If not provided, the client id will be inferred.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FactFinderPopulationModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FactFinderPopulationModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Fact Finder was successfully populated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FactFinderWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Fact Finder data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Fact Finder."
          },
          "404" : {
            "description" : "Fact Finder not found."
          },
          "409" : {
            "description" : "Fact Finder already populated."
          }
        },
        "deprecated" : false
      }
    },
    "/api/FilingStatusTypes" : {
      "get" : {
        "tags" : [ "FilingStatusTypes" ],
        "description" : "Description: This operation retrieves all Filing Status Types for the specified country.<br />\r\n              Purpose: Provides access to the Filing Status Types including id and type description.",
        "operationId" : "FilingStatusTypes_GetByCountry",
        "parameters" : [ {
          "name" : "country",
          "in" : "query",
          "description" : "The country used to filter Filing Status Types",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "UnitedStates", "Canada" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilingStatusTypesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilingStatusTypesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Filing Status Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/FilingStatusTypes/{id}" : {
      "get" : {
        "tags" : [ "FilingStatusTypes" ],
        "description" : "Description: This operation retrieves all Filing Status Type for the specified id.<br />\r\n              Purpose: Provides access to the Filing Status Types including id and type description.",
        "operationId" : "FilingStatusTypes_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of Filing Status Type used to retreive the Filing Status Type information",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilingStatusTypeModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilingStatusTypeModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Filing Status Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/FrequencyTypes" : {
      "get" : {
        "tags" : [ "FrequencyTypes" ],
        "description" : "Description: This operation retrieves all Frequency Types for the specified country and entity.<br />\r\n              Purpose: Provides access to the Frequency Types including id and type description.",
        "operationId" : "FrequencyTypes_GetByEntityCountry",
        "parameters" : [ {
          "name" : "entity",
          "in" : "query",
          "description" : "The entity used to filter Frequency Types",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "CriticalIllnessInsurancePolicies", "DisabilityInsurancePoliciesPremium", "DisabilityInsurancePoliciesBenefit", "Expenses", "Liabilities", "LifeInsurancePolicies", "LongTermCareInsurancePoliciesBenefit", "LongTermCareInsurancePoliciesPremium", "RealEstateAssets", "RetirementExpenses", "SavingsStrategies" ]
          }
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "The country used to filter Frequency Types",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "UnitedStates", "Canada" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FrequencyTypesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FrequencyTypesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Frequency Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/FrequencyTypes/{id}" : {
      "get" : {
        "tags" : [ "FrequencyTypes" ],
        "description" : "Description: This operation retrieves the Frequency Type for the specified id.<br />\r\n              Purpose: Provides access to the Frequency Types including id and type description.",
        "operationId" : "FrequencyTypes_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of Frequency Type used to retreive the Frequency Type information",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FrequencyTypeModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FrequencyTypeModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Frequency Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/IncomeTypes" : {
      "get" : {
        "tags" : [ "IncomeTypes" ],
        "description" : "Description: This operation retrieves all Income Types for the specified country.<br />\r\n              Purpose: Provides access to the Income Types including id and type description.",
        "operationId" : "IncomeTypes_GetByCountry",
        "parameters" : [ {
          "name" : "country",
          "in" : "query",
          "description" : "The country used to filter Income Types",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "UnitedStates", "Canada" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomeTypesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomeTypesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Income Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/IncomeTypes/{id}" : {
      "get" : {
        "tags" : [ "IncomeTypes" ],
        "description" : "Description: This operation retrieves the Income Type for the specified id.<br />\r\n              Purpose: Provides access to the Income Types including id and type description.",
        "operationId" : "IncomeTypes_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of Income Type used to retreive the Income Type information",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomeTypeModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomeTypeModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Income Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Incomes" : {
      "get" : {
        "tags" : [ "Incomes" ],
        "description" : "Description: This operation retrieves all Incomes for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Incomes including annual amount and start date.",
        "operationId" : "Incomes_GetIncomesByFactFinderIdByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Incomes",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Income data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Income."
          },
          "404" : {
            "description" : "Income not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "Incomes" ],
        "description" : "Description: The operation creates an Income.<br />\r\n              Purpose: Allows for creation of Incomes on a Fact Finder.",
        "operationId" : "Incomes_PostByModel",
        "requestBody" : {
          "description" : "The Income to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IncomeModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IncomeModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomeWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomeWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Income data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Income."
          },
          "404" : {
            "description" : "Income not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Incomes/{id}" : {
      "get" : {
        "tags" : [ "Incomes" ],
        "description" : "Description: This operation retrieves a single Income for the specified Income ID.<br />\r\n              Purpose: Provides access to the Income including annual amount and start date.",
        "operationId" : "Incomes_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Income used to retreive the Income",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomeWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomeWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Income data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Income."
          },
          "404" : {
            "description" : "Income not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Incomes" ],
        "description" : "Description: The operation updates an Income.<br />\r\n              Purpose: Allows for complete replacement of an Income on a Fact Finder.",
        "operationId" : "Incomes_PutByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Income ID used to identify which Income to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Income to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IncomeModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IncomeModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomeWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomeWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Income data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Income."
          },
          "404" : {
            "description" : "Income not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Incomes" ],
        "description" : "Description: The operation removes an Income tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of an Income from a Fact Finder.",
        "operationId" : "Incomes_DeleteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Income ID used to identify which Income to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Income data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Income."
          },
          "404" : {
            "description" : "Income not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Liabilities" : {
      "get" : {
        "tags" : [ "Liabilities" ],
        "description" : "Description: This operation retrieves all Liabilities for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Liabilities including owner and type.",
        "operationId" : "Liabilities_GetLiabilitiesByFactFinderIdByFactfinderidExternalsourceid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Liabilities",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "externalSourceId",
          "in" : "query",
          "description" : "The external source ID used to filter Liabilities",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiabilitiesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiabilitiesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Liability data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Liability."
          },
          "404" : {
            "description" : "Liability not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "Liabilities" ],
        "description" : "Description: The operation creates a Liability.<br />\r\n              Purpose: Allows for creation of Liabilities on a Fact Finder.",
        "operationId" : "Liabilities_PostByModel",
        "requestBody" : {
          "description" : "The Liability to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LiabilityModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LiabilityModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiabilityWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiabilityWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Liability data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Liability."
          },
          "404" : {
            "description" : "Liability not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Liabilities/{id}" : {
      "get" : {
        "tags" : [ "Liabilities" ],
        "description" : "Description: This operation retrieves a single Liability for the specified Liability ID.<br />\r\n              Purpose: Provides access to the Liability including owner and type.",
        "operationId" : "Liabilities_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Liability used to retreive the Liability",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiabilityWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiabilityWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Liability data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Liability."
          },
          "404" : {
            "description" : "Liability not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "Liabilities" ],
        "description" : "Description: The operation updates a Liability.<br />\r\n              Purpose: Allows for complete replacement of a Liability on a Fact Finder.",
        "operationId" : "Liabilities_PutByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Liability ID used to identify which Liability to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Liability to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LiabilityModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LiabilityModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiabilityWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiabilityWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Liability data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Liability."
          },
          "404" : {
            "description" : "Liability not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "Liabilities" ],
        "description" : "Description: The operation removes a Liability tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of a Liability from a Fact Finder.",
        "operationId" : "Liabilities_DeleteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Liability ID used to identify which Liability to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Liability data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Liability."
          },
          "404" : {
            "description" : "Liability not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/LiabilityTypes" : {
      "get" : {
        "tags" : [ "LiabilityTypes" ],
        "description" : "Description: This operation retrieves all Liability Types for the specified country.<br />\r\n              Purpose: Provides access to the Liability Types including id and type description.",
        "operationId" : "LiabilityTypes_GetByCountry",
        "parameters" : [ {
          "name" : "country",
          "in" : "query",
          "description" : "The country used to filter Liability Types",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "UnitedStates", "Canada" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiabilityTypesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiabilityTypesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Liability Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/LiabilityTypes/{id}" : {
      "get" : {
        "tags" : [ "LiabilityTypes" ],
        "description" : "Description: This operation retrieves the Liability Type for the specified id.<br />\r\n              Purpose: Provides access to the Liability Types including id and type description.",
        "operationId" : "LiabilityTypes_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of Liability Type used to retreive the Liability Type information",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiabilityTypeModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiabilityTypeModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Liability Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/LifeInsurancePolicies" : {
      "get" : {
        "tags" : [ "LifeInsurancePolicies" ],
        "description" : "Description: This operation retrieves all Life Insurance Policies for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Life Insurance Policies including description and policy type.",
        "operationId" : "LifeInsurancePolicies_GetLifeInsurancePoliciesByFactFinderIdByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Life Insurance Policies",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePoliciesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePoliciesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Life Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Life Insurance Policy."
          },
          "404" : {
            "description" : "Life Insurance Policy not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "LifeInsurancePolicies" ],
        "description" : "Description: The operation creates a Life Insurance Policy.<br />\r\n              Purpose: Allows for creation of Life Insurance Policies on a Fact Finder.",
        "operationId" : "LifeInsurancePolicies_PostByModel",
        "requestBody" : {
          "description" : "The Life Insurance Policy to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LifeInsurancePolicyModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LifeInsurancePolicyModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicyWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicyWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Life Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Life Insurance Policy."
          },
          "404" : {
            "description" : "Life Insurance Policy not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/LifeInsurancePolicies/{id}" : {
      "get" : {
        "tags" : [ "LifeInsurancePolicies" ],
        "description" : "Description: This operation retrieves a single Life Insurance Policy for the specified Life Insurance Policy ID.<br />\r\n              Purpose: Provides access to the Life Insurance Policy including description and policy type.",
        "operationId" : "LifeInsurancePolicies_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Life Insurance Policy used to retreive the Life Insurance Policy",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicyWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicyWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Life Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Life Insurance Policy."
          },
          "404" : {
            "description" : "Life Insurance Policy not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "LifeInsurancePolicies" ],
        "description" : "Description: The operation updates a Life Insurance Policy, deletes associated sub-accounts if the policy type changes.<br />\r\n              Purpose: Allows for complete replacement of a Life Insurance Policy on a Fact Finder.",
        "operationId" : "LifeInsurancePolicies_PutByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Life Insurance Policy ID used to identify which Life Insurance Policy to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Life Insurance Policy to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LifeInsurancePolicyModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LifeInsurancePolicyModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicyWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicyWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Life Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Life Insurance Policy."
          },
          "404" : {
            "description" : "Life Insurance Policy not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "LifeInsurancePolicies" ],
        "description" : "Description: The operation removes a Life Insurance Policy tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of a Life Insurance Policy and associated subaccounts from a Fact Finder.",
        "operationId" : "LifeInsurancePolicies_DeleteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Life Insurance Policy ID used to identify which Life Insurance Policy to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Life Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Life Insurance Policy."
          },
          "404" : {
            "description" : "Life Insurance Policy not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/LifeInsurancePolicies/{lifeInsurancePolicyId}/Subaccounts" : {
      "get" : {
        "tags" : [ "LifeInsurancePolicies" ],
        "description" : "Description: Get all the subaccounts for an existing Life Insurance Policy.<br />\r\n              Purpose: Provides access to all the Life Insurance Policy subaccounts.",
        "operationId" : "LifeInsurancePolicies_GetSubaccountsByLifeinsurancepolicyid",
        "parameters" : [ {
          "name" : "lifeInsurancePolicyId",
          "in" : "path",
          "description" : "The ID of the Life Insurance Policy used to retrieve the Life Insurance Policy Subaccounts.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicySubaccountsModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicySubaccountsModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Life Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Life Insurance Policy."
          },
          "404" : {
            "description" : "Life Insurance Policy not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "LifeInsurancePolicies" ],
        "description" : "Description: Creates a subaccount and adds it to an existing Life Insurance Policy.<br />\r\n              Purpose: Allows for creation of subaccount on a Life Insurance Policy.",
        "operationId" : "LifeInsurancePolicies_PostSubaccountByLifeinsurancepolicyidModel",
        "parameters" : [ {
          "name" : "lifeInsurancePolicyId",
          "in" : "path",
          "description" : "The ID of the Life Insurance Policy used to create the Life Insurance Policy Subaccount.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Life Insurance Policy Subaccount model.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LifeInsurancePolicySubaccountModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LifeInsurancePolicySubaccountModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicySubaccountWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicySubaccountWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Life Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Life Insurance Policy."
          },
          "404" : {
            "description" : "Life Insurance Policy not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/LifeInsurancePolicies/{lifeInsurancePolicyId}/Subaccounts/{id}" : {
      "get" : {
        "tags" : [ "LifeInsurancePolicies" ],
        "description" : "Description: Get a specific subaccount for an existing Life Insurance Policy.<br />\r\n              Purpose: Provides access to the Life Insurance Policy subaccount.",
        "operationId" : "LifeInsurancePolicies_GetSubaccountByLifeinsurancepolicyidId",
        "parameters" : [ {
          "name" : "lifeInsurancePolicyId",
          "in" : "path",
          "description" : "The ID of the Life Insurance Policy used to retrieve the Life Insurance Policy Subaccount.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Life Insurance Policy Subaccount.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicySubaccountWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicySubaccountWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Life Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Life Insurance Policy."
          },
          "404" : {
            "description" : "Life Insurance Policy Subaccount not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "LifeInsurancePolicies" ],
        "description" : "Description: Updates an existing Life Insurance Policy Subaccount for an existing Life Insurance Policy.<br />\r\n              Purpose: Allows for complete replacement of a subaccount on a Life Insurance Policy.",
        "operationId" : "LifeInsurancePolicies_PutSubaccountByLifeinsurancepolicyidIdModel",
        "parameters" : [ {
          "name" : "lifeInsurancePolicyId",
          "in" : "path",
          "description" : "The ID of the Life Insurance Policy used to update the Life Insurance Policy Subaccount.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Life Insurance Policy Subaccount.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Life Insurance Policy Subaccount model.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LifeInsurancePolicySubaccountModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LifeInsurancePolicySubaccountModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicySubaccountModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicySubaccountModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Life Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Life Insurance Policy."
          },
          "404" : {
            "description" : "Life Insurance Policy Subaccount not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "LifeInsurancePolicies" ],
        "description" : "Description: Deletes an existing Life Insurance Policy Subaccount for an existing Life Insurance Policy.<br />\r\n              Purpose: Allows for removal of a subaccount from a Life Insurance Policy.",
        "operationId" : "LifeInsurancePolicies_DeleteSubaccountByLifeinsurancepolicyidId",
        "parameters" : [ {
          "name" : "lifeInsurancePolicyId",
          "in" : "path",
          "description" : "The ID of the Life Insurance Policy used to delete the Life Insurance Policy Subaccount.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Life Insurance Policy Subaccount.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Life Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Life Insurance Policy."
          },
          "404" : {
            "description" : "Life Insurance Policy Subaccount not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/LifeInsurancePolicyTypes" : {
      "get" : {
        "tags" : [ "LifeInsurancePolicyTypes" ],
        "description" : "Description: This operation retrieves all Life Insurance Policy Types for the specified country.<br />\r\n              Purpose: Provides access to the Life Insurance Policy Types including id and type description.",
        "operationId" : "LifeInsurancePolicyTypes_GetByCountry",
        "parameters" : [ {
          "name" : "country",
          "in" : "query",
          "description" : "The country used to filter Life Insurance Policy Types",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "UnitedStates", "Canada" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicyTypesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicyTypesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Life Insurance Policy Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/LifeInsurancePolicyTypes/{id}" : {
      "get" : {
        "tags" : [ "LifeInsurancePolicyTypes" ],
        "description" : "Description: This operation retrieves the Life Insurance Policy Type for the specified id.<br />\r\n              Purpose: Provides access to the Life Insurance Policy Types including id and type description.",
        "operationId" : "LifeInsurancePolicyTypes_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of Life Insurance Policy Type used to retreive the Life Insurance Policy Type information",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicyTypeModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePolicyTypeModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Life Insurance Policy Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/LifestyleAssetTypes" : {
      "get" : {
        "tags" : [ "LifestyleAssetTypes" ],
        "description" : "Description: This operation retrieves all Lifestyle Asset Types for the specified country.<br />\r\n              Purpose: Provides access to the Lifestyle Asset Types including id and type description.",
        "operationId" : "LifestyleAssetTypes_GetByCountry",
        "parameters" : [ {
          "name" : "country",
          "in" : "query",
          "description" : "The country used to filter Lifestyle Asset Types",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "UnitedStates", "Canada" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifestyleAssetTypesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifestyleAssetTypesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Lifestyle Asset Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/LifestyleAssetTypes/{id}" : {
      "get" : {
        "tags" : [ "LifestyleAssetTypes" ],
        "description" : "Description: This operation retrieves the Lifestyle Asset Type for the specified id.<br />\r\n              Purpose: Provides access to the Lifestyle Asset Types including id and type description.",
        "operationId" : "LifestyleAssetTypes_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of Lifestyle Asset Type used to retreive the Lifestyle Asset Type information",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifestyleAssetTypeModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifestyleAssetTypeModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Lifestyle Asset Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/LifestyleAssets" : {
      "get" : {
        "tags" : [ "LifestyleAssets" ],
        "description" : "Description: This operation retrieves all Lifestyle Assets for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Lifestyle Assets including description and market value.",
        "operationId" : "LifestyleAssets_GetLifestyleAssetsByFactFinderIdByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Lifestyle Assets",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifestyleAssetsModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifestyleAssetsModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Lifestyle Asset data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Lifestyle Asset."
          },
          "404" : {
            "description" : "Lifestyle Asset not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "LifestyleAssets" ],
        "description" : "Description: The operation creates a Lifestyle Asset.<br />\r\n              Purpose: Allows for creation of Lifestyle Assets on a Fact Finder.",
        "operationId" : "LifestyleAssets_PostByModel",
        "requestBody" : {
          "description" : "The Lifestyle Asset to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LifestyleAssetModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LifestyleAssetModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifestyleAssetWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifestyleAssetWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Lifestyle Asset data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Lifestyle Asset."
          },
          "404" : {
            "description" : "Lifestyle Asset not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/LifestyleAssets/{id}" : {
      "get" : {
        "tags" : [ "LifestyleAssets" ],
        "description" : "Description: This operation retrieves a single Lifestyle Asset for the specified Lifestyle Asset ID.<br />\r\n              Purpose: Provides access to the Lifestyle Asset including description and market value.",
        "operationId" : "LifestyleAssets_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Lifestyle Asset used to retreive the Lifestyle Asset",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifestyleAssetWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifestyleAssetWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Lifestyle Asset data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Lifestyle Asset."
          },
          "404" : {
            "description" : "Lifestyle Asset not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "LifestyleAssets" ],
        "description" : "Description: The operation updates a Lifestyle Asset.<br />\r\n              Purpose: Allows for complete replacement of a Lifestyle Asset on a Fact Finder.",
        "operationId" : "LifestyleAssets_PutByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Lifestyle Asset ID used to identify which Lifestyle Asset to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Lifestyle Asset to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LifestyleAssetModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LifestyleAssetModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifestyleAssetWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifestyleAssetWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Lifestyle Asset data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Lifestyle Asset."
          },
          "404" : {
            "description" : "Lifestyle Asset not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "LifestyleAssets" ],
        "description" : "Description: The operation removes a Lifestyle Asset tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of a Lifestyle Asset from a Fact Finder.",
        "operationId" : "LifestyleAssets_DeleteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Lifestyle Asset ID used to identify which Lifestyle Asset to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Lifestyle Asset data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Lifestyle Asset."
          },
          "404" : {
            "description" : "Lifestyle Asset not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/LongTermCareInsurancePolicies" : {
      "get" : {
        "tags" : [ "LongTermCareInsurancePolicies" ],
        "description" : "Description: This operation retrieves all Long Term Care Insurance Policies for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Long Term Care Insurance Policies including description and premium.",
        "operationId" : "LongTermCareInsurancePolicies_GetLongTermCareInsurancePoliciesByFactFinderIdByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Long Term Care Insurance Policies",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LongTermCareInsurancePoliciesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LongTermCareInsurancePoliciesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Long Term Care Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Long Term Care Insurance Policy."
          },
          "404" : {
            "description" : "Long Term Care Insurance Policy not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "LongTermCareInsurancePolicies" ],
        "description" : "Description: The operation creates a Long Term Care Insurance Policy.<br />\r\n              Purpose: Allows for creation of Long Term Care Insurance Policies on a Fact Finder.",
        "operationId" : "LongTermCareInsurancePolicies_PostByModel",
        "requestBody" : {
          "description" : "The Long Term Care Insurance Policy to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LongTermCareInsurancePolicyModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LongTermCareInsurancePolicyModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LongTermCareInsurancePolicyWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LongTermCareInsurancePolicyWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Long Term Care Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Long Term Care Insurance Policy."
          },
          "404" : {
            "description" : "Long Term Care Insurance Policy not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/LongTermCareInsurancePolicies/{id}" : {
      "get" : {
        "tags" : [ "LongTermCareInsurancePolicies" ],
        "description" : "Description: This operation retrieves a single Long Term Care Insurance Policy for the specified Long Term Care Insurance Policy ID.<br />\r\n              Purpose: Provides access to the Long Term Care Insurance Policy including description and premium.",
        "operationId" : "LongTermCareInsurancePolicies_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Long Term Care Insurance Policy used to retreive the Long Term Care Insurance Policy",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LongTermCareInsurancePolicyWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LongTermCareInsurancePolicyWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Long Term Care Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Long Term Care Insurance Policy."
          },
          "404" : {
            "description" : "Long Term Care Insurance Policy not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "LongTermCareInsurancePolicies" ],
        "description" : "Description: The operation updates a Long Term Care Insurance Policy.<br />\r\n              Purpose: Allows for complete replacement of a Long Term Care Insurance Policy on a Fact Finder.",
        "operationId" : "LongTermCareInsurancePolicies_PutByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Long Term Care Insurance Policy ID used to identify which Long Term Care Insurance Policy to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Long Term Care Insurance Policy to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LongTermCareInsurancePolicyModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LongTermCareInsurancePolicyModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LongTermCareInsurancePolicyWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LongTermCareInsurancePolicyWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Long Term Care Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Long Term Care Insurance Policy."
          },
          "404" : {
            "description" : "Long Term Care Insurance Policy not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "LongTermCareInsurancePolicies" ],
        "description" : "Description: The operation removes a Long Term Care Insurance Policy tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of a Long Term Care Insurance Policy from a Fact Finder.",
        "operationId" : "LongTermCareInsurancePolicies_DeleteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Long Term Care Insurance Policy ID used to identify which Long Term Care Insurance Policy to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Long Term Care Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Long Term Care Insurance Policy."
          },
          "404" : {
            "description" : "Long Term Care Insurance Policy not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/MajorPurchaseGoalTypes" : {
      "get" : {
        "tags" : [ "MajorPurchaseGoalTypes" ],
        "description" : "Description: This operation retrieves all Major Purchase Goal Types for the specified country.<br />\r\n              Purpose: Provides access to the Major Purchase Goal Types including id and type description.",
        "operationId" : "MajorPurchaseGoalTypes_GetByCountry",
        "parameters" : [ {
          "name" : "country",
          "in" : "query",
          "description" : "The country used to filter Major Purchase Goal Types",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "UnitedStates", "Canada" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MajorPurchaseGoalTypesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MajorPurchaseGoalTypesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Major Purchase Goal Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/MajorPurchaseGoalTypes/{id}" : {
      "get" : {
        "tags" : [ "MajorPurchaseGoalTypes" ],
        "description" : "Description: This operation retrieves the Major Purchase Goal Type for the specified id.<br />\r\n              Purpose: Provides access to the Major Purchase Goal Types including id and type description.",
        "operationId" : "MajorPurchaseGoalTypes_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of Major Purchase Goal Type used to retreive the Major Purchase Goal Type information",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MajorPurchaseGoalTypeModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MajorPurchaseGoalTypeModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Major Purchase Goal Type not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/MajorPurchaseGoals" : {
      "get" : {
        "tags" : [ "MajorPurchaseGoals" ],
        "description" : "Description: This operation retrieves all Major Purchases for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Major Purchases including description and amount.",
        "operationId" : "MajorPurchaseGoals_GetMajorPurchaseGoalsByFactFinderIdByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Major Purchases",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MajorPurchaseGoalsModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MajorPurchaseGoalsModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Major Purchase data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Major Purchase."
          },
          "404" : {
            "description" : "Major Purchase not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "MajorPurchaseGoals" ],
        "description" : "Description: The operation creates a Major Purchase.<br />\r\n              Purpose: Allows for creation of Major Purchases on a Fact Finder.",
        "operationId" : "MajorPurchaseGoals_PostByModel",
        "requestBody" : {
          "description" : "The Major Purchase to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MajorPurchaseGoalModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MajorPurchaseGoalModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MajorPurchaseGoalWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MajorPurchaseGoalWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Major Purchase data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Major Purchase."
          },
          "404" : {
            "description" : "Major Purchase not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/MajorPurchaseGoals/{id}" : {
      "get" : {
        "tags" : [ "MajorPurchaseGoals" ],
        "description" : "Description: This operation retrieves a single Major Purchase for the specified Major Purchase ID.<br />\r\n              Purpose: Provides access to the Major Purchase including description and amount.",
        "operationId" : "MajorPurchaseGoals_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Major Purchase used to retreive the Major Purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MajorPurchaseGoalWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MajorPurchaseGoalWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Major Purchase data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Major Purchase."
          },
          "404" : {
            "description" : "Major Purchase not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "MajorPurchaseGoals" ],
        "description" : "Description: The operation updates a Major Purchase.<br />\r\n              Purpose: Allows for complete replacement of a Major Purchase on a Fact Finder.",
        "operationId" : "MajorPurchaseGoals_PutByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Major Purchase ID used to identify which Major Purchase to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Major Purchase to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MajorPurchaseGoalModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MajorPurchaseGoalModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MajorPurchaseGoalWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MajorPurchaseGoalWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Major Purchase data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Major Purchase."
          },
          "404" : {
            "description" : "Major Purchase not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "MajorPurchaseGoals" ],
        "description" : "Description: The operation removes a Major Purchase tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of a Major Purchase from a Fact Finder.",
        "operationId" : "MajorPurchaseGoals_DeleteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Major Purchase ID used to identify which Major Purchase to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Major Purchase data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Major Purchase."
          },
          "404" : {
            "description" : "Major Purchase not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Presentation/Accounts" : {
      "get" : {
        "tags" : [ "Presentation" ],
        "description" : "Description: This operation retrieves all current Accounts for the specified Fact Finder ID, as well as\r\n                           all of the holdings and savings strategies belonging to those accounts.<br />\r\n              Purpose: Provides access to the Accounts in a Fact Finder as well as any sub-entities belonging to them.",
        "operationId" : "Presentation_GetAccountsByFactfinderidExternalsourceid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Accounts",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "externalSourceId",
          "in" : "query",
          "description" : "The external ID used to filter Accounts",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountsWithSubEntitiesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountsWithSubEntitiesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Account data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Account."
          },
          "404" : {
            "description" : "Account not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Presentation/Demographics/Owners" : {
      "get" : {
        "tags" : [ "Presentation" ],
        "description" : "Description: This operation retrieves owner values for the fact finder based on demographics data\r\n              Purpose: Provides the list of valid options for owner, student, beneficiary, etc.",
        "operationId" : "Presentation_GetDemographicOwnersByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve owners.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OwnersModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OwnersModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Demographic information data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Demographic information."
          },
          "404" : {
            "description" : "Fact Finder not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Presentation/Demographics/Relationships" : {
      "get" : {
        "tags" : [ "Presentation" ],
        "description" : "Description: This operation retrieves all relationship types relevant to demographics.<br />\r\n              Purpose: Provides a list of relationship types organized by whether or not they can be defined as children.",
        "operationId" : "Presentation_GetDemographicRelationships",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RelationshipTypesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RelationshipTypesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "Object not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Presentation/Incomes" : {
      "get" : {
        "tags" : [ "Presentation" ],
        "description" : "Description: This operation retrieves all current Incomes for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Incomes in a Fact Finder, filtered by Incomes that are current.",
        "operationId" : "Presentation_GetIncomesByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Incomes",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncomesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Income data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Income."
          },
          "404" : {
            "description" : "Income not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Presentation/Liabilities" : {
      "get" : {
        "tags" : [ "Presentation" ],
        "description" : "Description: This operation retrieves all current Liabilities for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Liabilities in a Fact Finder, filtered by Liabilities that are current.",
        "operationId" : "Presentation_GetLiabilitiesByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Liabilities",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiabilitiesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiabilitiesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Liability data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Liability."
          },
          "404" : {
            "description" : "Liability not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Presentation/LifeInsurancePolicies" : {
      "get" : {
        "tags" : [ "Presentation" ],
        "description" : "Description: This operation retrieves all life insurance policies, including subaccounts if available, for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Life Insurance Policies in a Fact Finder.",
        "operationId" : "Presentation_GetLifeInsurancePoliciesByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Life Insurance Policies.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePoliciesWithSubEntitiesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LifeInsurancePoliciesWithSubEntitiesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Life Insurance Policy data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Life Insurance Policy."
          },
          "404" : {
            "description" : "Life Insurance Policy not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/Presentation/Pensions" : {
      "get" : {
        "tags" : [ "Presentation" ],
        "description" : "Description: This operation retrieves all future Defined Benefit Pensions for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Pensions in a Fact Finder, filtered by Pensions that are in the future.",
        "operationId" : "Presentation_GetPensionsByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Pensions.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefinedBenefitPensionsModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefinedBenefitPensionsModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Defined Benefit Pension data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Defined Benefit Pension."
          },
          "404" : {
            "description" : "Defined Benefit Pension not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/RealEstateAssets" : {
      "get" : {
        "tags" : [ "RealEstateAssets" ],
        "description" : "Description: This operation retrieves all Real Estate Assets for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Real Estate Assets including description and market value.",
        "operationId" : "RealEstateAssets_GetRealEstateAssetsByFactFinderIdByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Real Estate Assets",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RealEstateAssetsModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RealEstateAssetsModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Real Estate Asset data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Real Estate Asset."
          },
          "404" : {
            "description" : "Real Estate Asset not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "RealEstateAssets" ],
        "description" : "Description: The operation creates a Real Estate Asset.<br />\r\n              Purpose: Allows for creation of Real Estate Assets on a Fact Finder.",
        "operationId" : "RealEstateAssets_PostByModel",
        "requestBody" : {
          "description" : "The Real Estate Asset to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RealEstateAssetModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RealEstateAssetModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RealEstateAssetWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RealEstateAssetWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Real Estate Asset data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Real Estate Asset."
          },
          "404" : {
            "description" : "Real Estate Asset not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/RealEstateAssets/{id}" : {
      "get" : {
        "tags" : [ "RealEstateAssets" ],
        "description" : "Description: This operation retrieves a single Real Estate Asset for the specified Real Estate Asset ID.<br />\r\n              Purpose: Provides access to the Real Estate Asset including description and market value.",
        "operationId" : "RealEstateAssets_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Real Estate Asset used to retreive the Real Estate Asset",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RealEstateAssetWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RealEstateAssetWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Real Estate Asset data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Real Estate Asset."
          },
          "404" : {
            "description" : "Real Estate Asset not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "RealEstateAssets" ],
        "description" : "Description: The operation updates a Real Estate Asset.<br />\r\n              Purpose: Allows for complete replacement of a Real Estate Asset on a Fact Finder.",
        "operationId" : "RealEstateAssets_PutByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Real Estate Asset ID used to identify which Real Estate Asset to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Real Estate Asset to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RealEstateAssetModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RealEstateAssetModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RealEstateAssetWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RealEstateAssetWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Real Estate Asset data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Real Estate Asset."
          },
          "404" : {
            "description" : "Real Estate Asset not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "RealEstateAssets" ],
        "description" : "Description: The operation removes a Real Estate Asset tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of a Real Estate Asset from a Fact Finder.",
        "operationId" : "RealEstateAssets_DeleteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Real Estate Asset ID used to identify which Real Estate Asset to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Real Estate Asset data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Real Estate Asset."
          },
          "404" : {
            "description" : "Real Estate Asset not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/RetirementGoals" : {
      "get" : {
        "tags" : [ "RetirementGoals" ],
        "description" : "Description: This operation retrieves all Retirement Goals for the specified Fact Finder ID.<br />\r\n              Purpose: Provides access to the Retirement Goals including retirement date.",
        "operationId" : "RetirementGoals_GetRetirementGoalsByFactFinderIdByFactfinderid",
        "parameters" : [ {
          "name" : "factFinderId",
          "in" : "query",
          "description" : "The ID of the Fact Finder used to retrieve Retirement Goals",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementGoalsModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementGoalsModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Retirement Goal data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Retirement Goal."
          },
          "404" : {
            "description" : "Retirement Goal not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "RetirementGoals" ],
        "description" : "Description: The operation creates a Retirement Goal.<br />\r\n              Purpose: Allows for creation of Retirement Goals on a Fact Finder.",
        "operationId" : "RetirementGoals_PostByModel",
        "requestBody" : {
          "description" : "The Retirement Goal to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RetirementGoalModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RetirementGoalModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementGoalWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementGoalWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Retirement Goal data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Retirement Goal."
          },
          "404" : {
            "description" : "Retirement Goal not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/RetirementGoals/{id}" : {
      "get" : {
        "tags" : [ "RetirementGoals" ],
        "description" : "Description: This operation retrieves a single Retirement Goal for the specified Retirement Goal ID.<br />\r\n              Purpose: Provides access to the Retirement Goal including retirement date.",
        "operationId" : "RetirementGoals_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Retirement Goal used to retreive the Retirement Goal",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementGoalWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementGoalWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Retirement Goal data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Retirement Goal."
          },
          "404" : {
            "description" : "Retirement Goal not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "RetirementGoals" ],
        "description" : "Description: The operation updates a Retirement Goal.<br />\r\n              Purpose: Allows for complete replacement of a Retirement Goal on a Fact Finder.",
        "operationId" : "RetirementGoals_PutByIdModel",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Retirement Goal ID used to identify which Retirement Goal to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Retirement Goal to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RetirementGoalModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RetirementGoalModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementGoalWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementGoalWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Retirement Goal data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Retirement Goal."
          },
          "404" : {
            "description" : "Retirement Goal not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "RetirementGoals" ],
        "description" : "Description: The operation removes a Retirement Goal tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of a Retirement Goal from a Fact Finder.",
        "operationId" : "RetirementGoals_DeleteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Retirement Goal ID used to identify which Retirement Goal to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Retirement Goal data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Retirement Goal."
          },
          "404" : {
            "description" : "Retirement Goal not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/RetirementGoals/{retirementGoalId}/Expenses" : {
      "get" : {
        "tags" : [ "RetirementGoals" ],
        "description" : "Description: This operation retrieves all Retirement Goal Expenses for the specified Retirement Goal ID.<br />\r\n              Purpose: Provides access to the Retirement Goal Expenses including description and amount.",
        "operationId" : "RetirementGoals_GetRetirementExpensesByRetirementGoalIdByRetirementgoalid",
        "parameters" : [ {
          "name" : "retirementGoalId",
          "in" : "path",
          "description" : "The ID of the Retirement Goal used to retrieve Retirement Goal Expenses",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementExpensesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementExpensesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Retirement Goal Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Retirement Goal Expense."
          },
          "404" : {
            "description" : "Retirement Goal Expense not found."
          }
        },
        "deprecated" : false
      },
      "post" : {
        "tags" : [ "RetirementGoals" ],
        "description" : "Description: The operation creates a Retirement Goal Expense.<br />\r\n              Purpose: Allows for creation of Retirement Goal Expenses on a Fact Finder.",
        "operationId" : "RetirementGoals_PostByRetirementgoalidModel",
        "parameters" : [ {
          "name" : "retirementGoalId",
          "in" : "path",
          "description" : "The ID of the Retirement Goal to add the Retirement Goal Expense to",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Retirement Goal Expense to be added to the Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RetirementExpenseModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RetirementExpenseModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementExpenseWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementExpenseWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Retirement Goal Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Retirement Goal Expense."
          },
          "404" : {
            "description" : "Retirement Goal Expense not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/RetirementGoals/{retirementGoalId}/Expenses/{id}" : {
      "get" : {
        "tags" : [ "RetirementGoals" ],
        "description" : "Description: This operation retrieves a single Retirement Goal Expense for the specified Retirement Goal Expense ID.<br />\r\n              Purpose: Provides access to the Retirement Goal Expense including description and amount.",
        "operationId" : "RetirementGoals_GetRetirementExpenseByRetirementgoalidId",
        "parameters" : [ {
          "name" : "retirementGoalId",
          "in" : "path",
          "description" : "The ID of the Retirement Goal used to retrieve the Retirement Goal Expense",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the Retirement Goal Expense used to retreive the Retirement Goal Expense",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementExpenseWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementExpenseWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Retirement Goal Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Retirement Goal Expense."
          },
          "404" : {
            "description" : "Retirement Goal Expense not found."
          }
        },
        "deprecated" : false
      },
      "put" : {
        "tags" : [ "RetirementGoals" ],
        "description" : "Description: The operation updates a Retirement Goal Expense.<br />\r\n              Purpose: Allows for complete replacement of a Retirement Goal Expense on a Fact Finder.",
        "operationId" : "RetirementGoals_PutByRetirementgoalidIdModel",
        "parameters" : [ {
          "name" : "retirementGoalId",
          "in" : "path",
          "description" : "The Retirement Goal ID used to locate the Goal to update the Retirement Goal Expense under",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The existing Retirement Goal Expense ID used to identify which Retirement Goal Expense to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The Retirement Goal Expense to be updated on a Fact Finder",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RetirementExpenseModel"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RetirementExpenseModel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementExpenseWithIdModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetirementExpenseWithIdModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Retirement Goal Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Retirement Goal Expense."
          },
          "404" : {
            "description" : "Retirement Goal Expense not found."
          }
        },
        "deprecated" : false
      },
      "delete" : {
        "tags" : [ "RetirementGoals" ],
        "description" : "Description: The operation removes a Retirement Goal Expense tied to a Fact Finder.<br />\r\n              Purpose: Allows for removal of a Retirement Goal Expense from a Fact Finder.",
        "operationId" : "RetirementGoals_DeleteByRetirementgoalidId",
        "parameters" : [ {
          "name" : "retirementGoalId",
          "in" : "path",
          "description" : "The Retirement Goal ID used to locate the Goal to delete the Retirement Goal Expense under",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The Retirement Goal Expense ID used to identify which Retirement Goal Expense to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "Unauthorized for Retirement Goal Expense data access."
          },
          "403" : {
            "description" : "Request is restricted for access to Retirement Goal Expense."
          },
          "404" : {
            "description" : "Retirement Goal Expense not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/ServiceInformation" : {
      "get" : {
        "tags" : [ "FactFinderServiceInformation" ],
        "description" : "Description: This operation retrieves information statistics for the current service.<br />\r\n              Purpose: Provides access to Service Information.",
        "operationId" : "FactFinderServiceInformation_Get",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceInformationModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceInformationModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/StatesProvinces" : {
      "get" : {
        "tags" : [ "StatesProvinces" ],
        "description" : "Description: This operation retrieves all States and Provinces for the specified country.<br />\r\n              Purpose: Provides access to the States and Provinces.",
        "operationId" : "StatesProvinces_GetByCountry",
        "parameters" : [ {
          "name" : "country",
          "in" : "query",
          "description" : "The country used to filter States and Provinces",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "UnitedStates", "Canada" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatesProvincesModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatesProvincesModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "State or Province not found."
          }
        },
        "deprecated" : false
      }
    },
    "/api/StatesProvinces/{id}" : {
      "get" : {
        "tags" : [ "StatesProvinces" ],
        "description" : "Description: This operation retrieves the States and Provinces for the specified id.<br />\r\n              Purpose: Provides access to the States and Provinces.",
        "operationId" : "StatesProvinces_GetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the State or Province used to retreive the State or Province information",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StateProvinceModel"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StateProvinceModel"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "State or Province not found."
          }
        },
        "deprecated" : false
      }
    }
  },
  "components" : {
    "schemas" : {
      "AccountHoldingModel" : {
        "required" : [ "description" ],
        "type" : "object",
        "properties" : {
          "costBasis" : {
            "type" : "number",
            "format" : "double"
          },
          "cusip" : {
            "maxLength" : 31,
            "minLength" : 0,
            "type" : "string"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "symbol" : {
            "maxLength" : 31,
            "minLength" : 0,
            "type" : "string"
          },
          "valuationDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "AccountHoldingWithIdModel" : {
        "type" : "object",
        "properties" : {
          "accountHoldingId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "costBasis" : {
            "type" : "number",
            "format" : "double"
          },
          "cusip" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "symbol" : {
            "type" : "string"
          },
          "valuationDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "AccountHoldingsModel" : {
        "type" : "object",
        "properties" : {
          "holdings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountHoldingWithIdModel"
            }
          }
        }
      },
      "AccountHoldingsWithoutIdModel" : {
        "type" : "object",
        "properties" : {
          "holdings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountHoldingModel"
            }
          }
        }
      },
      "AccountModel" : {
        "required" : [ "description", "factFinderId" ],
        "type" : "object",
        "properties" : {
          "accountType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "externalSourceId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "externalSourceName" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lastUpdated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "owner" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint", "Dependent", "Other" ]
          },
          "ownerDependentId" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "AccountTypeModel" : {
        "type" : "object",
        "properties" : {
          "allowedSavingsTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SavingsTypeDomainObject"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "AccountTypesModel" : {
        "type" : "object",
        "properties" : {
          "accountTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountTypeModel"
            }
          }
        }
      },
      "AccountWithIdModel" : {
        "type" : "object",
        "properties" : {
          "accountId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "externalSourceId" : {
            "type" : "string"
          },
          "externalSourceName" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lastUpdated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "owner" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint", "Dependent", "Other" ]
          },
          "ownerDependentId" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "AccountWithSubEntitiesModel" : {
        "type" : "object",
        "properties" : {
          "accountId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "externalSourceId" : {
            "type" : "string"
          },
          "externalSourceName" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "holdings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountHoldingWithIdModel"
            }
          },
          "lastUpdated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "owner" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint", "Dependent", "Other" ]
          },
          "ownerDependentId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "savingsStrategies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SavingsStrategyWithIdModel"
            }
          }
        }
      },
      "AccountsModel" : {
        "type" : "object",
        "properties" : {
          "accounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountWithIdModel"
            }
          }
        }
      },
      "AccountsWithSubEntitiesModel" : {
        "type" : "object",
        "properties" : {
          "accounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountWithSubEntitiesModel"
            }
          }
        }
      },
      "ClientModel" : {
        "type" : "object",
        "properties" : {
          "clientId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "message" : {
            "type" : "string"
          },
          "ownerUser" : {
            "type" : "string"
          },
          "planId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "success" : {
            "type" : "boolean"
          }
        }
      },
      "ClientsModel" : {
        "required" : [ "factFinderId", "planAction" ],
        "type" : "object",
        "properties" : {
          "externalDestinationName" : {
            "maxLength" : 49,
            "minLength" : 0,
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "planAction" : {
            "type" : "string",
            "enum" : [ "New", "Duplicate", "Project", "Update" ]
          }
        }
      },
      "CriticalIllnessInsurancePoliciesModel" : {
        "type" : "object",
        "properties" : {
          "criticalIllnessInsurancePolicies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyWithIdModel"
            }
          }
        }
      },
      "CriticalIllnessInsurancePolicyModel" : {
        "required" : [ "description", "factFinderId" ],
        "type" : "object",
        "properties" : {
          "benefit" : {
            "type" : "number",
            "format" : "double"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "insured" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient" ]
          },
          "policyType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "CriticalIllnessInsurancePolicyTypeModel" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "CriticalIllnessInsurancePolicyTypesModel" : {
        "type" : "object",
        "properties" : {
          "insurancePolicyTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CriticalIllnessInsurancePolicyTypeModel"
            }
          }
        }
      },
      "CriticalIllnessInsurancePolicyWithIdModel" : {
        "type" : "object",
        "properties" : {
          "benefit" : {
            "type" : "number",
            "format" : "double"
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "insurancePolicyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "insured" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient" ]
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "policyType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "DefinedBenefitPensionModel" : {
        "required" : [ "description", "factFinderId" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "estimatedAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "member" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient" ]
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "DefinedBenefitPensionWithIdModel" : {
        "type" : "object",
        "properties" : {
          "definedBenefitPensionId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "estimatedAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "member" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient" ]
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "DefinedBenefitPensionsModel" : {
        "type" : "object",
        "properties" : {
          "definedBenefitPensions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DefinedBenefitPensionWithIdModel"
            }
          }
        }
      },
      "DemographicsDependentModel" : {
        "required" : [ "birthDate", "dependentOf", "firstName", "lastName", "relationship" ],
        "type" : "object",
        "properties" : {
          "birthDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dependentOf" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint", "Other" ]
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "firstName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "lastName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "relationship" : {
            "type" : "string",
            "enum" : [ "Son", "Daughter", "FosterSon", "FosterDaughter", "Grandson", "Granddaughter", "Nephew", "Niece", "MaleCousin", "FemaleCousin", "Father", "Mother", "Grandfather", "Grandmother", "Uncle", "Aunt", "Brother", "Sister", "SonInLaw", "DaughterInLaw", "MaleOther", "FemaleOther" ]
          }
        }
      },
      "DemographicsDependentWithIdModel" : {
        "type" : "object",
        "properties" : {
          "birthDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "demographicsId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dependentId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dependentOf" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint", "Other" ]
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "relationship" : {
            "type" : "string",
            "enum" : [ "Son", "Daughter", "FosterSon", "FosterDaughter", "Grandson", "Granddaughter", "Nephew", "Niece", "MaleCousin", "FemaleCousin", "Father", "Mother", "Grandfather", "Grandmother", "Uncle", "Aunt", "Brother", "Sister", "SonInLaw", "DaughterInLaw", "MaleOther", "FemaleOther" ]
          }
        }
      },
      "DemographicsDependentsModel" : {
        "type" : "object",
        "properties" : {
          "dependents" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DemographicsDependentWithIdModel"
            }
          }
        }
      },
      "DemographicsModel" : {
        "required" : [ "city", "factFinderId", "head1", "jointAnalysis", "state" ],
        "type" : "object",
        "properties" : {
          "city" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "externalSourceId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "head1" : {
            "$ref" : "#/components/schemas/FamilyHeadModel"
          },
          "head2" : {
            "$ref" : "#/components/schemas/FamilyHeadModel"
          },
          "jointAnalysis" : {
            "type" : "boolean"
          },
          "state" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "DemographicsWithIdModel" : {
        "type" : "object",
        "properties" : {
          "city" : {
            "type" : "string"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "demographicsId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "externalSourceId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "head1" : {
            "$ref" : "#/components/schemas/FamilyHeadModel"
          },
          "head2" : {
            "$ref" : "#/components/schemas/FamilyHeadModel"
          },
          "jointAnalysis" : {
            "type" : "boolean"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "lockRetirement" : {
            "type" : "boolean"
          },
          "state" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "DisabilityInsurancePoliciesModel" : {
        "type" : "object",
        "properties" : {
          "disabilityInsurancePolicies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DisabilityInsurancePolicyWithIdModel"
            }
          }
        }
      },
      "DisabilityInsurancePolicyModel" : {
        "required" : [ "description", "factFinderId" ],
        "type" : "object",
        "properties" : {
          "benefit" : {
            "type" : "number",
            "format" : "double"
          },
          "benefitFrequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "benefitType" : {
            "type" : "string",
            "enum" : [ "Dollar", "Percent" ]
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "insured" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient" ]
          },
          "policyType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          },
          "premiumFrequency" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "DisabilityInsurancePolicyTypeModel" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "DisabilityInsurancePolicyTypesModel" : {
        "type" : "object",
        "properties" : {
          "insurancePolicyTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DisabilityInsurancePolicyTypeModel"
            }
          }
        }
      },
      "DisabilityInsurancePolicyWithIdModel" : {
        "type" : "object",
        "properties" : {
          "benefit" : {
            "type" : "number",
            "format" : "double"
          },
          "benefitFrequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "benefitType" : {
            "type" : "string",
            "enum" : [ "Dollar", "Percent" ]
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "insurancePolicyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "insured" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient" ]
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "policyType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          },
          "premiumFrequency" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "EducationExpenseModel" : {
        "type" : "object",
        "properties" : {
          "annualCost" : {
            "type" : "number",
            "format" : "double"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "member" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Dependent" ]
          },
          "memberDependentId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "startYear" : {
            "type" : "string",
            "format" : "date-time"
          },
          "years" : {
            "maximum" : 99,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "EducationExpenseWithIdModel" : {
        "type" : "object",
        "properties" : {
          "annualCost" : {
            "type" : "number",
            "format" : "double"
          },
          "educationExpenseId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "educationGoalId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "member" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Dependent" ]
          },
          "memberDependentId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "startYear" : {
            "type" : "string",
            "format" : "date-time"
          },
          "years" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "EducationExpensesModel" : {
        "type" : "object",
        "properties" : {
          "educationExpenses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EducationExpenseWithIdModel"
            }
          }
        }
      },
      "EducationGoalModel" : {
        "required" : [ "description", "factFinderId" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "projectedCost" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "EducationGoalWithIdModel" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "educationGoalId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "projectedCost" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "EducationGoalsModel" : {
        "type" : "object",
        "properties" : {
          "educationGoals" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EducationGoalWithIdModel"
            }
          }
        }
      },
      "ExpenseModel" : {
        "required" : [ "description", "factFinderId" ],
        "type" : "object",
        "properties" : {
          "annualPeriod" : {
            "maximum" : 99,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "expenseAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "expenseTypeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "member" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ExpenseTypeModel" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "ExpenseTypesModel" : {
        "type" : "object",
        "properties" : {
          "expenseTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ExpenseTypeModel"
            }
          }
        }
      },
      "ExpenseWithIdModel" : {
        "type" : "object",
        "properties" : {
          "annualPeriod" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "expenseAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "expenseId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "expenseTypeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "member" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ExpensesModel" : {
        "type" : "object",
        "properties" : {
          "expenses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ExpenseWithIdModel"
            }
          }
        }
      },
      "FactFinderEntityModel" : {
        "required" : [ "householdId" ],
        "type" : "object",
        "properties" : {
          "householdId" : {
            "maximum" : 2147483647,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "modules" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "Demographics", "Assets", "Liabilities", "Incomes", "Expenses", "Insurance", "Retirement", "Education", "MajorPurchase" ]
            }
          },
          "planLevel" : {
            "type" : "string",
            "enum" : [ "Level2", "Level1" ]
          }
        }
      },
      "FactFinderModel" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "enum" : [ "New", "InProgress", "ClientSubmitted", "AdvisorAccepted", "Canceled", "Draft", "Deleted" ]
          }
        }
      },
      "FactFinderModuleModel" : {
        "required" : [ "moduleName" ],
        "type" : "object",
        "properties" : {
          "available" : {
            "type" : "boolean"
          },
          "moduleName" : {
            "type" : "string",
            "enum" : [ "Demographics", "Assets", "Liabilities", "Incomes", "Expenses", "Insurance", "Retirement", "Education", "MajorPurchase" ]
          },
          "visited" : {
            "type" : "boolean"
          }
        }
      },
      "FactFinderModuleWithIdModel" : {
        "type" : "object",
        "properties" : {
          "available" : {
            "type" : "boolean"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "moduleId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "moduleName" : {
            "type" : "string",
            "enum" : [ "Demographics", "Assets", "Liabilities", "Incomes", "Expenses", "Insurance", "Retirement", "Education", "MajorPurchase" ]
          },
          "visited" : {
            "type" : "boolean"
          }
        }
      },
      "FactFinderModulesModel" : {
        "type" : "object",
        "properties" : {
          "factFinderModules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FactFinderModuleWithIdModel"
            }
          }
        }
      },
      "FactFinderPopulatableEntityModel" : {
        "required" : [ "householdId" ],
        "type" : "object",
        "properties" : {
          "householdId" : {
            "maximum" : 2147483647,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "modules" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "Demographics", "Assets", "Liabilities", "Incomes", "Expenses", "Insurance", "Retirement", "Education", "MajorPurchase" ]
            }
          },
          "planId" : {
            "maximum" : 2147483647,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "planLevel" : {
            "type" : "string",
            "enum" : [ "Level2", "Level1" ]
          }
        }
      },
      "FactFinderPopulationModel" : {
        "type" : "object",
        "properties" : {
          "planId" : {
            "maximum" : 2147483647,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "FactFinderSnapshotWithIdModel" : {
        "type" : "object",
        "properties" : {
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "factFinderData" : {
            "$ref" : "#/components/schemas/IFactFinderSnapshotDomainObject"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "factFinderStatus" : {
            "type" : "string",
            "enum" : [ "New", "InProgress", "ClientSubmitted", "AdvisorAccepted", "Canceled", "Draft", "Deleted" ]
          },
          "snapshotId" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "FactFinderSnapshotsModel" : {
        "type" : "object",
        "properties" : {
          "snapshots" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FactFinderSnapshotWithIdModel"
            }
          }
        }
      },
      "FactFinderWithIdModel" : {
        "type" : "object",
        "properties" : {
          "countryCode" : {
            "type" : "string",
            "enum" : [ "UnitedStates", "Canada" ]
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "householdId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lastStatusUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "modules" : {
            "$ref" : "#/components/schemas/FactFinderModulesModel"
          },
          "planId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "planLevel" : {
            "type" : "string",
            "enum" : [ "Level2", "Level1" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "New", "InProgress", "ClientSubmitted", "AdvisorAccepted", "Canceled", "Draft", "Deleted" ]
          }
        }
      },
      "FamilyHeadModel" : {
        "required" : [ "alreadyRetired", "birthDate", "firstName", "gender", "lastName", "taxFilingStatus" ],
        "type" : "object",
        "properties" : {
          "alreadyRetired" : {
            "type" : "boolean"
          },
          "birthDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "firstName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "gender" : {
            "type" : "string",
            "enum" : [ "Male", "Female", "None" ]
          },
          "lastName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "taxFilingStatus" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "FilingStatusTypeModel" : {
        "type" : "object",
        "properties" : {
          "filingStatusTypeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "filingStatusTypeName" : {
            "type" : "string"
          },
          "hasJointDependent" : {
            "type" : "boolean"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "partnerStatuses" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "validForSingleAnalysis" : {
            "type" : "boolean"
          }
        }
      },
      "FilingStatusTypesModel" : {
        "type" : "object",
        "properties" : {
          "filingStatusTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FilingStatusTypeModel"
            }
          }
        }
      },
      "FrequencyTypeModel" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "FrequencyTypesModel" : {
        "type" : "object",
        "properties" : {
          "frequencyTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FrequencyTypeModel"
            }
          }
        }
      },
      "IAccountHoldingDomainObject" : {
        "type" : "object",
        "properties" : {
          "accountHoldingId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "costBasis" : {
            "type" : "number",
            "format" : "double"
          },
          "cusip" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "heldAway" : {
            "type" : "boolean"
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "symbol" : {
            "type" : "string"
          },
          "valuationDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "IAccountSavingsStrategyDomainObject" : {
        "type" : "object",
        "properties" : {
          "accountId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "employerSavingsAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "employerSavingsAmountType" : {
            "type" : "string",
            "enum" : [ "Dollar", "Percent", "Max" ]
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "frequencyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mandatoryAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "mandatoryAmountType" : {
            "type" : "string",
            "enum" : [ "Dollar", "Percent", "Max" ]
          },
          "postTaxSavingsAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "postTaxSavingsAmountType" : {
            "type" : "string",
            "enum" : [ "Dollar", "Percent", "Max" ]
          },
          "preTaxSavingsAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "preTaxSavingsAmountType" : {
            "type" : "string",
            "enum" : [ "Dollar", "Percent", "Max" ]
          },
          "savingsStrategyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "IAccountWithSubEntitiesDomainObject" : {
        "type" : "object",
        "properties" : {
          "accountHoldings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IAccountHoldingDomainObject"
            }
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "accountType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "externalSourceId" : {
            "type" : "string"
          },
          "externalSourceName" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lastUpdated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "owner" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint", "Dependent", "Other" ]
          },
          "ownerDependentId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "savingsStrategies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IAccountSavingsStrategyDomainObject"
            }
          }
        }
      },
      "ICriticalIllnessInsurancePolicyDomainObject" : {
        "type" : "object",
        "properties" : {
          "benefit" : {
            "type" : "number",
            "format" : "double"
          },
          "criticalIllnessInsurancePolicyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "insured" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient" ]
          },
          "policyType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "IDemographicsDependentDomainObject" : {
        "type" : "object",
        "properties" : {
          "birthDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "demographicsId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dependentId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dependentOf" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint", "Other" ]
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "relationship" : {
            "type" : "string",
            "enum" : [ "Son", "Daughter", "FosterSon", "FosterDaughter", "Grandson", "Granddaughter", "Nephew", "Niece", "MaleCousin", "FemaleCousin", "Father", "Mother", "Grandfather", "Grandmother", "Uncle", "Aunt", "Brother", "Sister", "SonInLaw", "DaughterInLaw", "MaleOther", "FemaleOther" ]
          }
        }
      },
      "IDemographicsWithDependentsDomainObject" : {
        "type" : "object",
        "properties" : {
          "city" : {
            "type" : "string"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "demographicsId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dependents" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IDemographicsDependentDomainObject"
            }
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "externalSourceId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "head1" : {
            "$ref" : "#/components/schemas/IFamilyHeadDomainObject"
          },
          "head2" : {
            "$ref" : "#/components/schemas/IFamilyHeadDomainObject"
          },
          "jointAnalysis" : {
            "type" : "boolean"
          },
          "lockRetirement" : {
            "type" : "boolean"
          },
          "state" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "IDisabilityInsurancePolicyDomainObject" : {
        "type" : "object",
        "properties" : {
          "benefit" : {
            "type" : "number",
            "format" : "double"
          },
          "benefitFrequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "benefitType" : {
            "type" : "string",
            "enum" : [ "Dollar", "Percent" ]
          },
          "description" : {
            "type" : "string"
          },
          "disabilityInsurancePolicyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "insured" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient" ]
          },
          "policyType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          },
          "premiumFrequency" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "IEducationExpenseDomainObject" : {
        "type" : "object",
        "properties" : {
          "annualCost" : {
            "type" : "number",
            "format" : "double"
          },
          "educationExpenseId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "educationGoalId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "member" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Dependent" ]
          },
          "memberDependentId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "startYear" : {
            "type" : "string",
            "format" : "date-time"
          },
          "years" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "IEducationGoalWithExpensesDomainObject" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "educationExpenses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IEducationExpenseDomainObject"
            }
          },
          "educationGoalId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "projectedCost" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "IExpenseDomainObject" : {
        "type" : "object",
        "properties" : {
          "annualPeriod" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "expenseAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "expenseId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "expenseTypeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "member" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "IFactFinderDefinedBenefitPensionDomainObject" : {
        "type" : "object",
        "properties" : {
          "definedBenefitPensionId" : {
            "type" : "integer",
            "format" : "int32",
            "readOnly" : true
          },
          "description" : {
            "type" : "string",
            "readOnly" : true
          },
          "estimatedAmount" : {
            "type" : "number",
            "format" : "double",
            "readOnly" : true
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "member" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "Client", "CoClient" ]
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "IFactFinderLiabilityDomainObject" : {
        "type" : "object",
        "properties" : {
          "balance" : {
            "type" : "number",
            "format" : "double"
          },
          "balanceAsOfDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "externalSourceId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "importSource" : {
            "type" : "string"
          },
          "interestRate" : {
            "type" : "number",
            "format" : "double"
          },
          "lastUpdated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "liabilityId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "liabilityType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "loanDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "originalPrincipal" : {
            "type" : "number",
            "format" : "double"
          },
          "owner" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "payment" : {
            "type" : "number",
            "format" : "double"
          },
          "paymentType" : {
            "type" : "string",
            "enum" : [ "InterestOnly", "PrincipalAndInterest", "SetPrincipal", "LastPeriod" ]
          }
        }
      },
      "IFactFinderLifestyleAssetDomainObject" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "readOnly" : true
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lifestyleAssetId" : {
            "type" : "integer",
            "format" : "int32",
            "readOnly" : true
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double",
            "readOnly" : true
          },
          "owner" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "purchaseAmount" : {
            "type" : "number",
            "format" : "double",
            "readOnly" : true
          },
          "purchaseDate" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "type" : {
            "type" : "integer",
            "format" : "int32",
            "readOnly" : true
          }
        }
      },
      "IFactFinderSnapshotDomainObject" : {
        "type" : "object",
        "properties" : {
          "accounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IAccountWithSubEntitiesDomainObject"
            }
          },
          "criticalIllnessInsurancePolicies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICriticalIllnessInsurancePolicyDomainObject"
            }
          },
          "definedBenefitPensions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IFactFinderDefinedBenefitPensionDomainObject"
            }
          },
          "demographics" : {
            "$ref" : "#/components/schemas/IDemographicsWithDependentsDomainObject"
          },
          "disabilityInsurancePolicies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IDisabilityInsurancePolicyDomainObject"
            }
          },
          "educationGoals" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IEducationGoalWithExpensesDomainObject"
            }
          },
          "expenses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IExpenseDomainObject"
            }
          },
          "incomes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IIncomeDomainObject"
            }
          },
          "liabilities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IFactFinderLiabilityDomainObject"
            }
          },
          "lifeInsurancePolicies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ILifeInsurancePolicyDomainObject"
            }
          },
          "lifestyleAssets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IFactFinderLifestyleAssetDomainObject"
            }
          },
          "longTermCareInsurancePolicies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ILongTermCareInsurancePolicyDomainObject"
            }
          },
          "majorPurchaseGoals" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IMajorPurchaseGoalDomainObject"
            }
          },
          "planYear" : {
            "type" : "integer",
            "format" : "int32"
          },
          "realEstateAssets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IRealEstateAssetDomainObject"
            }
          },
          "retirementGoal" : {
            "$ref" : "#/components/schemas/IRetirementGoalWithExpensesDomainObject"
          }
        }
      },
      "IFamilyHeadDomainObject" : {
        "type" : "object",
        "properties" : {
          "alreadyRetired" : {
            "type" : "boolean"
          },
          "birthDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "gender" : {
            "type" : "string",
            "enum" : [ "Male", "Female", "None" ]
          },
          "lastName" : {
            "type" : "string"
          },
          "taxFilingStatus" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "IIncomeDomainObject" : {
        "type" : "object",
        "properties" : {
          "annualAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "description" : {
            "type" : "string"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "incomeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "incomeTypeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "owner" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient" ]
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ILifeInsurancePolicyDomainObject" : {
        "type" : "object",
        "properties" : {
          "beneficiary" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Dependent", "Other" ]
          },
          "beneficiaryDependentId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "benefit" : {
            "type" : "number",
            "format" : "double"
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "generalAccountMarketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "insured" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "FirstToDie", "SecondToDie", "Other" ]
          },
          "lifeInsurancePolicyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "payer" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint", "Other" ]
          },
          "policyType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          },
          "subaccounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LifeInsurancePolicySubaccountDomainObject"
            }
          }
        }
      },
      "ILongTermCareInsurancePolicyDomainObject" : {
        "type" : "object",
        "properties" : {
          "benefit" : {
            "type" : "number",
            "format" : "double"
          },
          "benefitFrequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "insured" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient" ]
          },
          "longTermCareInsurancePolicyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          },
          "premiumFrequency" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "IMajorPurchaseGoalDomainObject" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double",
            "readOnly" : true
          },
          "description" : {
            "type" : "string",
            "readOnly" : true
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "majorPurchaseGoalId" : {
            "type" : "integer",
            "format" : "int32",
            "readOnly" : true
          },
          "majorPurchaseGoalTypeId" : {
            "type" : "integer",
            "format" : "int32",
            "readOnly" : true
          },
          "member" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "targetDate" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "IRealEstateAssetDomainObject" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "owner" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "purchaseAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "purchaseDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "realEstateAssetId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "rentalIncome" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "IRetirementExpenseDomainObject" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double"
          },
          "annualPeriod" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "member" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "retirementExpenseId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "retirementGoalId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "IRetirementGoalWithExpensesDomainObject" : {
        "type" : "object",
        "properties" : {
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "head1RetirementDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "head2RetirementDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "retirementExpenses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IRetirementExpenseDomainObject"
            }
          },
          "retirementGoalId" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "IncomeModel" : {
        "required" : [ "description", "factFinderId" ],
        "type" : "object",
        "properties" : {
          "annualAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "incomeTypeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "owner" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient" ]
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "IncomeTypeModel" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "IncomeTypesModel" : {
        "type" : "object",
        "properties" : {
          "incomeTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IncomeTypeModel"
            }
          }
        }
      },
      "IncomeWithIdModel" : {
        "type" : "object",
        "properties" : {
          "annualAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "description" : {
            "type" : "string"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "incomeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "incomeTypeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "owner" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient" ]
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "IncomesModel" : {
        "type" : "object",
        "properties" : {
          "incomes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IncomeWithIdModel"
            }
          }
        }
      },
      "LiabilitiesModel" : {
        "type" : "object",
        "properties" : {
          "liabilities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LiabilityWithIdModel"
            }
          }
        }
      },
      "LiabilityModel" : {
        "required" : [ "description", "factFinderId" ],
        "type" : "object",
        "properties" : {
          "balance" : {
            "type" : "number",
            "format" : "double"
          },
          "balanceAsOfDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "externalSourceId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "externalSourceName" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "interestRate" : {
            "maximum" : 50,
            "minimum" : 0,
            "type" : "number",
            "format" : "double"
          },
          "lastUpdated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "liabilityType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "loanDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "originalPrincipal" : {
            "type" : "number",
            "format" : "double"
          },
          "owner" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "payment" : {
            "type" : "number",
            "format" : "double"
          },
          "paymentType" : {
            "type" : "string",
            "enum" : [ "InterestOnly", "PrincipalAndInterest", "SetPrincipal", "LastPeriod" ]
          }
        }
      },
      "LiabilityTypeModel" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "LiabilityTypesModel" : {
        "type" : "object",
        "properties" : {
          "liabilityTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LiabilityTypeModel"
            }
          }
        }
      },
      "LiabilityWithIdModel" : {
        "type" : "object",
        "properties" : {
          "balance" : {
            "type" : "number",
            "format" : "double"
          },
          "balanceAsOfDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "externalSourceId" : {
            "type" : "string"
          },
          "externalSourceName" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "interestRate" : {
            "type" : "number",
            "format" : "double"
          },
          "lastUpdated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "liabilityId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "liabilityType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "loanDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "originalPrincipal" : {
            "type" : "number",
            "format" : "double"
          },
          "owner" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "payment" : {
            "type" : "number",
            "format" : "double"
          },
          "paymentType" : {
            "type" : "string",
            "enum" : [ "InterestOnly", "PrincipalAndInterest", "SetPrincipal", "LastPeriod" ]
          }
        }
      },
      "LifeInsurancePoliciesModel" : {
        "type" : "object",
        "properties" : {
          "lifeInsurancePolicies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LifeInsurancePolicyWithIdModel"
            }
          }
        }
      },
      "LifeInsurancePoliciesWithSubEntitiesModel" : {
        "type" : "object",
        "properties" : {
          "lifeInsurancePolicies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LifeInsurancePolicyWithSubEntitiesModel"
            }
          }
        }
      },
      "LifeInsurancePolicyModel" : {
        "required" : [ "description", "factFinderId" ],
        "type" : "object",
        "properties" : {
          "beneficiary" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Dependent", "Other" ]
          },
          "beneficiaryDependentId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "benefit" : {
            "type" : "number",
            "format" : "double"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "generalAccountMarketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "insured" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "FirstToDie", "SecondToDie", "Other" ]
          },
          "payer" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint", "Other" ]
          },
          "policyType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "LifeInsurancePolicySubaccountDomainObject" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "lifeInsurancePolicyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lifeInsurancePolicySubaccountId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "symbol" : {
            "type" : "string"
          }
        }
      },
      "LifeInsurancePolicySubaccountModel" : {
        "required" : [ "description" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "symbol" : {
            "maxLength" : 31,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "LifeInsurancePolicySubaccountWithIdModel" : {
        "required" : [ "description" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "lifeInsurancePolicyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lifeInsurancePolicySubaccountId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "symbol" : {
            "maxLength" : 31,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "LifeInsurancePolicySubaccountsModel" : {
        "type" : "object",
        "properties" : {
          "lifeInsurancePolicySubaccounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LifeInsurancePolicySubaccountWithIdModel"
            }
          }
        }
      },
      "LifeInsurancePolicyTypeModel" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "LifeInsurancePolicyTypesModel" : {
        "type" : "object",
        "properties" : {
          "insurancePolicyTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LifeInsurancePolicyTypeModel"
            }
          }
        }
      },
      "LifeInsurancePolicyWithIdModel" : {
        "type" : "object",
        "properties" : {
          "beneficiary" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Dependent", "Other" ]
          },
          "beneficiaryDependentId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "benefit" : {
            "type" : "number",
            "format" : "double"
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "generalAccountMarketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "insurancePolicyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "insured" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "FirstToDie", "SecondToDie", "Other" ]
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "payer" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint", "Other" ]
          },
          "policyType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "LifeInsurancePolicyWithSubEntitiesModel" : {
        "type" : "object",
        "properties" : {
          "beneficiary" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Dependent", "Other" ]
          },
          "beneficiaryDependentId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "benefit" : {
            "type" : "number",
            "format" : "double"
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "generalAccountMarketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "insurancePolicyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "insured" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "FirstToDie", "SecondToDie", "Other" ]
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "payer" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint", "Other" ]
          },
          "policyType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          },
          "subaccounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LifeInsurancePolicySubaccountWithIdModel"
            }
          }
        }
      },
      "LifestyleAssetModel" : {
        "required" : [ "description", "factFinderId" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "owner" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "purchaseAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "purchaseDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "LifestyleAssetTypeModel" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "LifestyleAssetTypesModel" : {
        "type" : "object",
        "properties" : {
          "lifestyleAssetTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LifestyleAssetTypeModel"
            }
          }
        }
      },
      "LifestyleAssetWithIdModel" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lifestyleAssetId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "owner" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "purchaseAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "purchaseDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "LifestyleAssetsModel" : {
        "type" : "object",
        "properties" : {
          "lifestyleAssets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LifestyleAssetWithIdModel"
            }
          }
        }
      },
      "LongTermCareInsurancePoliciesModel" : {
        "type" : "object",
        "properties" : {
          "longTermCareInsurancePolicies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LongTermCareInsurancePolicyWithIdModel"
            }
          }
        }
      },
      "LongTermCareInsurancePolicyModel" : {
        "required" : [ "description", "factFinderId" ],
        "type" : "object",
        "properties" : {
          "benefit" : {
            "type" : "number",
            "format" : "double"
          },
          "benefitFrequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "insured" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient" ]
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          },
          "premiumFrequency" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "LongTermCareInsurancePolicyWithIdModel" : {
        "type" : "object",
        "properties" : {
          "benefit" : {
            "type" : "number",
            "format" : "double"
          },
          "benefitFrequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "insurancePolicyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "insured" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient" ]
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "premium" : {
            "type" : "number",
            "format" : "double"
          },
          "premiumFrequency" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "MajorPurchaseGoalModel" : {
        "required" : [ "description", "factFinderId" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "majorPurchaseGoalTypeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "member" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "targetDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MajorPurchaseGoalTypeModel" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "majorPurchaseGoalTypeId" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "MajorPurchaseGoalTypesModel" : {
        "type" : "object",
        "properties" : {
          "majorPurchaseGoalTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MajorPurchaseGoalTypeModel"
            }
          }
        }
      },
      "MajorPurchaseGoalWithIdModel" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double"
          },
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "majorPurchaseGoalId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "majorPurchaseGoalTypeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "member" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "targetDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MajorPurchaseGoalsModel" : {
        "type" : "object",
        "properties" : {
          "majorPurchaseGoals" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MajorPurchaseGoalWithIdModel"
            }
          }
        }
      },
      "Object" : {
        "type" : "object"
      },
      "ObjectLink" : {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string"
          },
          "rel" : {
            "type" : "string"
          }
        }
      },
      "OwnerModel" : {
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string"
          },
          "owner" : {
            "type" : "string"
          },
          "ownerDependentId" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "OwnersModel" : {
        "type" : "object",
        "properties" : {
          "owners" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OwnerModel"
            }
          }
        }
      },
      "RealEstateAssetModel" : {
        "required" : [ "description", "factFinderId" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "owner" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "purchaseAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "purchaseDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "rentalIncome" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "RealEstateAssetWithIdModel" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "marketValue" : {
            "type" : "number",
            "format" : "double"
          },
          "owner" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "purchaseAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "purchaseDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "realEstateAssetId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "rentalIncome" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "RealEstateAssetsModel" : {
        "type" : "object",
        "properties" : {
          "realEstateAssets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RealEstateAssetWithIdModel"
            }
          }
        }
      },
      "RelationshipTypeModel" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "isChildType" : {
            "type" : "boolean"
          },
          "relationshipType" : {
            "type" : "string",
            "enum" : [ "Son", "Daughter", "FosterSon", "FosterDaughter", "Grandson", "Granddaughter", "Nephew", "Niece", "MaleCousin", "FemaleCousin", "Father", "Mother", "Grandfather", "Grandmother", "Uncle", "Aunt", "Brother", "Sister", "SonInLaw", "DaughterInLaw", "MaleOther", "FemaleOther" ]
          }
        }
      },
      "RelationshipTypesModel" : {
        "type" : "object",
        "properties" : {
          "relationshipTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RelationshipTypeModel"
            }
          }
        }
      },
      "RetirementExpenseModel" : {
        "required" : [ "description" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double"
          },
          "annualPeriod" : {
            "maximum" : 99,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "member" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "RetirementExpenseWithIdModel" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "format" : "double"
          },
          "annualPeriod" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "frequency" : {
            "type" : "integer",
            "format" : "int32"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "member" : {
            "type" : "string",
            "enum" : [ "Client", "CoClient", "Joint" ]
          },
          "retirementExpenseId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "retirementGoalId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "RetirementExpensesModel" : {
        "type" : "object",
        "properties" : {
          "retirementExpenses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RetirementExpenseWithIdModel"
            }
          }
        }
      },
      "RetirementGoalModel" : {
        "required" : [ "factFinderId" ],
        "type" : "object",
        "properties" : {
          "externalDestinationId" : {
            "maxLength" : 64,
            "minLength" : 0,
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "head1RetirementDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "head2RetirementDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "RetirementGoalWithIdModel" : {
        "type" : "object",
        "properties" : {
          "externalDestinationId" : {
            "type" : "string"
          },
          "factFinderId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "head1RetirementDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "head2RetirementDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "retirementGoalId" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "RetirementGoalsModel" : {
        "type" : "object",
        "properties" : {
          "retirementGoals" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RetirementGoalWithIdModel"
            }
          }
        }
      },
      "SavingsStrategiesModel" : {
        "type" : "object",
        "properties" : {
          "savingsStrategies" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SavingsStrategyWithIdModel"
            }
          }
        }
      },
      "SavingsStrategyModel" : {
        "type" : "object",
        "properties" : {
          "employerSavingsAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "employerSavingsAmountType" : {
            "type" : "string",
            "enum" : [ "Dollar", "Percent", "Max" ]
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "frequencyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mandatoryAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "mandatoryAmountType" : {
            "type" : "string",
            "enum" : [ "Dollar", "Percent", "Max" ]
          },
          "postTaxSavingsAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "postTaxSavingsAmountType" : {
            "type" : "string",
            "enum" : [ "Dollar", "Percent", "Max" ]
          },
          "preTaxSavingsAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "preTaxSavingsAmountType" : {
            "type" : "string",
            "enum" : [ "Dollar", "Percent", "Max" ]
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "SavingsStrategyWithIdModel" : {
        "type" : "object",
        "properties" : {
          "accountId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "employerSavingsAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "employerSavingsAmountType" : {
            "type" : "string",
            "enum" : [ "Dollar", "Percent", "Max" ]
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "externalDestinationId" : {
            "type" : "string"
          },
          "frequencyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mandatoryAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "mandatoryAmountType" : {
            "type" : "string",
            "enum" : [ "Dollar", "Percent", "Max" ]
          },
          "postTaxSavingsAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "postTaxSavingsAmountType" : {
            "type" : "string",
            "enum" : [ "Dollar", "Percent", "Max" ]
          },
          "preTaxSavingsAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "preTaxSavingsAmountType" : {
            "type" : "string",
            "enum" : [ "Dollar", "Percent", "Max" ]
          },
          "savingsStrategyId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "SavingsTypeDomainObject" : {
        "type" : "object",
        "properties" : {
          "typeName" : {
            "type" : "string",
            "enum" : [ "PostTaxSavings", "PreTaxSavings", "EmployerSavings", "MandatorySavings" ]
          },
          "validAmountTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "Dollar", "Percent", "Max" ]
            }
          }
        }
      },
      "ServiceInformationModel" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "schemaVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "serviceVersion" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          }
        }
      },
      "StateProvinceModel" : {
        "type" : "object",
        "properties" : {
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ObjectLink"
            }
          },
          "stateProvinceId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stateProvinceName" : {
            "type" : "string"
          }
        }
      },
      "StatesProvincesModel" : {
        "type" : "object",
        "properties" : {
          "statesProvinces" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StateProvinceModel"
            }
          }
        }
      }
    }
  }
}