{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Personalizer Client",
    "description" : "Personalizer Service is an Azure Cognitive Service that makes it easy to target content and experiences without complex pre-analysis or cleanup of past data. Given a context and featurized content, the Personalizer Service returns which content item to show to users in rewardActionId. As rewards are sent in response to the use of rewardActionId, the reinforcement learning algorithm will improve the model and improve performance of future rank calls.",
    "version" : "v1.0"
  },
  "servers" : [ {
    "url" : "https://azure.local/personalizer/v1.0"
  } ],
  "security" : [ {
    "apim_key" : null
  } ],
  "tags" : [ {
    "name" : "Configurations",
    "description" : "Manages configuration operations."
  }, {
    "name" : "Evaluations",
    "description" : "Manages counterfactual evaluation operations."
  }, {
    "name" : "Events",
    "description" : "Manages event operations."
  }, {
    "name" : "Logs",
    "description" : "Manages reinforcement learning logs."
  }, {
    "name" : "Model",
    "description" : "Manages reinforcement learning configuration operations."
  }, {
    "name" : "Rank",
    "description" : "Manages ranking operations."
  } ],
  "paths" : {
    "/configurations/policy" : {
      "get" : {
        "tags" : [ "Configurations" ],
        "summary" : "Get Policy.",
        "description" : "Get the Learning settings currently used by the Personalizer service.",
        "operationId" : "Policy_Get",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicyContract"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Configurations" ],
        "summary" : "Update Policy.",
        "description" : "Update the Learning settings that the Personalizer service will use to train models.",
        "operationId" : "Policy_Update",
        "requestBody" : {
          "description" : "The Learning settings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PolicyContract"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicyContract"
                }
              }
            }
          },
          "default" : {
            "description" : "Invalid policy configuration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Configurations" ],
        "summary" : "Reset Policy.",
        "description" : "Resets the Learning settings of the Personalizer service to default.",
        "operationId" : "Policy_Reset",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicyContract"
                }
              }
            }
          }
        }
      }
    },
    "/configurations/service" : {
      "get" : {
        "tags" : [ "Configurations" ],
        "summary" : "Get Service Configuration.",
        "description" : "Get the Personalizer service configuration.",
        "operationId" : "ServiceConfiguration_Get",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceConfiguration"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Configurations" ],
        "summary" : "Update Service Configuration.",
        "description" : "Update the Personalizer service configuration.",
        "operationId" : "ServiceConfiguration_Update",
        "requestBody" : {
          "description" : "The personalizer service configuration.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceConfiguration"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceConfiguration"
                }
              }
            }
          },
          "default" : {
            "description" : "Invalid service configuration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/evaluations" : {
      "get" : {
        "tags" : [ "Evaluations" ],
        "summary" : "List Evaluations.",
        "description" : "List all the submitted evaluations.",
        "operationId" : "Evaluations_List",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Evaluation"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Evaluations" ],
        "summary" : "Create Evaluation.",
        "description" : "Submit a new evaluation job.",
        "operationId" : "Evaluations_Create",
        "requestBody" : {
          "description" : "The evaluation job definition.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EvaluationContract"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "headers" : {
              "Location" : {
                "description" : "Location of the evaluation resource",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Evaluation"
                }
              }
            }
          },
          "default" : {
            "description" : "Invalid evaluation contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/evaluations/{evaluationId}" : {
      "get" : {
        "tags" : [ "Evaluations" ],
        "summary" : "Get Evaluation.",
        "description" : "Get the evaluation associated with the Id.",
        "operationId" : "Evaluations_Get",
        "parameters" : [ {
          "name" : "evaluationId",
          "in" : "path",
          "description" : "Id of the evaluation.",
          "required" : true,
          "schema" : {
            "maxLength" : 256,
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Evaluation"
                }
              }
            }
          },
          "default" : {
            "description" : "Evaluation not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Evaluations" ],
        "summary" : "Delete Evaluation.",
        "description" : "Delete the evaluation associated with the Id.",
        "operationId" : "Evaluations_Delete",
        "parameters" : [ {
          "name" : "evaluationId",
          "in" : "path",
          "description" : "Id of the evaluation to delete.",
          "required" : true,
          "schema" : {
            "maxLength" : 256,
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    },
    "/events/{eventId}/activate" : {
      "post" : {
        "tags" : [ "Events" ],
        "summary" : "Activate Event.",
        "description" : "Report that the specified event was actually displayed to the user and a reward should be expected for it",
        "operationId" : "Events_Activate",
        "parameters" : [ {
          "name" : "eventId",
          "in" : "path",
          "description" : "The event ID this activation applies to.",
          "required" : true,
          "schema" : {
            "maxLength" : 256,
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "default" : {
            "description" : "Invalid activate event request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/reward" : {
      "post" : {
        "tags" : [ "Events" ],
        "summary" : "Post Reward.",
        "description" : "Report reward that resulted from using the action specified in rewardActionId for the specified event.",
        "operationId" : "Events_Reward",
        "parameters" : [ {
          "name" : "eventId",
          "in" : "path",
          "description" : "The event id this reward applies to.",
          "required" : true,
          "schema" : {
            "maxLength" : 256,
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The reward should be a floating point number, typically between 0 and 1.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RewardRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "default" : {
            "description" : "Invalid reward request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logs" : {
      "delete" : {
        "tags" : [ "Logs" ],
        "summary" : "Deletes Logs.",
        "description" : "Delete all generated logs.",
        "operationId" : "Log_Delete",
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    },
    "/logs/properties" : {
      "get" : {
        "tags" : [ "Logs" ],
        "summary" : "Get Log Properties.",
        "description" : "Get properties of generated logs.",
        "operationId" : "Log_GetProperties",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LogsProperties"
                }
              }
            }
          },
          "default" : {
            "description" : "Logs properties not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/model" : {
      "get" : {
        "tags" : [ "Model" ],
        "summary" : "Get Model.",
        "description" : "Get the model file generated by Personalizer service.",
        "operationId" : "Model_Get",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Model" ],
        "summary" : "Reset Model.",
        "description" : "Resets the model file generated by Personalizer service.",
        "operationId" : "Model_Reset",
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "default" : {
            "description" : "Model reset failed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/model/properties" : {
      "get" : {
        "tags" : [ "Model" ],
        "summary" : "Get Model Properties.",
        "description" : "Get properties of the model file generated by Personalizer service.",
        "operationId" : "Model_GetProperties",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModelProperties"
                }
              }
            }
          }
        }
      }
    },
    "/rank" : {
      "post" : {
        "tags" : [ "Rank" ],
        "summary" : "Post Rank.",
        "description" : "Submit a Personalizer rank request, to get which of the provided actions should be used in the provided context.",
        "operationId" : "Rank",
        "requestBody" : {
          "description" : "A Personalizer request.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RankRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RankResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Invalid rank request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ContainerStatus" : {
        "type" : "object",
        "properties" : {
          "apiStatus" : {
            "type" : "string"
          },
          "apiStatusMessage" : {
            "type" : "string"
          },
          "service" : {
            "type" : "string"
          }
        }
      },
      "DateRange" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "to" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "ErrorResponse" : {
        "required" : [ "error" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "$ref" : "#/components/schemas/PersonalizerError"
          }
        },
        "description" : "Used to return an error to the client"
      },
      "Evaluation" : {
        "type" : "object",
        "properties" : {
          "endTime" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "featureImportance" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "id" : {
            "maxLength" : 256,
            "type" : "string",
            "readOnly" : true
          },
          "jobId" : {
            "type" : "string",
            "readOnly" : true
          },
          "name" : {
            "maxLength" : 256,
            "type" : "string",
            "readOnly" : true
          },
          "policyResults" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PolicyResult"
            }
          },
          "startTime" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "status" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "completed", "pending", "failed", "notSubmitted" ]
          }
        }
      },
      "EvaluationContract" : {
        "required" : [ "endTime", "name", "policies", "startTime" ],
        "type" : "object",
        "properties" : {
          "enableOfflineExperimentation" : {
            "type" : "boolean",
            "description" : "True if the evaluation should explore for a more optimal Learning settings."
          },
          "endTime" : {
            "type" : "string",
            "description" : "The end time of the evaluation.",
            "format" : "date-time"
          },
          "name" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The name of the evaluation."
          },
          "policies" : {
            "type" : "array",
            "description" : "Additional Learning settings to evaluate.",
            "items" : {
              "$ref" : "#/components/schemas/PolicyContract"
            }
          },
          "startTime" : {
            "type" : "string",
            "description" : "The start time of the evaluation.",
            "format" : "date-time"
          }
        },
        "description" : "A counterfactual evaluation."
      },
      "InternalError" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Detailed error code."
          },
          "innererror" : {
            "$ref" : "#/components/schemas/InternalError"
          }
        },
        "description" : "An object containing more specific information than the parent object about the error."
      },
      "LogsProperties" : {
        "type" : "object",
        "properties" : {
          "dateRange" : {
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/DateRange"
            } ]
          }
        }
      },
      "ModelProperties" : {
        "type" : "object",
        "properties" : {
          "creationTime" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "lastModifiedTime" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "PersonalizerError" : {
        "required" : [ "code", "message" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "High level error code.",
            "enum" : [ "BadRequest", "ResourceNotFound", "InternalServerError", "InvalidServiceConfiguration", "InvalidPolicyConfiguration", "InvalidPolicyContract", "InvalidEvaluationContract", "InvalidRewardRequest", "InvalidEventIdToActivate", "InvalidRankRequest", "InvalidExportLogsRequest", "InvalidContainer", "FrontEndNotFound", "EvaluationNotFound", "LogsPropertiesNotFound", "RankNullResponse", "UpdateConfigurationFailed", "ModelResetFailed" ]
          },
          "details" : {
            "type" : "array",
            "description" : "An array of details about specific errors that led to this reported error.",
            "items" : {
              "$ref" : "#/components/schemas/PersonalizerError"
            }
          },
          "innerError" : {
            "$ref" : "#/components/schemas/InternalError"
          },
          "message" : {
            "type" : "string",
            "description" : "A message explaining the error reported by the service."
          },
          "target" : {
            "type" : "string",
            "description" : "Error source element."
          }
        },
        "description" : "The error object."
      },
      "PolicyContract" : {
        "required" : [ "arguments", "name" ],
        "type" : "object",
        "properties" : {
          "arguments" : {
            "maxLength" : 1024,
            "type" : "string",
            "description" : "Arguments of the Learning settings."
          },
          "name" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "Name of the Learning settings."
          }
        },
        "description" : "Learning settings specifying how to train the model."
      },
      "PolicyResult" : {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "string",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "readOnly" : true
          },
          "summary" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/PolicyResultSummary"
            }
          },
          "totalSummary" : {
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/PolicyResultSummary"
            } ]
          }
        }
      },
      "PolicyResultSummary" : {
        "type" : "object",
        "properties" : {
          "aggregateTimeWindow" : {
            "type" : "string",
            "format" : "duration",
            "readOnly" : true
          },
          "confidenceInterval" : {
            "type" : "number",
            "format" : "float",
            "readOnly" : true
          },
          "ipsEstimatorDenominator" : {
            "type" : "number",
            "format" : "float",
            "readOnly" : true
          },
          "ipsEstimatorNumerator" : {
            "type" : "number",
            "format" : "float",
            "readOnly" : true
          },
          "nonZeroProbability" : {
            "type" : "number",
            "format" : "float"
          },
          "snipsEstimatorDenominator" : {
            "type" : "number",
            "format" : "float",
            "readOnly" : true
          },
          "sumOfSquares" : {
            "type" : "number",
            "format" : "float",
            "readOnly" : true
          },
          "timeStamp" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "RankRequest" : {
        "required" : [ "actions" ],
        "type" : "object",
        "properties" : {
          "actions" : {
            "type" : "array",
            "description" : "The set of actions the Personalizer service can pick from.\r\nThe set should not contain more than 50 actions.\r\nThe order of the actions does not affect the rank result but the order\r\nshould match the sequence your application would have used to display them.\r\nThe first item in the array will be used as Baseline item in Offline evaluations.",
            "items" : {
              "$ref" : "#/components/schemas/RankableAction"
            }
          },
          "contextFeatures" : {
            "type" : "array",
            "description" : "Features of the context used for Personalizer as a\r\ndictionary of dictionaries. This depends on the application, and\r\ntypically includes features about the current user, their\r\ndevice, profile information, aggregated data about time and date, etc.\r\nFeatures should not include personally identifiable information (PII),\r\nunique UserIDs, or precise timestamps.",
            "items" : {
              "type" : "object"
            }
          },
          "deferActivation" : {
            "type" : "boolean",
            "description" : "Send false if it is certain the rewardActionId in rank results will be shown to the user, therefore\r\nPersonalizer will expect a Reward call, otherwise it will assign the default\r\nReward to the event. Send true if it is possible the user will not see the\r\naction specified in the rank results, because the page is rendering later, or the Rank results may be\r\noverridden by code further downstream.",
            "default" : false
          },
          "eventId" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "Optionally pass an eventId that uniquely identifies this Rank event.\r\nIf null, the service generates a unique eventId. The eventId will be used for\r\nassociating this request with its reward, as well as seeding the pseudo-random\r\ngenerator when making a Personalizer call."
          },
          "excludedActions" : {
            "type" : "array",
            "description" : "The set of action ids to exclude from ranking.",
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Request a set of actions to be ranked by the Personalizer service."
      },
      "RankResponse" : {
        "type" : "object",
        "properties" : {
          "eventId" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The eventId for the round trip from request to response.",
            "readOnly" : true
          },
          "ranking" : {
            "type" : "array",
            "description" : "The calculated ranking for the current request.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/RankedAction"
            }
          },
          "rewardActionId" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The action chosen by the Personalizer service. This is the action your application should display, and for which to report the reward. This might not be the\r\nfirst found in 'ranking' if an action in the request in first position was part of the excluded ids.",
            "readOnly" : true
          }
        },
        "description" : "Returns which action to use as rewardActionId, and additional information about each action as a result of a Rank request."
      },
      "RankableAction" : {
        "required" : [ "features", "id" ],
        "type" : "object",
        "properties" : {
          "features" : {
            "type" : "array",
            "description" : "List of dictionaries containing features.",
            "items" : {
              "type" : "object"
            }
          },
          "id" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "Id of the action."
          }
        },
        "description" : "An action with it's associated features used for ranking."
      },
      "RankedAction" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "Id of the action",
            "readOnly" : true
          },
          "probability" : {
            "maximum" : 1,
            "minimum" : 0,
            "type" : "number",
            "description" : "Probability of the action",
            "format" : "float",
            "readOnly" : true
          }
        },
        "description" : "A ranked action with its resulting probability."
      },
      "RewardRequest" : {
        "required" : [ "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "description" : "Reward to be assigned to an action. Value should be between -1 and 1 inclusive.",
            "format" : "float"
          }
        },
        "description" : "Reward given to a rank response."
      },
      "ServiceConfiguration" : {
        "required" : [ "defaultReward", "explorationPercentage", "logRetentionDays", "modelExportFrequency", "rewardAggregation", "rewardWaitTime" ],
        "type" : "object",
        "properties" : {
          "defaultReward" : {
            "maximum" : 1,
            "minimum" : -1,
            "type" : "number",
            "description" : "The reward given if a reward is not received within the specified wait time.",
            "format" : "float"
          },
          "explorationPercentage" : {
            "maximum" : 1,
            "minimum" : 0,
            "type" : "number",
            "description" : "The percentage of rank responses that will use exploration.",
            "format" : "float"
          },
          "logMirrorEnabled" : {
            "type" : "boolean",
            "description" : "Flag indicates whether log mirroring is enabled."
          },
          "logMirrorSasUri" : {
            "type" : "string",
            "description" : "Azure storage account container SAS URI for log mirroring."
          },
          "logRetentionDays" : {
            "maximum" : 2147483647,
            "minimum" : -1,
            "type" : "integer",
            "description" : "Number of days historical logs are to be maintained. -1 implies the logs will never be deleted.",
            "format" : "int32"
          },
          "modelExportFrequency" : {
            "type" : "string",
            "description" : "Personalizer will start using the most updated trained model for online ranks automatically every specified time period.\r\nFor example, PT5M (5 mins). For information about the time format,\r\nsee http://en.wikipedia.org/wiki/ISO_8601#Durations",
            "format" : "duration"
          },
          "rewardAggregation" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The function used to process rewards, if multiple reward scores are received before rewardWaitTime is over."
          },
          "rewardWaitTime" : {
            "type" : "string",
            "description" : "The time span waited until a request is marked with the default reward.\r\nFor example, PT5M (5 mins). For information about the time format,\r\nsee http://en.wikipedia.org/wiki/ISO_8601#Durations",
            "format" : "duration"
          }
        },
        "description" : "The configuration of the service."
      }
    },
    "parameters" : {
      "Endpoint" : {
        "name" : "Endpoint",
        "in" : "path",
        "description" : "Supported Cognitive Services endpoint.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      }
    },
    "securitySchemes" : {
      "apim_key" : {
        "type" : "apiKey",
        "name" : "Ocp-Apim-Subscription-Key",
        "in" : "header"
      }
    }
  }
}