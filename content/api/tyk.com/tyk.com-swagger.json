{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Gateway REST API",
    "version" : "1.9"
  },
  "servers" : [ {
    "url" : "//tyk.local/"
  } ],
  "paths" : {
    "/tyk/apis/" : {
      "get" : {
        "description" : "Gets a list of *API Definition* objects that are currently live on the gateway \n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Succesful list response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIDefinitionList"
                }
              }
            }
          }
        }
      },
      "post" : {
        "description" : "Create an *API Definition* object\n",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/APIDefinition"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Succesful API Deletion",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "action" : {
                      "type" : "string",
                      "enum" : [ "updated" ]
                    },
                    "key" : {
                      "type" : "string"
                    },
                    "status" : {
                      "type" : "string",
                      "enum" : [ "ok", "error" ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tyk/apis/{apiID}" : {
      "get" : {
        "description" : "Gets an *API Definition* object, if it exists\n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "apiID",
          "in" : "path",
          "description" : "API ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Succesful API response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIDefinition"
                }
              }
            }
          }
        }
      },
      "put" : {
        "description" : "Updates an *API Definition* object, if it exists\n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "apiID",
          "in" : "path",
          "description" : "API ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/APIDefinition"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Succesful API Deletion",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "action" : {
                      "type" : "string",
                      "enum" : [ "updated" ]
                    },
                    "key" : {
                      "type" : "string"
                    },
                    "status" : {
                      "type" : "string",
                      "enum" : [ "ok", "error" ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "description" : "Deletes an *API Definition* object, if it exists\n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "apiID",
          "in" : "path",
          "description" : "API ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Succesful API Deletion",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "action" : {
                      "type" : "string",
                      "enum" : [ "deleted" ]
                    },
                    "key" : {
                      "type" : "string"
                    },
                    "status" : {
                      "type" : "string",
                      "enum" : [ "ok", "error" ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tyk/health/" : {
      "get" : {
        "description" : "Gets the health check values for an API if it is being recorded\n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "api_id",
          "in" : "query",
          "description" : "API ID to query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Succesful healthcheck response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "average_requests_per_second" : {
                      "type" : "number"
                    },
                    "average_upstream_latency" : {
                      "type" : "number"
                    },
                    "key_failures_per_second" : {
                      "type" : "number"
                    },
                    "quota_violations_per_second" : {
                      "type" : "number"
                    },
                    "throttle_requests_per_second" : {
                      "type" : "number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tyk/keys/" : {
      "get" : {
        "description" : "Gets a list of *key* IDs (will only work with non-hashed installations)\n",
        "parameters" : [ {
          "name" : "api_id",
          "in" : "query",
          "description" : "Back-end to target",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "keys" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tyk/keys/create" : {
      "post" : {
        "description" : "Create a new *API token* with the *session object* defined in the body\n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "suppress_reset",
          "in" : "query",
          "description" : "Adding the `suppress_reset` parameter and setting it to `1`, will cause Tyk to not reset the quota limit that is in the current live quota manager. By default Tyk will reset the quota in the live quota manager (initialising it) when ADDing a key. Adding the `suppress_reset` flag to the URL parameters will avoid this behaviour.",
          "schema" : {
            "type" : "number",
            "format" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/SessionObject"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Key Created Response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "action" : {
                      "type" : "string",
                      "enum" : [ "create" ]
                    },
                    "key" : {
                      "type" : "string"
                    },
                    "status" : {
                      "type" : "string",
                      "enum" : [ "ok", "error" ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tyk/keys/{keyId}" : {
      "put" : {
        "description" : "Update an *API token* with the *session object* defined in the body, this operatin overwrites the existing object\n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "Access Token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "suppress_reset",
          "in" : "query",
          "description" : "Adding the `suppress_reset` parameter and setting it to `1`, will cause Tyk to not reset the quota limit that is in the current live quota manager. By default Tyk will reset the quota in the live quota manager (initialising it) when ADDing a key. Adding the `suppress_reset` flag to the URL parameters will avoid this behaviour.",
          "schema" : {
            "type" : "number",
            "format" : "integer"
          }
        }, {
          "name" : "api_id",
          "in" : "query",
          "description" : "Back-end to target",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/SessionObject"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Key Updated Response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "action" : {
                      "type" : "string",
                      "enum" : [ "modified" ]
                    },
                    "key" : {
                      "type" : "string"
                    },
                    "status" : {
                      "type" : "string",
                      "enum" : [ "ok", "error" ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "description" : "Add a pre-specified *API token* with the *session object* defined in the body, this operatin creates a custom token that dsoes not use the gateway naming convention for tokens\n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "Access Token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/SessionObject"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Key Added Response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "action" : {
                      "type" : "string",
                      "enum" : [ "added" ]
                    },
                    "key" : {
                      "type" : "string"
                    },
                    "status" : {
                      "type" : "string",
                      "enum" : [ "ok", "error" ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "description" : "Remove this *API token* from the gateway, this will completely destroy the token and metadata associated with the token and instantly stop access from being granted\n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "Access Token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api_id",
          "in" : "query",
          "description" : "Back-end to target",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Key Deleted Response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "action" : {
                      "type" : "string",
                      "enum" : [ "deleted" ]
                    },
                    "key" : {
                      "type" : "string"
                    },
                    "status" : {
                      "type" : "string",
                      "enum" : [ "ok", "error" ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tyk/oauth/authorize-client/" : {
      "post" : {
        "description" : "The final request from an authorising party for a redirect URI during the Tyk OAuth flow\n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "required" : [ "client_id", "key_rules", "redirect_uri", "response_type" ],
                "type" : "object",
                "properties" : {
                  "response_type" : {
                    "type" : "string",
                    "description" : "Should be provided by requesting client as part of authorisation request, this should be either `code` or `token` depending on the methods you have specified for the API",
                    "format" : "string"
                  },
                  "client_id" : {
                    "type" : "string",
                    "description" : "Should be provided by requesting client as part of authorisation request. The Client ID that is making the request",
                    "format" : "string"
                  },
                  "redirect_uri" : {
                    "type" : "string",
                    "description" : "Should be provided by requesting client as part of authorisation request. Must match with the record stored with Tyk",
                    "format" : "string"
                  },
                  "key_rules" : {
                    "type" : "string",
                    "description" : "A string representation of a *Session Object (form-encoded)*. This should be provided by your application in order to apply any quotas or rules to the key",
                    "format" : "string"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Succesful token response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "access_token" : {
                      "type" : "string"
                    },
                    "code" : {
                      "type" : "string"
                    },
                    "expires_in" : {
                      "type" : "number"
                    },
                    "redirect_to" : {
                      "type" : "string"
                    },
                    "token_type" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tyk/oauth/clients/create" : {
      "post" : {
        "description" : "Create a new OAuth client\n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "api_id" : {
                    "type" : "string"
                  },
                  "redirect_uri" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Succesful create response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthClient"
                }
              }
            }
          }
        }
      }
    },
    "/tyk/oauth/clients/{apiId}" : {
      "get" : {
        "description" : "Get a list of OAuth clients bound to this back end \n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "apiId",
          "in" : "path",
          "description" : "API ID that owns this client (back end)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Succesful listy response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthClients"
                }
              }
            }
          }
        }
      }
    },
    "/tyk/oauth/clients/{apiId}/{clientId}" : {
      "delete" : {
        "description" : "Delete the OAuth client\n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "apiId",
          "in" : "path",
          "description" : "API ID that owns this client (back end)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "clientId",
          "in" : "path",
          "description" : "OAuth Client ID to delete",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Succesful OAuth client deletion",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "action" : {
                      "type" : "string",
                      "enum" : [ "deleted" ]
                    },
                    "key" : {
                      "type" : "string"
                    },
                    "status" : {
                      "type" : "string",
                      "enum" : [ "ok", "error" ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tyk/oauth/refresh/{keyId}" : {
      "delete" : {
        "description" : "Invalidate a refresh token\n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "Access Token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "apiID",
          "in" : "query",
          "description" : "API ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Succesful token revoked",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "action" : {
                      "type" : "string",
                      "enum" : [ "deleted" ]
                    },
                    "key" : {
                      "type" : "string"
                    },
                    "status" : {
                      "type" : "string",
                      "enum" : [ "ok", "error" ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tyk/reload/" : {
      "get" : {
        "description" : "Will reload the targetted gateway\n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Succesful reload response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "error" : {
                      "type" : "string"
                    },
                    "status" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tyk/reload/group" : {
      "get" : {
        "description" : "Will reload the cluster via the targeted gateway\n",
        "parameters" : [ {
          "name" : "x-tyk-authorization",
          "in" : "header",
          "description" : "tyk gateway shared secret",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Succesful reload response",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "error" : {
                      "type" : "string"
                    },
                    "status" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "APIDefinition" : {
        "type" : "object",
        "properties" : {
          "api_id" : {
            "type" : "string"
          },
          "auth" : {
            "type" : "object",
            "properties" : {
              "auth_header_name" : {
                "type" : "string"
              },
              "use_cookie" : {
                "type" : "boolean"
              },
              "use_param" : {
                "type" : "boolean"
              }
            }
          },
          "definition" : {
            "type" : "object",
            "properties" : {
              "key" : {
                "type" : "string"
              },
              "location" : {
                "type" : "string"
              }
            }
          },
          "enable_jwt" : {
            "type" : "boolean"
          },
          "enable_signature_checking" : {
            "type" : "boolean"
          },
          "hmac_allowed_clock_skew" : {
            "type" : "number"
          },
          "id" : {
            "type" : "string"
          },
          "jwt_identity_base_field" : {
            "type" : "string"
          },
          "jwt_policy_field_name" : {
            "type" : "string"
          },
          "jwt_signing_method" : {
            "type" : "string"
          },
          "jwt_source" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "notifications" : {
            "type" : "object",
            "properties" : {
              "oauth_on_keychange_url" : {
                "type" : "string"
              },
              "shared_secret" : {
                "type" : "string"
              }
            }
          },
          "oauth_meta" : {
            "type" : "object",
            "properties" : {
              "allowed_access_types" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "allowed_authorize_types" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "auth_login_redirect" : {
                "type" : "string"
              }
            }
          },
          "org_id" : {
            "type" : "string"
          },
          "slug" : {
            "type" : "string"
          },
          "uptime_tests" : {
            "type" : "object",
            "properties" : {
              "CORS" : {
                "type" : "object",
                "properties" : {
                  "allow_credentials" : {
                    "type" : "boolean"
                  },
                  "allowed_headers" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "allowed_methods" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "allowed_origins" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "debug" : {
                    "type" : "boolean"
                  },
                  "enable" : {
                    "type" : "boolean"
                  },
                  "exposed_headers" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "max_age" : {
                    "type" : "number"
                  },
                  "options_passthrough" : {
                    "type" : "boolean"
                  }
                }
              },
              "active" : {
                "type" : "boolean"
              },
              "allowed_ips" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "cache_options" : {
                "type" : "object",
                "properties" : {
                  "cache_all_safe_requests" : {
                    "type" : "boolean"
                  },
                  "cache_timeout" : {
                    "type" : "number"
                  },
                  "enable_cache" : {
                    "type" : "boolean"
                  },
                  "enable_upstream_cache_control" : {
                    "type" : "boolean"
                  }
                }
              },
              "check_list" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "body" : {
                      "type" : "string"
                    },
                    "headers" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "method" : {
                      "type" : "string"
                    },
                    "url" : {
                      "type" : "string"
                    }
                  }
                }
              },
              "config" : {
                "type" : "object",
                "properties" : {
                  "expire_utime_after" : {
                    "type" : "number"
                  },
                  "recheck_wait" : {
                    "type" : "number"
                  },
                  "service_discovery" : {
                    "$ref" : "#/components/schemas/ServiceDiscoverConfiguration"
                  }
                }
              },
              "custom_middleware" : {
                "type" : "object",
                "properties" : {
                  "post" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/MiddlewareDefinition"
                    }
                  },
                  "pre" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/MiddlewareDefinition"
                    }
                  },
                  "response" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/MiddlewareDefinition"
                    }
                  }
                }
              },
              "do_not_track" : {
                "type" : "string"
              },
              "domain" : {
                "type" : "string"
              },
              "dont_set_quota_on_create" : {
                "type" : "boolean"
              },
              "enable_batch_request_support" : {
                "type" : "boolean"
              },
              "enable_ip_whitelisting" : {
                "type" : "boolean"
              },
              "event_handlers" : {
                "type" : "object"
              },
              "expire_analytics_after" : {
                "type" : "number"
              },
              "proxy" : {
                "type" : "object",
                "properties" : {
                  "check_host_against_uptime_tests" : {
                    "type" : "boolean"
                  },
                  "enable_load_balancing" : {
                    "type" : "boolean"
                  },
                  "listen_path" : {
                    "type" : "string"
                  },
                  "preserve_host_header" : {
                    "type" : "boolean"
                  },
                  "service_discovery" : {
                    "$ref" : "#/components/schemas/ServiceDiscoverConfiguration"
                  },
                  "strip_listen_path" : {
                    "type" : "boolean"
                  },
                  "target_list" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "target_url" : {
                    "type" : "string"
                  }
                }
              },
              "response_processors" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string"
                    },
                    "options" : {
                      "type" : "object"
                    }
                  }
                }
              },
              "session_lifetime" : {
                "type" : "number"
              },
              "tags" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "use_basic_auth" : {
            "type" : "boolean"
          },
          "use_keyless" : {
            "type" : "boolean"
          },
          "use_oauth2" : {
            "type" : "boolean"
          },
          "version_data" : {
            "type" : "object",
            "properties" : {
              "not_versioned" : {
                "type" : "boolean"
              },
              "versions" : {
                "type" : "object",
                "additionalProperties" : {
                  "$ref" : "#/components/schemas/VersionDefinition"
                }
              }
            }
          }
        }
      },
      "APIDefinitionList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/APIDefinition"
        }
      },
      "AccessRights" : {
        "type" : "object",
        "properties" : {
          "api_id" : {
            "type" : "string"
          },
          "api_name" : {
            "type" : "string"
          },
          "versions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "EndPointMeta" : {
        "type" : "object",
        "properties" : {
          "method_actions" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/EndpointMethodMeta"
            }
          },
          "path" : {
            "type" : "string"
          }
        }
      },
      "EndpointMethodMeta" : {
        "type" : "object",
        "properties" : {
          "action" : {
            "type" : "string"
          },
          "code" : {
            "type" : "number"
          },
          "data" : {
            "type" : "string"
          },
          "headers" : {
            "type" : "object"
          }
        }
      },
      "HeaderInjectionMeta" : {
        "type" : "object",
        "properties" : {
          "add_headers" : {
            "type" : "object"
          },
          "delete_headers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "method" : {
            "type" : "string"
          },
          "path" : {
            "type" : "string"
          }
        }
      },
      "MiddlewareDefinition" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "path" : {
            "type" : "string"
          },
          "require_session" : {
            "type" : "boolean"
          }
        }
      },
      "OAuthClient" : {
        "type" : "object",
        "properties" : {
          "client_id" : {
            "type" : "string"
          },
          "redirect_uri" : {
            "type" : "string"
          },
          "secret" : {
            "type" : "string"
          }
        }
      },
      "OAuthClients" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/OAuthClient"
        }
      },
      "ServiceDiscoverConfiguration" : {
        "type" : "object",
        "properties" : {
          "cache_timeout" : {
            "type" : "number"
          },
          "data_path" : {
            "type" : "string"
          },
          "endpoint_returns_list" : {
            "type" : "boolean"
          },
          "parent_data_path" : {
            "type" : "string"
          },
          "port_data_path" : {
            "type" : "string"
          },
          "query_endpoint" : {
            "type" : "string"
          },
          "use_discovery_service" : {
            "type" : "string"
          },
          "use_nested_query" : {
            "type" : "boolean"
          },
          "use_target_list" : {
            "type" : "boolean"
          }
        }
      },
      "SessionObject" : {
        "type" : "object",
        "properties" : {
          "access_rights" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/AccessRights"
            }
          },
          "allowance" : {
            "type" : "number"
          },
          "apply_policy_id" : {
            "type" : "string"
          },
          "basic_auth_data" : {
            "type" : "object",
            "properties" : {
              "hash_type" : {
                "type" : "string",
                "enum" : [ "", "bcrypt" ]
              },
              "password" : {
                "type" : "string"
              }
            }
          },
          "expires" : {
            "type" : "number"
          },
          "hmac_enabled" : {
            "type" : "boolean"
          },
          "hmac_string" : {
            "type" : "string"
          },
          "is_inactive" : {
            "type" : "boolean"
          },
          "jwt_data" : {
            "type" : "object",
            "properties" : {
              "secret" : {
                "type" : "string"
              }
            }
          },
          "meta_data" : {
            "type" : "object"
          },
          "monitor" : {
            "type" : "object",
            "properties" : {
              "trigger_limits" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "oauth_client_id" : {
            "type" : "string"
          },
          "org_id" : {
            "type" : "string"
          },
          "per" : {
            "type" : "number"
          },
          "quota_max" : {
            "type" : "number"
          },
          "quota_remaining" : {
            "type" : "number"
          },
          "quota_renewal_rate" : {
            "type" : "string"
          },
          "quota_renews" : {
            "type" : "number"
          },
          "rate" : {
            "type" : "number"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "TemplateMeta" : {
        "type" : "object",
        "properties" : {
          "method" : {
            "type" : "string"
          },
          "path" : {
            "type" : "string"
          },
          "template_data" : {
            "type" : "object",
            "properties" : {
              "enable_session" : {
                "type" : "boolean"
              },
              "input_type" : {
                "type" : "string"
              },
              "template_mode" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "VersionDefinition" : {
        "type" : "object",
        "properties" : {
          "expires" : {
            "type" : "string"
          },
          "extended_paths" : {
            "type" : "object",
            "properties" : {
              "black_list" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EndPointMeta"
                }
              },
              "cache" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "circuit_breakers" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "type" : "string"
                    },
                    "path" : {
                      "type" : "string"
                    },
                    "return_to_service_after" : {
                      "type" : "number"
                    },
                    "samples" : {
                      "type" : "number"
                    },
                    "threshold_percent" : {
                      "type" : "number"
                    }
                  }
                }
              },
              "hard_timeouts" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "type" : "string"
                    },
                    "path" : {
                      "type" : "string"
                    },
                    "timeout" : {
                      "type" : "number"
                    }
                  }
                }
              },
              "ignored" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EndPointMeta"
                }
              },
              "size_limits" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "type" : "string"
                    },
                    "path" : {
                      "type" : "string"
                    },
                    "size_limit" : {
                      "type" : "number"
                    }
                  }
                }
              },
              "transform" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TemplateMeta"
                }
              },
              "transform_headers" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/HeaderInjectionMeta"
                }
              },
              "transform_response" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TemplateMeta"
                }
              },
              "transform_response_headers" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/HeaderInjectionMeta"
                }
              },
              "url_rewrites" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "match_pattern" : {
                      "type" : "string"
                    },
                    "method" : {
                      "type" : "string"
                    },
                    "path" : {
                      "type" : "string"
                    },
                    "rewrite_to" : {
                      "type" : "string"
                    }
                  }
                }
              },
              "virtual" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "function_source_type" : {
                      "type" : "string"
                    },
                    "function_source_uri" : {
                      "type" : "string"
                    },
                    "method" : {
                      "type" : "string"
                    },
                    "path" : {
                      "type" : "string"
                    },
                    "response_function_name" : {
                      "type" : "string"
                    },
                    "use_session" : {
                      "type" : "boolean"
                    }
                  }
                }
              },
              "white_list" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EndPointMeta"
                }
              }
            }
          },
          "global_headers" : {
            "type" : "object"
          },
          "global_headers_remove" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "global_size_limit" : {
            "type" : "number"
          },
          "name" : {
            "type" : "string"
          },
          "override_target" : {
            "type" : "string"
          },
          "use_extended_paths" : {
            "type" : "boolean"
          }
        }
      }
    }
  }
}