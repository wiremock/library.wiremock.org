{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "ClearBlade API",
    "description" : "A friendly little API to help you interact with the ClearBlade platform.",
    "termsOfService" : "https://docs.clearblade.com/v/4/static/tac.html",
    "contact" : {
      "email" : "support@clearblade.com"
    },
    "version" : "3.0"
  },
  "servers" : [ {
    "url" : "https://platform.clearblade.com/"
  } ],
  "tags" : [ {
    "name" : "Adapter",
    "description" : "Adapter configuration and management."
  }, {
    "name" : "Admin",
    "description" : "Admin developer operations."
  }, {
    "name" : "2FA",
    "description" : "Interactions for Two Factor Authentication."
  }, {
    "name" : "Audit",
    "description" : "Interactions with the developer audit trail."
  }, {
    "name" : "Code",
    "description" : "Interactions with code services."
  }, {
    "name" : "Webhooks",
    "description" : "Interactions with webhooks."
  }, {
    "name" : "Data",
    "description" : "Interactions with data collections."
  }, {
    "name" : "Databases",
    "description" : "Interactions with external database connections."
  }, {
    "name" : "Deployments",
    "description" : "Deployment CRUD Operations"
  }, {
    "name" : "Device",
    "description" : "Device authentication and management."
  }, {
    "name" : "Developer",
    "description" : "Developer operations."
  }, {
    "name" : "Edge",
    "description" : "Interactions with edges."
  }, {
    "name" : "Handlers",
    "description" : "Interactions triggers and timers."
  }, {
    "name" : "Messaging",
    "description" : "MQTT messaging and push notifications."
  }, {
    "name" : "Shared Cache",
    "description" : "Interactions with Shared Caches"
  }, {
    "name" : "User",
    "description" : "User authentication and management."
  }, {
    "name" : "Session",
    "description" : "Interactions with user and device sessions."
  }, {
    "name" : "Portal",
    "description" : "Interactions with portals."
  }, {
    "name" : "Files",
    "description" : "Interactions with file management."
  } ],
  "paths" : {
    "/admin/allapps" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get platform assets",
        "description" : "Retrieves system information for all systems in the developer account.",
        "operationId" : "DevGetAssets",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns an array of system information."
          },
          "400" : {
            "description" : "Bad Request."
          }
        }
      }
    },
    "/admin/allcollections" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get collections",
        "description" : "Returns all the collections in the specified system.",
        "operationId" : "DevGetCollections",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "appid",
          "in" : "query",
          "description" : "System Key that identifies the system the collections belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of collections in the specified system."
          },
          "400" : {
            "description" : "Bad Request."
          }
        }
      }
    },
    "/admin/allsystems" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get systems",
        "description" : "Returns all the systems tied to the specified developer's account.",
        "operationId" : "GetSystems",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of systems."
          }
        }
      }
    },
    "/admin/audit" : {
      "get" : {
        "tags" : [ "Audit" ],
        "summary" : "AUDIT  - Get Audit Info",
        "description" : "## Description:\nReturns list of assets and the information about the changes that have been made. This endpoint is for Admin only.\n### Query Structure:\n```json\n{\"PAGESIZE\":int,\"PAGENUM\":int,\"FILTERS\":[[{\"_REPLACE_WITH_OPERATOR_\":[{\"valueType\":\"value\"}]}]], \"SORT\":[{\"DESC\":\"value\"}]}\n```\n  Note - You can generate a complex query object in a code service using the `ClearBlade.Query()` object. \n## Audit Table Schema:\nRefer to this when building the query.\n\n  | Column | Type | Possible Values|Example|\n  |:---------|:---------|:------|:---------|\n  | id   | bigint   |ANY_POSITIVE_INTEGER|10440595|\n  |system_key|string|SINGLE_STRING_WITH_HEX_CHARS_ONLY|\"ccafb4cadaccaf9ebba01\"|\n  |time|timestamp|ISO_DATE_TIME_STRING|\"2020-01-29T20:18:18.475214Z\"|\n  |response_time|bigint|ANY_POSITIVE_INTEGER|4038669|\n  |asset_class|string|adapters, adapterFiles, devices, users, multi_dev, services, libraries, servicecaches, timers, triggers, webhooks, portals, plugins, rolesperms, collections, edges, messaging, deployments, edgegroups, system, usersessions, devicesessions|\"collections\"|\n  |action_type|string|Create, Update, Delete, Create Columns, Delete Columns, Developer Password Reset, User Password Reset, MQTT Disconnect, MQTT Connect|\"MQTT Connect\"|\n  |email|string|SINGLE_VALID_EMAIL_STRING|\"example@clearblade.com\"|\n  |asset_id|string|ANY_STRING|\"ClearBlade-iPhone\"|\n  |changes|string|STRINGIFIED_JSON|\"{\\\\\"newVersion\\\\\":2}\"|\n  |user_type|string|UNKNOWN, DEV, USER, DEVICE, Invalid UserType|\"DEVICE\"|\n  \n### Example:\n\n```json\n{\"FILTERS\":[[{\"NEQ\":[{\"asset_class\":\"services\"}]},{\"EQ\":[{\"action_type\":\"create\"}]}]],\"PAGESIZE\":0,\"PAGENUM\":0}\n```\n",
        "operationId" : "GetAudit",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query object used to filter the items. See query model at in the description for example.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns audit information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/auditInfo"
                }
              }
            }
          }
        }
      }
    },
    "/admin/audit/count" : {
      "get" : {
        "tags" : [ "Audit" ],
        "summary" : "Audit - Get counts",
        "description" : "Gets total number of changes made to assets across all systems on the instance. This endpoint is Admin only.",
        "operationId" : "GetCounts",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns number of actions"
          }
        }
      }
    },
    "/admin/audit/{systemKey}" : {
      "get" : {
        "tags" : [ "Audit" ],
        "summary" : "AUDIT  - Get Audit Info",
        "description" : "## Description:\nReturns list of assets and the information about the changes that have been made. This endpoint is for Admin and Dev.\n\n### Query Structure:\n```json\n{\"PAGESIZE\":int,\"PAGENUM\":int,\"FILTERS\":[[{\"_REPLACE_WITH_OPERATOR_\":[{\"valueType\":\"value\"}]}]], \"SORT\":[{\"DESC\":\"value\"}]}\n```\n  Note - You can generate a complex query object in a code service using the `ClearBlade.Query()` object. \n## Audit Table Schema:\nRefer to this when building the query.\n\n  | Column | Type | Possible Values|Example|\n  |:---------|:---------|:------|:---------|\n  | id   | bigint   |ANY_POSITIVE_INTEGER|10440595|\n  |system_key|string|SINGLE_STRING_WITH_HEX_CHARS_ONLY|\"ccafb4cadaccaf9ebba01\"|\n  |time|timestamp|ISO_DATE_TIME_STRING|\"2020-01-29T20:18:18.475214Z\"|\n  |response_time|bigint|ANY_POSITIVE_INTEGER|4038669|\n  |asset_class|string|adapters, adapterFiles, devices, users, multi_dev, services, libraries, servicecaches, timers, triggers, webhooks, portals, plugins, rolesperms, collections, edges, messaging, deployments, edgegroups, system, usersessions, devicesessions|\"collections\"|\n  |action_type|string|Create, Update, Delete, Create Columns, Delete Columns, Developer Password Reset, User Password Reset, MQTT Disconnect, MQTT Connect|\"MQTT Connect\"|\n  |email|string|SINGLE_VALID_EMAIL_STRING|\"example@clearblade.com\"|\n  |asset_id|string|ANY_STRING|\"ClearBlade-iPhone\"|\n  |changes|string|STRINGIFIED_JSON|\"{\\\\\"newVersion\\\\\":2}\"|\n  |user_type|string|UNKNOWN, DEV, USER, DEVICE, Invalid UserType|\"DEVICE\"|\n  \n### Example:\n\n```json\n{\"FILTERS\":[[{\"NEQ\":[{\"asset_class\":\"services\"}]},{\"EQ\":[{\"action_type\":\"create\"}]}]],\"PAGESIZE\":0,\"PAGENUM\":0}\n```\n",
        "operationId" : "GetAuditDev",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the deployment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query object used to filter the items. See query model at in the description for example.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns audit information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/auditInfo"
                }
              }
            }
          }
        }
      }
    },
    "/admin/audit/{systemKey}/count" : {
      "get" : {
        "tags" : [ "Audit" ],
        "summary" : "AUDIT - Get counts",
        "description" : "Gets total number of changes made to assets across all systems on the instance. This endpoint is for Admin and Dev.",
        "operationId" : "GetCountsDev",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the deployment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns number of actions"
          }
        }
      }
    },
    "/admin/auth" : {
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Authenticate dev",
        "description" : "## Description\nLogs developer into system and returns an Developer Token\n## Endpoint Body Values\nHere are the body values for the two scenarios\n### Basic Auth\nRequired Keys\n  - username\n  - password\n\nExample \n```json\n{\n  \"username\":\"cbman@clearblade.com\",\n  \"password\":\"cl34rbl4d3\"\n}\n```  \n\n### Refreshing Token\nRequired Keys \n  - grant_type (only one valid value - \"refresh_token\")\n  - refresh_token\n  - access_token\n\nExample \n```json\n{\n  \"grant_type\":\"refresh_token\",\n  \"refresh_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJmMjkwZTJlYjBiZDRmNjhiZDRkM2RlZjNkMWM0MDEiLCJzaWQiOiIzOWFkM2U5OC1hMmU0LTQxYzQtOGMzNi03ZjQxNDFhYzYxN2IiLCJ1dCI6MiwidHQiOjMsImV4cCI6MTU5MDI3ODExMSwiaWF0IjoxNTg5NDE0MTExfQ.iY6uJu2QgNP0uHoGdmEZm9wsztB1SUrCHrisxoXoxolol\",\n  \"access_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJmMjkwZTJlYjBiZDRmNjhiZDRkM2RlZjNkMWM0MDEiLCJzaWQiOiI3NmY4ODg4MS04YmU5LTRiM2UtOWJkNi1jOTJjZGQ4OTNlMmEiLCJ1dCI6MiwidHQiOjEsImV4cCI6MTU4OTg0NjExMSwiaWF0IjoxNTg5NDE0MTExfQ.xboryHuVn2zz-gSZ_JcD7-j_eBmJU1SMHkiDl9j8bak\"\n}\n```\n",
        "operationId" : "AuthDev",
        "requestBody" : {
          "description" : "Developer credentials.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/authdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Developer authenticated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/devregresp"
                }
              }
            }
          }
        }
      }
    },
    "/admin/checkauth" : {
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Verifies access to the system",
        "description" : "Verifies developer access to the system",
        "operationId" : "VerifyAuth",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Receives access to the system."
          },
          "400" : {
            "description" : "Bad Request."
          }
        }
      }
    },
    "/admin/collectionmanagement" : {
      "put" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Update collection",
        "description" : "Creates or deletes a column within an existing collection, or updates an existing database connection in the specified system.",
        "operationId" : "DevUpdateCollection",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated collection information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/updateCollection"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Collection was successfully updated."
          }
        }
      },
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Create collection",
        "description" : "Creates a new collection or database connection in the specified system.",
        "operationId" : "DevCreateCollection",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Configuration info for new collection.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/newcollection"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Collection was successfully created."
          }
        }
      },
      "delete" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Delete collection",
        "description" : "Deletes an existing collection in the specified system.",
        "operationId" : "DevDeleteCollection",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "ID that identifies the collection to be deleted.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Collection was successfully deleted."
          }
        }
      }
    },
    "/admin/count/developers" : {
      "get" : {
        "tags" : [ "Admin" ],
        "summary" : "ADMIN - Get number of admin developers",
        "description" : "Retrieves the number of developers who are considered administrators in their system.",
        "operationId" : "GetAdminDevCount",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns number of admin developers"
          },
          "400" : {
            "description" : "Bad request."
          }
        }
      }
    },
    "/admin/count/systems" : {
      "get" : {
        "tags" : [ "Admin" ],
        "summary" : "ADMIN - Get number of systems available",
        "description" : "Retrieves the number of systems that are available.",
        "operationId" : "GetSystemCount",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          },
          "400" : {
            "description" : "Bad request."
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/admin/database/status" : {
      "get" : {
        "tags" : [ "Databases" ],
        "summary" : "DATABASES - Retrieves all internal and external database statuses",
        "description" : "Returns all the names and internal and external database statuses",
        "operationId" : "GetDatabaseStatus",
        "responses" : {
          "200" : {
            "description" : "## Description:\n Returns all the names and internal and external database statuses in a system\n ### Success Structure:\n ```json\n {\n   [IP_ADDRESS]\": {\n     \"internal_db_stats\": {\n       \"name\": \"Postgres\",\n       \"stats\": {\n         \"db_type\": \"PostgreSQL\",\n         \"info\": {\n           \"Idle\": 2,\n           \"InUse\": 0,\n           \"MaxIdleClosed\": 55380,\n           \"MaxIdleTimeClosed\": 0,\n           \"MaxLifetimeClosed\": 0,\n           \"MaxOpenConnections\": 30,\n           \"OpenConnections\": 2,\n           \"WaitCount\": 0,\n           \"WaitDuration\": 0\n       },\n       \"is_connected\": true\n       }\n      },\n      \"external_db_stats\": {}\n ```\n |\n"
          }
        }
      }
    },
    "/admin/developers/{systemKey}" : {
      "put" : {
        "tags" : [ "Admin", "Developer" ],
        "summary" : "ADMIN - Add/Remove/Change owner",
        "description" : "For admin, you can add/remove/change the owner of a system even if you’re not the system's owner. For Developer,you can add/remove a developer as long as you’re the owner of the system.",
        "operationId" : "AdminOwnerChange",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the deployment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated system owner email.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/updateOwner"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Owner successfully added/removed."
          },
          "400" : {
            "description" : "Bad Request."
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      }
    },
    "/admin/devices/keys/{systemKey}/{deviceName}" : {
      "post" : {
        "tags" : [ "Device" ],
        "summary" : "DEVICE -Creates rotating keys for a device.",
        "description" : "Creates rotating keys for a device.",
        "operationId" : "CreateRotatingKeys",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through developer authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the device you're updating belongs to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deviceName",
          "in" : "path",
          "description" : "Name of the device you are adding keys to .",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Number of rotating keys.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/count"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deviceKey"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Delete rotating keys for a device",
        "description" : "Deletes the rotating keys from its device.",
        "operationId" : "DeleteDeviceKeys",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through developer authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the device currently belongs to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deviceName",
          "in" : "path",
          "description" : "Name of the device whose keys are being deleted.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes rotating keys"
          }
        }
      }
    },
    "/admin/devices/{systemKey}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get devices with or without a query",
        "description" : "Retrieves information about all devices in the specified system",
        "operationId" : "GetSystemDevices",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the devices in question belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Tags to filter devices by. See the query model below for an example. All devices are returned if a query is not specified.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of devices."
          },
          "400" : {
            "description" : "Bad request."
          }
        }
      },
      "put" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Update devices using a query",
        "description" : "Updates all devices matching the filters specified by a query.",
        "operationId" : "UpdateDevicesAdmin",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the device is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Query to limit scope of update, and new data values.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/PutQuery"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A JSON object representing the SQL result set containing the list of affected devices.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QueryResultSet"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request."
          }
        }
      },
      "delete" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Delete devices using a query",
        "description" : "Deletes all devices matching the filters specified by a query.",
        "operationId" : "DeleteDevicesAdmin",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the device is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Tags to filter devices by. See the query model below for an example.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted devices."
          },
          "400" : {
            "description" : "Bad request."
          }
        }
      }
    },
    "/admin/devices/{systemKey}/{name}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get device",
        "description" : "Retrieves information about the specified device.",
        "operationId" : "GetSystemDevice",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the device in question belongs to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the device you're getting info about.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      },
      "put" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Update device",
        "description" : "Updates the specified device's information.",
        "operationId" : "UpdateSystemDevice",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the device you're updating belongs to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the device you're updating.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated device information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/deviceAdminUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      },
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Create device",
        "description" : "Creates a new device in the specified system.",
        "operationId" : "CreateSystemDevice",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the new device will belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the device you're creating.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "New device information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/deviceAdminNew"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      },
      "delete" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Delete device",
        "description" : "Deletes the specified device from its system.",
        "operationId" : "DeleteSystemDevice",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the device currently belongs to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the device you're deleting.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      }
    },
    "/admin/edges/template/{systemKey}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get edge template",
        "description" : "Get list of which triggers, services, and libraries should be copied onto which edge when it starts up.",
        "operationId" : "GetEdgeTemplate",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the edge template belongs to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      }
    },
    "/admin/edges/template/{systemKey}/{edgeName}" : {
      "put" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Update edge template",
        "description" : "Update template for the specified edge.",
        "operationId" : "UpdateEdgeTemplate",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the edge template belongs to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "edgeName",
          "in" : "path",
          "description" : "Name of the edge you're modifying the template for.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "list of resources to add or remove to the template for an edge.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/edgeTemplateUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      }
    },
    "/admin/edges/{systemKey}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get edges",
        "description" : "Retrieves all the edges that belong to the specified system.",
        "operationId" : "GetEdges",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the edges in question belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      }
    },
    "/admin/edges/{systemKey}/control" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get edges for the adapter",
        "description" : "Retrieves all the edges that the adapter belongs to.",
        "operationId" : "GetAdapterEdges",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the edges in question belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      }
    },
    "/admin/edges/{systemKey}/{edgeName}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get edge",
        "description" : "Retrieves information about the specified edge.",
        "operationId" : "GetEdge",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the edge in question belongs to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "edgeName",
          "in" : "path",
          "description" : "Name of the edge you're getting info about.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      },
      "put" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Update edge",
        "description" : "Updates the specified edge's information.",
        "operationId" : "UpdateEdge",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the edge you're updating belongs to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "edgeName",
          "in" : "path",
          "description" : "Name of the edge you're updating.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated edge information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/edgeUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      },
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Create edge",
        "description" : "Creates a new edge in the specified system.",
        "operationId" : "CreateEdge",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the new edge will belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "edgeName",
          "in" : "path",
          "description" : "Name of the edge you're creating.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "New edge information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/edgeNew"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      },
      "delete" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Delete edge",
        "description" : "Deletes the specified edge from its system.",
        "operationId" : "DeleteEdge",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the edge currently belongs to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "edgeName",
          "in" : "path",
          "description" : "Name of the edge you're deleting.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      }
    },
    "/admin/logout" : {
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Log out dev",
        "description" : "Logs the current developer out of their session and invalidates their DevToken",
        "operationId" : "DevLogout",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Developer was successfully logged out."
          }
        }
      }
    },
    "/admin/pkey" : {
      "get" : {
        "tags" : [ "Admin" ],
        "summary" : "ADMIN - Get platform license key.",
        "description" : "Returns current platform license key.",
        "operationId" : "GetLicenseKey",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns platform license key"
          },
          "400" : {
            "description" : "Bad Request"
          }
        }
      }
    },
    "/admin/platform/developer" : {
      "get" : {
        "tags" : [ "Admin" ],
        "summary" : "ADMIN - Get developer",
        "description" : "Returns information about the specified developer.",
        "operationId" : "GetDev",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "developer",
          "in" : "query",
          "description" : "Email of the developer in question.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      },
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Disable developer",
        "description" : "Disables the specified developer on the platform.",
        "operationId" : "DisableDev",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Information to identify the developer you're disabling.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/disableData"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      }
    },
    "/admin/platform/developers" : {
      "get" : {
        "tags" : [ "Admin" ],
        "summary" : "ADMIN - Get developers",
        "description" : "Returns all developers in the platform.",
        "operationId" : "GetDevs",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pagesize",
          "in" : "query",
          "description" : "Response page size.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pagenum",
          "in" : "query",
          "description" : "Response page number.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "total",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter response.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      }
    },
    "/admin/platform/systems" : {
      "get" : {
        "tags" : [ "Audit" ],
        "summary" : "AUDIT - Get list of systems that have been updated",
        "description" : "## Description:\nGet list of systems that have been updated. This is an Admin only endpoint.\n\n### Query:\n```json\n{\"PAGESIZE\":int,\"PAGENUM\":int,\"FILTERS\":[[{\"_REPLACE_WITH_OPERATOR_\":[{\"valueType\":\"value\"}]}]],\"SORT\":[{\"DESC\":\"value\"}]}\n```\n  Note - You can generate a complex query object in a code service using the `ClearBlade.Query()` object. \n## Admin Audit Table Schema:\nRefer to this when building the query.\n\n  | Column | Type | Possible Values| Examples|\n  |:--------|:--------|:------|:------|\n  | name   | string   |ANY_STRING|\"ClearBladeDev\"|\n  |owner|string|EMAIL_STRING |\"example@clearblade.com\"|\n  |systemKey|string|SINGLE_STRING_WITH_HEX_CHARS_ONLY|\"80sdff82c0b1fbda1f271\"|\n  |disabled|boolean|true, false|true|\n  |lastUpdated|timestamp|ISO_DATE_TIME_STRING|\"2020-01-29T20:18:18.475214Z\"|\n  |numDevs|int|ANY_POSITIVE_INTEGER|2|\n  |numServices|int|ANY_POSITIVE_INTEGER|2|\n  |numLibraries|int|ANY_POSITIVE_INTEGER|2|\n  |numDeployments|int|ANY_POSITIVE_INTEGER|2|\n  |numRoles|int|ANY_POSITIVE_INTEGER|2|\n  |numUsers|int|ANY_POSITIVE_INTEGER|2|\n  |numDevices|int|ANY_POSITIVE_INTEGER|2|\n  |numEdge|int|ANY_POSITIVE_INTEGER|2|\n  |numAPIReqsTotal|int|ANY_POSITIVE_INTEGER|2|\n  |numAPIReqsMonth|int|ANY_POSITIVE_INTEGER|2|\n  |numAPIReqsYear|int|ANY_POSITIVE_INTEGER|2|\n  |numPub|int|ANY_POSITIVE_INTEGER|2|\n  |numPubMonth|int|ANY_POSITIVE_INTEGER|2|\n  |numPubYear|int|ANY_POSITIVE_INTEGER|2|\n  |numRecTotal|int|ANY_POSITIVE_INTEGER|2|\n  |numRecMonth|int|ANY_POSITIVE_INTEGER|2|\n  |numRecYear|int|ANY_POSITIVE_INTEGER|2|\n  |diskUsage|int|ANY_POSITIVE_INTEGER|2|\n\n### Example:\n\n```json\n \"query\":{\"FILTERS\":[[{\"NEQ\":[{\"disabled\":true}]},{\"EQ\":[{\"numDevs\":2}]}]],\"PAGESIZE\":0,\"PAGENUM\":0}\n```\n",
        "operationId" : "GetSystemUpdates",
        "parameters" : [ {
          "name" : "Clearblade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query object used to filter the items. See query model at in the description for example.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/systemInfo"
                }
              }
            }
          }
        }
      }
    },
    "/admin/platform/systems/{systemKey}" : {
      "get" : {
        "tags" : [ "Audit" ],
        "summary" : "AUDIT - Get list of systems that have been updated",
        "description" : "## Description:\n Get list of changes that have been made to the system. This is an Admin and Dev endpoint.\n### Query:\n```json\n\"query\":{\"PAGESIZE\":int,\"PAGENUM\":int,\"FILTERS\":[[{\"_REPLACE_WITH_OPERATOR_\":[{\"valueType\":\"value\"}]}]],\"SORT\":[{\"DESC\":\"value\"}]}\n```\n  Note - You can generate a complex query object in a code service using the `ClearBlade.Query()` object. \n## Admin Audit Table Schema:\n## Admin Audit Table Schema:\nRefer to this when building the query.\n\n  | Column | Type | Possible Values| Examples|\n  |:--------|:--------|:------|:------|\n  | name   | string   |ANY_STRING|\"ClearBladeDev\"|\n  |owner|string|EMAIL_STRING |\"example@clearblade.com\"|\n  |systemKey|string|SINGLE_STRING_WITH_HEX_CHARS_ONLY|\"80sdff82c0b1fbda1f271\"|\n  |disabled|boolean|true, false|true|\n  |lastUpdated|timestamp|ISO_DATE_TIME_STRING|\"2020-01-29T20:18:18.475214Z\"|\n  |numDevs|int|ANY_POSITIVE_INTEGER|2|\n  |numServices|int|ANY_POSITIVE_INTEGER|2|\n  |numLibraries|int|ANY_POSITIVE_INTEGER|2|\n  |numDeployments|int|ANY_POSITIVE_INTEGER|2|\n  |numRoles|int|ANY_POSITIVE_INTEGER|2|\n  |numUsers|int|ANY_POSITIVE_INTEGER|2|\n  |numDevices|int|ANY_POSITIVE_INTEGER|2|\n  |numEdge|int|ANY_POSITIVE_INTEGER|2|\n  |numAPIReqsTotal|int|ANY_POSITIVE_INTEGER|2|\n  |numAPIReqsMonth|int|ANY_POSITIVE_INTEGER|2|\n  |numAPIReqsYear|int|ANY_POSITIVE_INTEGER|2|\n  |numPub|int|ANY_POSITIVE_INTEGER|2|\n  |numPubMonth|int|ANY_POSITIVE_INTEGER|2|\n  |numPubYear|int|ANY_POSITIVE_INTEGER|2|\n  |numRecTotal|int|ANY_POSITIVE_INTEGER|2|\n  |numRecMonth|int|ANY_POSITIVE_INTEGER|2|\n  |numRecYear|int|ANY_POSITIVE_INTEGER|2|\n  |diskUsage|int|ANY_POSITIVE_INTEGER|2|\n\n### Example:\n\n```json\n \"query\":{\"FILTERS\":[[{\"NEQ\":[{\"disabled\":true}]},{\"EQ\":[{\"numDevs\":2}]}]],\"PAGESIZE\":0,\"PAGENUM\":0}\n```\n",
        "operationId" : "GetSystemUpdatesDev",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the deployment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "clearblade-devtoken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query object used to filter the items. See query model at in the description for example.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/systemInfo"
                }
              }
            }
          }
        }
      }
    },
    "/admin/platform/{systemKey}" : {
      "get" : {
        "tags" : [ "Admin" ],
        "summary" : "ADMIN - Get system status",
        "description" : "Retrieves the specified system's status as it relates to limits. To be used by the billing system.",
        "operationId" : "GetSystemStatus",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system you're requesting information about.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      }
    },
    "/admin/portals/{systemKey}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Gets the information for a portal",
        "description" : "Returns information about a specified portal.",
        "operationId" : "GetPortalInfo",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through developer authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the specified system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/portalArray"
                }
              }
            }
          }
        }
      }
    },
    "/admin/putpass" : {
      "put" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Change dev password",
        "description" : "Changes a developer's password.",
        "operationId" : "ChangeDevPassword",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Password change information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/devpass"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Developer's password was successfully changed."
          }
        }
      }
    },
    "/admin/reg" : {
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Register new dev",
        "description" : "Registers a new developer account with the CB platform.",
        "operationId" : "RegDev",
        "requestBody" : {
          "description" : "First and last name, organization, email, and password for developer",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/devregdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Developer was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/devregresp"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      }
    },
    "/admin/regensystemsecret" : {
      "put" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Regen secret",
        "description" : "Generates a new System Secret for the specified system.",
        "operationId" : "RegenSecret",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "System Key that identifies the system you're regenerating the secret for.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/regensystem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "New System Secret was successfully generated."
          }
        }
      }
    },
    "/admin/resetpassword" : {
      "post" : {
        "tags" : [ "Admin" ],
        "summary" : "ADMIN - Change dev password (Admin)",
        "description" : "Changes a developer's password.",
        "operationId" : "ResetPassword",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "New login information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/resetPassword"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Password is resetted"
          }
        }
      }
    },
    "/admin/settings/email-service" : {
      "get" : {
        "tags" : [ "2FA" ],
        "summary" : "2FA - Get Email Settings",
        "description" : "Gets current email communication settings. This endpoint is Admin only.",
        "operationId" : "EmailSettings",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns email communcation settings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/emailSettings"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "2FA" ],
        "summary" : "2FA - Update Email Settings",
        "description" : "\n## Description:\nUpdates email communication settings. This endpoint is Admin only.\n   \n## Setting options\n    \n|Settings|Types|\n|--------|-----|\n|encryption_type|STARTTLS, TLS, NONE|\n|port|25, 465, 587, 2525|\n\nSMTP is the only protocol supported\n",
        "operationId" : "UpdateEmailSettings",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The email settings to be updated",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/emailSettings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated email service settings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "2FA" ],
        "summary" : "2FA - Create Email Communication",
        "description" : "## Description:\n  Creates email communication . This endpoint is Admin only.\n  \n## Settings choices\n\n|Settings|Allowed Values|\n|--------|-----|\n|encryption_type|STARTTLS, TLS, NONE|\n|protocol|SMTP|\n",
        "operationId" : "CreateEmailCommunication",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The email settings to be updated",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/emailSettings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully added email service settings"
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "2FA" ],
        "summary" : "2FA - Delete email settings",
        "description" : "Deletes email communication settings. This endpoint is Admin only.",
        "operationId" : "DeleteEmailSettings",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Email settings was successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/admin/settings/email-service/test" : {
      "post" : {
        "tags" : [ "2FA" ],
        "summary" : "2FA - Test Email Service",
        "description" : "Test email service . This endpoint is Admin only.",
        "operationId" : "TestEmail",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The recipient email address to send the test message",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/emailTest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sends test email",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/admin/settings/security" : {
      "get" : {
        "tags" : [ "2FA" ],
        "summary" : "2FA - View Security Settings",
        "description" : "View instance wide security settings. This endpoint is Admin only.",
        "operationId" : "ViewSecurity",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns 2FA security settings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SecuritySettings"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "2FA" ],
        "summary" : "2FA - Update Security Settings",
        "description" : "Update instance wide security settings.TTL must be between 86400 and 2592000 seconds. This endpoint is Admin only.",
        "operationId" : "UpdateSecurity",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The SMS settings to be updated",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/SecuritySettings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated 2FA security settings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SecuritySettings"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/admin/settings/sms-service" : {
      "get" : {
        "tags" : [ "2FA" ],
        "summary" : "2FA - Get SMS Settings",
        "description" : "Gets current SMS communication settings. This endpoint is Admin only.",
        "operationId" : "SMSSettings",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns SMS communcation settings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SMSSettings"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "2FA" ],
        "summary" : "2FA - Update SMS Settings",
        "description" : "Updates SMS communication settings. Twilio is the only supported service. This endpoint is Admin only.",
        "operationId" : "UpdateSMSSettings",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The SMS settings to be updated",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/SMSSettings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated SMS service settings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "2FA" ],
        "summary" : "2FA - Create SMS Communication",
        "description" : "Creates SMS communication . Twilio is the only supported service. This endpoint is Admin only.",
        "operationId" : "CreateSMSCommunication",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The SMS settings to be updated",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/SMSSettings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully added SMS service settings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "2FA" ],
        "summary" : "2FA - Delete SMS settings",
        "description" : "Deletes SMS communication settings. This endpoint is Admin only.",
        "operationId" : "DeleteSMSSettings",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "SMS settings was successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/admin/settings/sms-service/test" : {
      "post" : {
        "tags" : [ "2FA" ],
        "summary" : "2FA - Test SMS Service",
        "description" : "Test SMS service . This endpoint is Admin only.",
        "operationId" : "TestSMS",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The recipient phone number to send the test message",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/SMSTest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully sends test message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/admin/systems/{devEmail}" : {
      "get" : {
        "tags" : [ "Admin" ],
        "summary" : "Get Systems for a developer",
        "description" : "Get the list of systems the developer has access to",
        "operationId" : "GetSystemsForDev",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "devEmail",
          "in" : "path",
          "description" : "Email of the Developer. Should be in the format `name@orgname.com`",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of systems the developer has access to.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/systemInfo"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/admin/triggers/definitions" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get trigger definitions",
        "description" : "Returns list of trigger definitions. These are the possible actions that can set off a trigger.",
        "operationId" : "GetTriggers",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of trigger definitions."
          }
        }
      }
    },
    "/admin/triggers/handlers/{systemKey}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get trigger handlers",
        "description" : "Returns list of trigger handlers.",
        "operationId" : "GetTriggerHandlers",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handlers are in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of trigger handlers"
          }
        }
      }
    },
    "/admin/triggers/handlers/{systemKey}/{name}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get trigger handler",
        "description" : "Returns the specified trigger handler information.",
        "operationId" : "GetTriggerHandler",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the trigger handler you want.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      },
      "put" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Update trigger handler",
        "description" : "Updates the specified trigger handler.",
        "operationId" : "UpdateTriggerHandler",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the trigger handler you're updating.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated trigger handler information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/triggerdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      },
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Create trigger handler",
        "description" : "Creates a new trigger handler.",
        "operationId" : "CreateTrigger",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the trigger handler you're creating.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "New trigger information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/triggerdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      },
      "delete" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Delete trigger handler",
        "description" : "Deletes the specified trigger handler.",
        "operationId" : "DeleteTriggerHandler",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the trigger handler you're deleting.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      }
    },
    "/admin/triggers/timers/{systemKey}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get timer handlers",
        "description" : "Returns a list of timer handlers.",
        "operationId" : "GetTimerHandlers",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      }
    },
    "/admin/triggers/timers/{systemKey}/{name}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get timer handler",
        "description" : "Returns the specified timer handler information.",
        "operationId" : "GetTimerHandler",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the timer handler you want.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      },
      "put" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Update timer handler",
        "description" : "Updates the specified timer handler.",
        "operationId" : "UpdateTimerHandler",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the timer handler you're updating.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated timer handler information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/timerdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      },
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Create time handler",
        "description" : "Creates new timer handler.",
        "operationId" : "create_timer_handler",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the timer handler you're creating.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "New timer information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/timerdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      },
      "delete" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Delete trigger handler",
        "description" : "Deletes the specified trigger handler.",
        "operationId" : "DeleteTimerHandler",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the timer you're deleting.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      }
    },
    "/admin/user/{systemKey}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get list of users and information",
        "description" : "Returns list of all of the users in the system",
        "operationId" : "GetUserList",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the user is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Tags to filter users. Check 'users' model at the bottom of this page.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns list of all users, user information, and count"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "put" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Change user information and permissions",
        "description" : "Changes any colomn in users table and update password or permissions of the specified user.",
        "operationId" : "UserChangeUserInfo",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the user is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Roles to change for the user.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/roles"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User's roles successfully changed."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Add user",
        "description" : "Add an user to the system.",
        "operationId" : "AddUser",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the user is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Developer's email.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/userlogin"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User is added to the system."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "delete" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Delete user",
        "description" : "Deletes user from the system",
        "operationId" : "DeleteUser",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "UserId of the user to delete",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User is deleted."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/admin/user/{systemKey}/columns" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get users column info.",
        "description" : "Returns data in the user list column",
        "operationId" : "GetUserColumnData",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the user is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns list of all users"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Add new column",
        "description" : "Adds a new column to the user collection",
        "operationId" : "AddColumn",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the user is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Column information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/addUserColumn"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Column is added to the collection."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/admin/user/{systemKey}/roles" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get list of roles",
        "description" : "## Description:\n  Get as a list of roles that are available to add to an user \n### Query:\n```json\n{\"PAGESIZE\":int,\"PAGENUM\":int,\"FILTERS\":[[{\"EQ\":[{\"name\":\"value\"}]}]]}\n```\n\n### Example:\n  0 and 0 for pagesize and pagenum returns all the information in one response.\n```json\n{\"PAGESIZE\":0,\"PAGENUM\":0,\"FILTERS\":[[{\"EQ\":[{\"name\":\"Authenticated\"}]}]]}\n```\n",
        "operationId" : "GetRoles",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the user is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Refer to the example query above.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns role(s), role information, and permissions for the user"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "put" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Changes roles settings",
        "description" : "Changes settings in individual roles",
        "operationId" : "SettingsChanges",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the user is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Information about changes",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/changeRoleSettings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Column is added to the collection."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Add new role",
        "description" : "Adds a new role to the system.",
        "operationId" : "AddRole",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the user is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Role information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/rolesinfo"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Role gets added."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "delete" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Delete roles",
        "description" : "Deletes roles from the system",
        "operationId" : "DeleteRoles",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Role identification key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/admin/user/{systemKey}/roles/count" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get number of roles",
        "description" : "Get number of roles in a system",
        "operationId" : "GetRolesCount",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the user is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "Identifies page size and page number for roles list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns list of all users"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/admin/userinfo" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get dev info",
        "description" : "Returns all user information about the current developer. This is a developer only endpoint.",
        "operationId" : "GetDevInfo",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Current developer information.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userinfo"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "2FA" ],
        "summary" : "2FA - Update developer 2FA information.",
        "description" : "## Description:\n  Update the developer 2FA information. This is a developer only endpoint.\n  Note - the email is taken from the developer's account.\n## two_factor_method\n  * email\n  * sms\n  * email_sms (enables both method)\n",
        "operationId" : "UpdateDev2FA",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updates to make for the two-factor auth settings for the developer.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/2FAinfo"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "2FA methods successfully changed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/admin/v/4/service_caches/{systemKey}" : {
      "get" : {
        "tags" : [ "Shared Cache" ],
        "summary" : "SHARED CACHE - Gets shared caches for a system",
        "operationId" : "GetSharedCache",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the deployment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves a list of shared caches.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CacheArrayResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized. User cannot access resource."
          }
        }
      }
    },
    "/admin/v/4/service_caches/{systemKey}/{cacheName}" : {
      "put" : {
        "tags" : [ "Shared Cache" ],
        "summary" : "SHARED CACHE - Update a shared cache",
        "description" : "Updates a shared cache properties, like ttl & description.",
        "operationId" : "UpdateSharedCache",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the shared cache.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cacheName",
          "in" : "path",
          "description" : "Name of the shared cache to update",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated cache information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/updateCache"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Shared Cache successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized. User cannot access resource."
          },
          "500" : {
            "description" : "Server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Shared Cache" ],
        "summary" : "SHARED CACHE - Add a shared cache",
        "description" : "Adds a shared cache to the system",
        "operationId" : "addSharedCache",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the shared cache.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cacheName",
          "in" : "path",
          "description" : "Name of the shared cache to add",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Information to create a shared cache.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/addCache"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Creates new shared cache.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized. User cannot access resource."
          },
          "500" : {
            "description" : "Server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Shared Cache" ],
        "summary" : "SHARED CACHE - Delete a shared cache",
        "description" : "Deletes a shared cache",
        "operationId" : "DeleteSharedCache",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the deployment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cacheName",
          "in" : "path",
          "description" : "Name of the shared cache to delete",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully Deleted Cache",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized. User cannot access resource."
          }
        }
      }
    },
    "/admin/v/4/session/{systemKey}/device" : {
      "get" : {
        "tags" : [ "Session" ],
        "summary" : "SESSION  - Get device session info",
        "description" : "## Description:\nReturns list of device sessions with Device Key and Timestamps . \n### Query Structure:\n```json\n{\"PAGESIZE\":int,\"PAGENUM\":int,\"FILTERS\":[[{\"_REPLACE_WITH_OPERATOR_\":[{\"valueType\":\"value\"}]}]], \"SORT\":[{\"DESC\":\"value\"}]}\n```\n  Note - You can generate a complex query object in a code service using the `ClearBlade.Query()` object.\n  \n### Filter Options\n\n* device_key - string\n* issued - int (Unix timestamp)\n  \n### Example:\n\n```json\n{\"FILTERS\":[[{\"NEQ\":[{\"device_key\":\"e2c794e60bee9ced68fc101 :: DEVICENAME0001}]},{\"EQ\":[{\"issued\":1587659839}]}]],\"PAGESIZE\":0,\"PAGENUM\":0}\n```\n",
        "operationId" : "GetDeviceSession",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query object used to filter the items. See query model at in the description for example.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns list of device sessions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deviceSession"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Session" ],
        "summary" : "SESSION  - Delete device session",
        "description" : "## Description:\nDelete device session. \n### Query Structure:\n```json\n{\"PAGESIZE\":int,\"PAGENUM\":int,\"FILTERS\":[[{\"_REPLACE_WITH_OPERATOR_\":[{\"valueType\":\"value\"}]}]], \"SORT\":[{\"DESC\":\"value\"}]}\n```\n  Note - You can generate a complex query object in a code service using the `ClearBlade.Query()` object.\n  \n  ### Filter Options\n\n* device_key - string\n* issued - int (Unix timestamp)\n\n  \n### Example:\n\n```json\n{\"FILTERS\":[[{\"NEQ\":[{\"device_key\":\"e2c794e60bee9ced68fc101 :: DEVICENAME0001\"}]},{\"EQ\":[{\"issued\":1587659839}]}]],\"PAGESIZE\":0,\"PAGENUM\":0}\n```\n",
        "operationId" : "DeleteDeviceSession",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query object used to filter the items. See query model at in the description for example.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes device session"
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          }
        }
      }
    },
    "/admin/v/4/session/{systemKey}/device/count" : {
      "get" : {
        "tags" : [ "Session" ],
        "summary" : "SESSION  - Get device session count",
        "description" : "## Description:\nReturns number of device sessions. \n### Query Structure:\n```json\n{\"PAGESIZE\":int,\"PAGENUM\":int,\"FILTERS\":[[{\"_REPLACE_WITH_OPERATOR_\":[{\"valueType\":\"value\"}]}]], \"SORT\":[{\"DESC\":\"value\"}]}\n```\n  Note - You can generate a complex query object in a code service using the `ClearBlade.Query()` object.\n  \n### Filter Options\n\n* device_key - string\n* issued - int\n  \n### Example:\n\n```json\n{\"FILTERS\":[[{\"NEQ\":[{\"device_key\":\"e2c794e60bee9ced68fc101 :: DEVICENAME0001\"}]},{\"EQ\":[{\"issued\":1587659839}]}]],\"PAGESIZE\":0,\"PAGENUM\":0}\n```\n",
        "operationId" : "GetDeviceSessionCount",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query object used to filter the items. See query model at in the description for example.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns number of device sessions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/count"
                }
              }
            }
          }
        }
      }
    },
    "/admin/v/4/session/{systemKey}/user" : {
      "get" : {
        "tags" : [ "Session" ],
        "summary" : "SESSION  - Get user session info",
        "description" : "## Description:\nReturns list of user sessions with User ID and Timestamps . \n### Query Structure:\n```json\n{\"PAGESIZE\":int,\"PAGENUM\":int,\"FILTERS\":[[{\"_REPLACE_WITH_OPERATOR_\":[{\"valueType\":\"value\"}]}]], \"SORT\":[{\"DESC\":\"value\"}]}\n```\n  Note - You can generate a complex query object in a code service using the `ClearBlade.Query()` object.\n  \n### Filter Options\n\n* user_id - string\n* issued - int (Unix timestamp)\n  \n### Example:\n\n```json\n{\"FILTERS\":[[{\"NEQ\":[{\"user_id\":\"9cd8ece70bea9e5a6de9cee05\"}]},{\"EQ\":[{\"issued\":1587659839}]}]],\"PAGESIZE\":0,\"PAGENUM\":0}\n```\n",
        "operationId" : "GetUserSession",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query object used to filter the items. See query model at in the description for example.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns list of user sessions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userSession"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized. User cannot access resource."
          }
        }
      },
      "delete" : {
        "tags" : [ "Session" ],
        "summary" : "SESSION  - Delete user session",
        "description" : "## Description:\nDelete user session. \n### Query Structure:\n```json\n{\"PAGESIZE\":int,\"PAGENUM\":int,\"FILTERS\":[[{\"_REPLACE_WITH_OPERATOR_\":[{\"valueType\":\"value\"}]}]], \"SORT\":[{\"DESC\":\"value\"}]}\n```\n  Note - You can generate a complex query object in a code service using the `ClearBlade.Query()` object.\n### Filter Options\n\n* user_id - string\n* issued - int (Unix timestamp)\n  \n### Example:\n\n```json\n{\"FILTERS\":[[{\"NEQ\":[{\"user_id\":\"9cd8ece70bea9e5a6de9cee05\"}]},{\"EQ\":[{\"issued\":1587659839}]}]],\"PAGESIZE\":0,\"PAGENUM\":0}\n```\n",
        "operationId" : "DeleteUserSession",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query object used to filter the items. See query model at in the description for example.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes user session"
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          }
        }
      }
    },
    "/admin/v/4/session/{systemKey}/user/count" : {
      "get" : {
        "tags" : [ "Session" ],
        "summary" : "SESSION  - Get user session count",
        "description" : "## Description:\nReturns number of user sessions. \n### Query Structure:\n```json\n{\"PAGESIZE\":int,\"PAGENUM\":int,\"FILTERS\":[[{\"_REPLACE_WITH_OPERATOR_\":[{\"valueType\":\"value\"}]}]], \"SORT\":[{\"DESC\":\"value\"}]}\n```\n  Note - You can generate a complex query object in a code service using the `ClearBlade.Query()` object.\n  \n### Filter Options\n\n* user_id - string\n* issued - int (Unix timestamp)\n  \n### Example:\n\n```json\n{\"FILTERS\":[[{\"NEQ\":[{\"user_id\":\"9cd8ece70bea9e5a6de9cee05\"}]},{\"EQ\":[{\"issued\":1587659839}]}]],\"PAGESIZE\":0,\"PAGENUM\":0}\n```\n",
        "operationId" : "GetUserSessionCount",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query object used to filter the items. See query model at in the description for example.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns number of user sessions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/count"
                }
              }
            }
          }
        }
      }
    },
    "/admin/v/4/systemmanagement" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get system info",
        "description" : "Returns metadata about specified system.",
        "operationId" : "GetSystemInfo",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "System Key that identifies the system you want the info about.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Specified system metadata.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/systemSettings"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request."
          }
        }
      },
      "put" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Update system info",
        "description" : "Updates a system's metadata.",
        "operationId" : "UpdateSystem",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated system information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/systemSettings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "System information successfully updated."
          }
        }
      },
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Create system",
        "description" : "Creates a new system tied to the developer's account.",
        "operationId" : "CreateSystem",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through developer authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "New system information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/newsystem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "System was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/systemSettings"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request."
          }
        }
      },
      "delete" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Delete system",
        "description" : "Deletes the specified system.",
        "operationId" : "DeleteSystem",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "System Key that identifies the system you want to delete.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "System was successfully deleted."
          }
        }
      }
    },
    "/admin/v/4/webhook/{systemKey}" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "summary" : "WEBHOOKS - Returns webhooks in the system",
        "description" : "Returns all webhooks in the system.",
        "operationId" : "GetWebhooks",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the messages belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of webhooks is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/webhookResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          }
        }
      }
    },
    "/admin/v/4/webhook/{systemKey}/{name}" : {
      "put" : {
        "tags" : [ "Webhooks" ],
        "summary" : "WEBHOOKS - Update a webhook",
        "description" : "Updates an existing webhook in the specified system.\n### List of Auth Methods\n  These will be used in `auth_method` in the body.\n  * `clearblade_auth`\n  * `http_basic_auth`\n  * `payload_auth`\n  * `no_auth`\n",
        "operationId" : "UpdateWebhook",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the messages belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name that identifies the webhook",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated collection information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/webhookUpdate"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Collection was successfully updated."
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Webhooks" ],
        "summary" : "WEBHOOKS - Creates a webhook",
        "description" : "Creates a webhook in the system\n### List of Auth Methods\n  These will be used in `auth_method` in the body.\n  * `clearblade_auth`\n  * `http_basic_auth`\n  * `payload_auth`\n  * `no_auth`\n",
        "operationId" : "CreateWebhook",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the messages belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name that identifies the webhook",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Properties to create webhooks.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/webhookCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Creates the webhook",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Webhooks" ],
        "summary" : "WEBHOOKS - Delete a webhook",
        "description" : "Deletes an existing webhook in the specified system.",
        "operationId" : "DeleteWebhook",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the messages belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name that identifies the webhook",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Webhook was successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          }
        }
      }
    },
    "/admin/validate" : {
      "post" : {
        "tags" : [ "2FA" ],
        "summary" : "2FA - Send validation link",
        "description" : "## Description:\n  Sends a validation link to either the developer's email or phone. This endpoint is for Dev only.\n## Validation Method Types:\n* email\n* phone\n",
        "operationId" : "SendValidation",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The method type to validate",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/validation"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Validation successfully sent.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/admin/{systemKey}/sync/alledges/status" : {
      "get" : {
        "tags" : [ "Edge" ],
        "summary" : "EDGE - Gets sync status for all edges",
        "description" : "Returns sync status for all edges in a system",
        "operationId" : "AllEdgeSyncStatus",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Token obtained through dev authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the edges.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns list of edges and the assets and their sync status related to them"
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/admin/{systemKey}/sync/deployment/status/{deploymentName}" : {
      "get" : {
        "tags" : [ "Deployments" ],
        "summary" : "DEPLOYMENTS - Gets sync status for a deployment",
        "operationId" : "GetSyncStatus",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the deployment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deploymentName",
          "in" : "path",
          "description" : "Name of the deployment to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves sync status of marked synced items successfully"
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/admin/{systemKey}/sync/edge/status/{edgeName}" : {
      "get" : {
        "tags" : [ "Edge" ],
        "summary" : "EDGE - Gets sync status for an edge",
        "description" : "Returns sync status for an edge",
        "operationId" : "EdgeSyncStatus",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Token obtained through dev authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the edges.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "edgeName",
          "in" : "path",
          "description" : "Name of the edge",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns list of assets and their sync status related to the edge"
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/admin/{systemKey}/sync/retry" : {
      "post" : {
        "tags" : [ "Deployments" ],
        "summary" : "DEPLOYMENTS - Retries sync for an asset",
        "description" : "Retries sync for an asset in an deployment",
        "operationId" : "RetrySync",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through dev authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the deployment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Information regarding sync",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/retrySync"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Retries sync successfully"
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/api/about" : {
      "get" : {
        "summary" : "DEVELOPER - Gets the information for the platform",
        "description" : "Returns information about the platform version.",
        "operationId" : "APIInfo",
        "responses" : {
          "200" : {
            "description" : "Returns platform version information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/platformInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/1/code/{systemKey}/{serviceName}" : {
      "get" : {
        "tags" : [ "Code" ],
        "summary" : "CODE - Retrieve information about service",
        "description" : "Returns setting information and data for a code service",
        "operationId" : "GetService",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the device is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "Code Service's name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns setting information and data for a code service"
          },
          "500" : {
            "description" : "Server error."
          }
        }
      },
      "post" : {
        "tags" : [ "Code" ],
        "summary" : "CODE - Call/Execute code service",
        "description" : "Executes a code service.",
        "operationId" : "ExecuteService",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the code service.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "Code Service's name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for code service.",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Code service successfully executed."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/api/v/1/collection/{systemKey}/{collectionName}" : {
      "get" : {
        "tags" : [ "Data" ],
        "summary" : "DATA(name) - Get items",
        "description" : "Returns the data from the specified collection.",
        "operationId" : "GetCollectionData",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collectionName",
          "in" : "path",
          "description" : "Name of the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query object used to filter the items. See query model below for example.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of the data rows from the specified collection that match the query.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/collectionSuccess"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Data" ],
        "summary" : "DATA(name) - Update items",
        "description" : "Updates preexisting data rows in the specified collection.",
        "operationId" : "UpdateCollectionData",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collectionName",
          "in" : "path",
          "description" : "Name of the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Query to limit scope of update, and new data values.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/DataPut"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Items successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/count"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Data" ],
        "summary" : "DATA(name) - Create items",
        "description" : "Creates new data rows in the specified collection.",
        "operationId" : "CreateCollectionData",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collectionName",
          "in" : "path",
          "description" : "Name of the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "New data row(s). Can accept multiple comma-separated key-value pairs to populate columns. Can also accept a blank object to create an unpopulated row.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/ColumnField"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Items successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ColumnField"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Data" ],
        "summary" : "DATA(name) - Delete items",
        "description" : "Deletes data rows in the specified collection.",
        "operationId" : "DeleteCollectionData",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collectionName",
          "in" : "path",
          "description" : "Name of the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query to limit scope of deletion.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Rows successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/count"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/1/data/{collectionID}" : {
      "get" : {
        "tags" : [ "Data" ],
        "summary" : "DATA(id) - Get items",
        "description" : "Returns the data from the specified collection.",
        "operationId" : "GetCollectionDataAlt",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collectionID",
          "in" : "path",
          "description" : "ID of the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query object used to filter the items. See query model below for example.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of the data rows from the specified collection that match the query.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/collectionSuccess"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Data" ],
        "summary" : "DATA(id) - Update items",
        "description" : "Updates preexisting data rows in the specified collection.",
        "operationId" : "UpdateCollectionDataAlt",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collectionID",
          "in" : "path",
          "description" : "ID of the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Query to limit scope of update, and new data values.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/DataPut"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Items successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/count"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Data" ],
        "summary" : "DATA(id) - Create items",
        "description" : "Creates new data rows in the specified collection.",
        "operationId" : "CreateCollectionDataAlt",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collectionID",
          "in" : "path",
          "description" : "ID of the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "New data row(s). Can accept multiple comma-separated key-value pairs to populate columns. Can also accept a blank object to create an unpopulated row.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/ColumnField"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Items successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ColumnField"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Data" ],
        "summary" : "DATA(id) - Delete items",
        "description" : "Deletes data rows in the specified collection.",
        "operationId" : "DeleteCollectionDataAlt",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collectionID",
          "in" : "path",
          "description" : "ID of the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query to limit scope of deletion.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Rows successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/count"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/1/data/{collectionID}/columns" : {
      "get" : {
        "tags" : [ "Data" ],
        "summary" : "DATA(id) - Get columns",
        "description" : "Returns the columns and their data type for the specified collection.",
        "operationId" : "GetColumns",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collectionID",
          "in" : "path",
          "description" : "ID of the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-SystemKey",
          "in" : "header",
          "description" : "System Key that identifies the system that holds the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-SystemSecret",
          "in" : "header",
          "description" : "header parameter for ensuring authenticity",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/columnSuccess"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid status value",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/1/message/{systemKey}" : {
      "get" : {
        "tags" : [ "Messaging" ],
        "summary" : "MESSAGING - Get history",
        "description" : "Returns the message history for a single topic. Does not honor wildcards.",
        "operationId" : "GetMessageHistory",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the messages belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "topic",
          "in" : "query",
          "description" : "Messaging topic to retrieve the history for.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of messages to retrieve. 0 retrieves all messages.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "last",
          "in" : "query",
          "description" : "Point in time to start search. (epoch timestamp)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time for searching within a timeframe. (epoch timestamp)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stop",
          "in" : "query",
          "description" : "End time for searching within a timeframe. (epoch timestamp)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of messages published to the specified topic."
          }
        }
      },
      "delete" : {
        "tags" : [ "Messaging" ],
        "summary" : "MESSAGING - Delete history",
        "description" : "Deletes the messaging history for a single topic.",
        "operationId" : "DeleteMessageHistory",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the messages belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "topic",
          "in" : "query",
          "description" : "Messaging topic to delete the history for.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of messages to delete. 0 deletes all messages.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "last",
          "in" : "query",
          "description" : "Point in time to start deleting. (epoch timestamp)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time for deleting within a timeframe. (epoch timestamp)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stop",
          "in" : "query",
          "description" : "End time for deleting within a timeframe. (epoch timestamp)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Message history was successfully deleted."
          }
        }
      }
    },
    "/api/v/1/message/{systemKey}/publish" : {
      "post" : {
        "tags" : [ "Messaging" ],
        "summary" : "MESSAGING - Publish message",
        "description" : "Publishes a message to a topic, given the user has permission to publish on that topic.",
        "operationId" : "PublishMessage",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the messages belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Message to publish.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/messagePublish"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          }
        }
      }
    },
    "/api/v/1/user" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "USERS - Get all users",
        "description" : "Returns all user info that the current user is authorized to see.",
        "operationId" : "GetUsers",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query object used to filter the user list. See the query model below for an example.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of users.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getUsersSuccess"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid UserToken. Either the user is not authenticated or the token is malformed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/1/user/anon" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "USERS - Authenticate anonymous user",
        "description" : "Logs an anonymous user into the specified system and returns an UserToken.",
        "operationId" : "AuthAnon",
        "parameters" : [ {
          "name" : "ClearBlade-SystemKey",
          "in" : "header",
          "description" : "System Key that identifies the system you're logging the user into.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-SystemSecret",
          "in" : "header",
          "description" : "System Secret that ensures authenticity.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Anonymous authenticated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/authAnon"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "500" : {
            "description" : "Server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/1/user/auth" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "USERS - Authenticate user",
        "description" : "## Description\nLogs user into system and returns an UserToken.\n## Endpoint Body Values\nHere are the body values for the two scenarios\n### Basic Auth\nRequired Keys\n  - username\n  - password\n\nExample \n```json\n{\n  \"username\":\"cbman@clearblade.com\",\n  \"password\":\"cl34rbl4d3\"\n}\n```  \n\n### Refreshing Token\nRequired Keys \n  - grant_type (only one valid value - \"refresh_token\")\n  - refresh_token\n  - access_token\n\nExample \n```json\n{\n  \"grant_type\":\"refresh_token\",\n  \"refresh_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJmMjkwZTJlYjBiZDRmNjhiZDRkM2RlZjNkMWM0MDEiLCJzaWQiOiIzOWFkM2U5OC1hMmU0LTQxYzQtOGMzNi03ZjQxNDFhYzYxN2IiLCJ1dCI6MiwidHQiOjMsImV4cCI6MTU5MDI3ODExMSwiaWF0IjoxNTg5NDE0MTExfQ.iY6uJu2QgNP0uHoGdmEZm9wsztB1SUrCHrisxoXoxolol\",\n  \"access_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJmMjkwZTJlYjBiZDRmNjhiZDRkM2RlZjNkMWM0MDEiLCJzaWQiOiI3NmY4ODg4MS04YmU5LTRiM2UtOWJkNi1jOTJjZGQ4OTNlMmEiLCJ1dCI6MiwidHQiOjEsImV4cCI6MTU4OTg0NjExMSwiaWF0IjoxNTg5NDE0MTExfQ.xboryHuVn2zz-gSZ_JcD7-j_eBmJU1SMHkiDl9j8bak\"\n}\n```  \n",
        "operationId" : "AuthUser",
        "parameters" : [ {
          "name" : "ClearBlade-SystemKey",
          "in" : "header",
          "description" : "System Key that identifies the system you're logging the user into.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-SystemSecret",
          "in" : "header",
          "description" : "System Secret that ensures authenticity.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "User credentials.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/authdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User authenticated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/authUser"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "500" : {
            "description" : "Internal Server error."
          }
        }
      }
    },
    "/api/v/1/user/checkauth" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "USERS - Check user auth",
        "description" : "Checks if current user's UserToken is valid.",
        "operationId" : "UserCheckAuth",
        "parameters" : [ {
          "name" : "ClearBlade-SystemKey",
          "in" : "header",
          "description" : "System Key that identifies the system the user might be logged into.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "User Token obtained through previous authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User is authenticated with the specified system.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userCheck"
                }
              }
            }
          },
          "400" : {
            "description" : "User in not authenticated with the specified system."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/api/v/1/user/info" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "USERS - Get user info",
        "description" : "Returns all user information about the current user.",
        "operationId" : "GetUserInfo",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Current user information.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getUsers"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "500" : {
            "description" : "Server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "User" ],
        "summary" : "USERS - Update user info",
        "description" : "Updates some or all of the current user's information.",
        "operationId" : "UpdateUserInfo",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated user information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/userdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User has been updated."
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "500" : {
            "description" : "Server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "User" ],
        "summary" : "Allows an user with adequate permissions to delete another user",
        "description" : "This endpoints provides user the ability to delete another user if the user has Delete User operation permissions in Roles settings.",
        "operationId" : "DeleteUserAsUser",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-SystemKey",
          "in" : "header",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-SystemSecret",
          "in" : "header",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/deleteuserdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully Deleted User. No response returned."
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/1/user/logout" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "USERS - Log out user",
        "description" : "Logs the current user out of the specified system and invalidates their UserToken.",
        "operationId" : "UserLogout",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully logged out"
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "500" : {
            "description" : "Server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/1/user/pass" : {
      "put" : {
        "tags" : [ "User" ],
        "summary" : "USERS - Change user password",
        "description" : "Changes an user's password.",
        "operationId" : "UpdateUserPass",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Password change information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/passdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User's password was successfully changed. Returns `Success` as a response."
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "500" : {
            "description" : "Server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/1/user/reg" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "USERS - Register new user",
        "description" : "Registers a new user in the specified system and returns an UserToken for them.",
        "operationId" : "RegUser",
        "parameters" : [ {
          "name" : "ClearBlade-SystemKey",
          "in" : "header",
          "description" : "System Key that identifies the system you're adding the user to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-SystemSecret",
          "in" : "header",
          "description" : "System Secret that ensures authenticity.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "User registration information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/userregdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User registered.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/regUser"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "500" : {
            "description" : "Internal Server error."
          }
        }
      }
    },
    "/api/v/2/devices/{SystemKey}" : {
      "get" : {
        "tags" : [ "Device" ],
        "summary" : "DEVICES - Get all devices",
        "description" : "Returns all device info that the current user is authorized to see.",
        "operationId" : "GetDevices",
        "parameters" : [ {
          "name" : "SystemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the device is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Tags to filter devices by. See the query model below for an example.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of devices.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deviceUpdate"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Device" ],
        "summary" : "DEVICES - Update devices using a query",
        "description" : "Updates all devices matching the filters specified by a query.",
        "operationId" : "UpdateDevices",
        "parameters" : [ {
          "name" : "SystemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the device is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Query to limit scope of update, and new data values.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/PutQuery"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A JSON object representing the SQL result set containing the list of affected devices.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QueryResultSet"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Device" ],
        "summary" : "DEVICES - Delete devices using a query",
        "description" : "Deletes all devices matching the filters specified by a query.",
        "operationId" : "DeleteDevices",
        "parameters" : [ {
          "name" : "SystemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the device is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Tags to filter devices by. See the query model below for an example.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted devices."
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/2/devices/{SystemKey}/auth" : {
      "post" : {
        "tags" : [ "Device" ],
        "summary" : "DEVICES - Authenticate device",
        "description" : "## Description\nLogs device into system and returns an Device Access Token.\n## Endpoint Body Values\nHere are the body values for the two scenarios\n### Basic Auth\nRequired Keys\n  - deviceName\n  - activeKey\n\nExample \n```json\n{\n  \"deviceName\":\"BLEdevice\",\n  \"activeKey\":\"378123BLE\"\n}\n```  \n\n### Refreshing Token\nRequired Keys \n  - grant_type (only one valid value - \"refresh_token\")\n  - refresh_token\n  - access_token\n\nExample \n```json\n{\n  \"grant_type\":\"refresh_token\",\n  \"refresh_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJmMjkwZTJlYjBiZDRmNjhiZDRkM2RlZjNkMWM0MDEiLCJzaWQiOiIzOWFkM2U5OC1hMmU0LTQxYzQtOGMzNi03ZjQxNDFhYzYxN2IiLCJ1dCI6MiwidHQiOjMsImV4cCI6MTU5MDI3ODExMSwiaWF0IjoxNTg5NDE0MTExfQ.iY6uJu2QgNP0uHoGdmEZm9wsztB1SUrCHrisxoXoxolol\",\n  \"access_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJmMjkwZTJlYjBiZDRmNjhiZDRkM2RlZjNkMWM0MDEiLCJzaWQiOiI3NmY4ODg4MS04YmU5LTRiM2UtOWJkNi1jOTJjZGQ4OTNlMmEiLCJ1dCI6MiwidHQiOjEsImV4cCI6MTU4OTg0NjExMSwiaWF0IjoxNTg5NDE0MTExfQ.xboryHuVn2zz-gSZ_JcD7-j_eBmJU1SMHkiDl9j8bak\"\n}\n```\n",
        "operationId" : "AuthDevice",
        "parameters" : [ {
          "name" : "SystemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the device is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Device credentials.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/deviceAuthdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Device authenticated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deviceAuth"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "500" : {
            "description" : "Server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/2/devices/{systemKey}/{name}" : {
      "put" : {
        "tags" : [ "Device" ],
        "summary" : "DEVICES - Update info",
        "description" : "Updates a device's state or custom attributes.",
        "operationId" : "UpdateDeviceInfo",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the device is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of device.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated device info.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/deviceUserUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Device updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deviceUpdate"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      },
      "post" : {
        "tags" : [ "Device" ],
        "summary" : "DEVICES - Adds a device",
        "description" : "Adds a device in the system",
        "operationId" : "AddDevice",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the device is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of device.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Add device info.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/deviceAdd"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Device added successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deviceUpdate"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/api/v/2/edges/{systemKey}" : {
      "get" : {
        "tags" : [ "Edge" ],
        "summary" : "EDGE - Fetch all edges",
        "description" : "Returns all edge info that the current user is authorized to see.",
        "operationId" : "GetAllEdges",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the edge.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "System Key that identifies the system you want the info about.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of the edges from the specified system."
          },
          "400" : {
            "description" : "Bad request."
          }
        }
      }
    },
    "/api/v/3/allcollections/{systemKey}" : {
      "get" : {
        "tags" : [ "Data" ],
        "summary" : "DATA - Get collections",
        "description" : "Returns all the collections in the specified system.",
        "operationId" : "GetCollections",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the device is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of collections in the specified system.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/allCollectionsSuccess"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/3/code/codemeta/{systemKey}" : {
      "get" : {
        "tags" : [ "Code" ],
        "summary" : "CODE - Returns code services and settings",
        "description" : "Returns list of code services and its settings info .",
        "operationId" : "ReturnServiceSettings",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the device is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of code services and settings info.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/codeMeta"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/api/v/3/code/{systemKey}/timer/{name}" : {
      "get" : {
        "tags" : [ "Handlers" ],
        "summary" : "HANDLERS - Get timer handler",
        "description" : "Returns the specified timer handler information.",
        "operationId" : "GetTimerByName",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the timer handler you want.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns list of timers with their information.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/timerList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Handlers" ],
        "summary" : "HANDLERS - Update timer handler",
        "description" : "Updates the specified timer handler.",
        "operationId" : "UpdateTimerByName",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the timer handler you're updating.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated timer handler information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/timerdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updates specified timer.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/timerList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request."
          },
          "401" : {
            "description" : "Unauthorized. User cannot access resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Handlers" ],
        "summary" : "HANDLERS - Create timer handler",
        "description" : "Creates new timer handler.",
        "operationId" : "CreateNewTimer",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the timer handler you're creating.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "New timer information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/timerdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Creates a new timer in the system.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/timerList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized. User cannot access resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Handlers" ],
        "summary" : "HANDLERS - Delete trigger handler",
        "description" : "Deletes the specified trigger handler.",
        "operationId" : "DeleteTimerByName",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the timer you're deleting.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes timer from system."
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/3/code/{systemKey}/timers" : {
      "get" : {
        "tags" : [ "Handlers" ],
        "summary" : "HANDLERS - Get timer handlers",
        "description" : "Returns a list of timer handlers.",
        "operationId" : "GetAllTimers",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/timerArray"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/3/code/{systemKey}/trigger/{name}" : {
      "get" : {
        "tags" : [ "Handlers" ],
        "summary" : "HANDLERS - Get trigger handler",
        "description" : "Returns the specified trigger handler information.",
        "operationId" : "GetTriggerByName",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the trigger handler you want.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the trigger handler requested.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/triggerArray"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Handlers" ],
        "summary" : "HANDLERS - Update trigger handler",
        "description" : "Updates the specified trigger handler.",
        "operationId" : "UpdateTriggerByName",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the trigger handler you're updating.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated trigger handler information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/triggerdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/triggerArray"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Handlers" ],
        "summary" : "HANDLERS - Create trigger handler",
        "description" : "Creates a new trigger handler.",
        "operationId" : "CreateNewTrigger",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the trigger handler you're creating.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "New trigger information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/triggerdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/triggerArray"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Handlers" ],
        "summary" : "HANDLERS - Delete trigger handler",
        "description" : "Deletes the specified trigger handler.",
        "operationId" : "DeleteTriggerByName",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handler is in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the trigger handler you're deleting.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified."
          },
          "400" : {
            "description" : "Bad request."
          }
        }
      }
    },
    "/api/v/3/code/{systemKey}/triggers" : {
      "get" : {
        "tags" : [ "Handlers" ],
        "summary" : "HANDLERS - Get trigger handlers",
        "description" : "Returns list of trigger handlers.",
        "operationId" : "GetAllTrigger",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the handlers are in.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of trigger handlers.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/triggerArray"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/3/collectionmanagement" : {
      "put" : {
        "tags" : [ "Data" ],
        "summary" : "DATA - Update collection",
        "description" : "Creates or deletes a column within an existing collection, or updates an existing database connection in the specified system.",
        "operationId" : "UpdateCollection",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-SystemKey",
          "in" : "header",
          "description" : "System Key that identifies the system you're adding the user to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated collection information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/updateCollection"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Collection was successfully updated. There is no response"
          }
        }
      },
      "post" : {
        "tags" : [ "Data" ],
        "summary" : "DATA - Create collection",
        "description" : "Creates a new collection or database connection in the specified system.",
        "operationId" : "CreateCollection",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-SystemKey",
          "in" : "header",
          "description" : "System Key that identifies the system you're adding the user to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Configuration info for new collection.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/newcollection"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Collection was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/newcollection"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid status value",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Data" ],
        "summary" : "DATA - Delete collection",
        "description" : "Deletes an existing collection in the specified system.",
        "operationId" : "DeleteCollection",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-SystemKey",
          "in" : "header",
          "description" : "System Key that identifies the system you're adding the user to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "ID that identifies the collection to be deleted.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Collection was successfully deleted. There is no response"
          }
        }
      }
    },
    "/api/v/3/devices/{systemKey}/columns" : {
      "get" : {
        "tags" : [ "Device" ],
        "summary" : "EDGE - Get device columns",
        "description" : "Returns the columns and their data type for the device table in a system.",
        "operationId" : "GetDeviceTableSchema",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the devices.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns list of columns and data types for devices table in a system",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/columnSuccess"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/3/devices/{systemKey}/count" : {
      "get" : {
        "tags" : [ "Device" ],
        "summary" : "DEVICES - Get count",
        "description" : "Returns the total number of devices in a system.",
        "operationId" : "GetDeviceCount",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the devices.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns object containing count of devices in a system",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/count"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/3/edges/{systemKey}/columns" : {
      "get" : {
        "tags" : [ "Edge" ],
        "summary" : "EDGE - Get columns",
        "description" : "Returns the columns and their data type for the edge table in a system.",
        "operationId" : "GetEdgeTableSchema",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the edges.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns list of columns and their data types of edges table in a system."
          },
          "400" : {
            "description" : "Bad request."
          }
        }
      }
    },
    "/api/v/3/edges/{systemKey}/count" : {
      "get" : {
        "tags" : [ "Edge" ],
        "summary" : "EDGE - Get count",
        "description" : "Returns the total number of edges in a system.",
        "operationId" : "GetEdgeCount",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the edges.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns object containing count of edges in a system"
          },
          "400" : {
            "description" : "Bad request."
          }
        }
      }
    },
    "/api/v/3/edges/{systemKey}/{name}" : {
      "get" : {
        "tags" : [ "Edge" ],
        "summary" : "Edge(name) - Get edge info",
        "description" : "Returns the data from the specified edge.",
        "operationId" : "GetEdgeDataByName",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the edge.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the specified edge."
          },
          "400" : {
            "description" : "Bad request."
          }
        }
      },
      "put" : {
        "tags" : [ "Edge" ],
        "summary" : "EDGE - Update edge",
        "description" : "Updates the specified edge's information.",
        "operationId" : "UpdateEdgeByName",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the edge you're updating belongs to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the edge you're updating.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated edge information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/edgeUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified."
          },
          "400" : {
            "description" : "Bad request."
          }
        }
      },
      "post" : {
        "tags" : [ "Edge" ],
        "summary" : "EDGE - Create edge",
        "description" : "Creates a new edge in the specified system.",
        "operationId" : "CreateNewEdge",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the new edge will belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the edge you're creating.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "New edge information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/edgeNew"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified."
          },
          "400" : {
            "description" : "Bad request."
          }
        }
      },
      "delete" : {
        "tags" : [ "Edge" ],
        "summary" : "Edge - Delete edge",
        "description" : "Deletes the specified edge from its system.",
        "operationId" : "DeleteEdgeByName",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the edge currently belongs to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the edge you're deleting.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified."
          },
          "400" : {
            "description" : "Bad request."
          }
        }
      }
    },
    "/api/v/3/{systemKey}/deployments" : {
      "get" : {
        "tags" : [ "Deployments" ],
        "summary" : "DEPLOYMENTS - Gets all deployment names and descriptions for a system",
        "description" : "## Description:\nGets all deployment names and descriptions for a system\n\n### Query:\n```json\n{\"PAGESIZE\":int,\"PAGENUM\":int,\"FILTERS\":[[{\"EQ\":[{\"valueType\":\"value\"}]}]],\"SORT\":[{\"DESC\":\"value\"}]}\n```\n\n### Example:\n\n```json\n {\"PAGESIZE\":0,\"PAGENUM\":0,\"SORT\":[{\"DESC\":\"name\"}]}\n",
        "operationId" : "GetAllDeployments",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "User Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Tags to filter deployments by. See the query model above for an example.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the deployment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deployments retrieved successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deploymentSuccess"
                }
              }
            }
          },
          "500" : {
            "description" : "Server error."
          }
        }
      },
      "post" : {
        "tags" : [ "Deployments" ],
        "summary" : "DEPLOYMENTS - Creates a deployment",
        "description" : "Creates one deployment for system",
        "operationId" : "CreateDeployment",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "User Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the deployment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Information regarding deployment",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/createDeployment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Deployment created successfully"
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/api/v/3/{systemKey}/deployments/{deploymentName}" : {
      "get" : {
        "tags" : [ "Deployments" ],
        "summary" : "DEPLOYMENTS - Gets a deloyment for a system",
        "operationId" : "GetADeployment",
        "parameters" : [ {
          "name" : "clearblade-usertoken",
          "in" : "header",
          "description" : "User Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the deployment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deploymentName",
          "in" : "path",
          "description" : "Name of the deployment to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieved deployment successfully"
          },
          "500" : {
            "description" : "Server error."
          }
        }
      },
      "put" : {
        "tags" : [ "Deployments" ],
        "summary" : "DEPLOYMENT - Update deployment",
        "description" : "Updates a deployment.",
        "operationId" : "UpdateDeployment",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "User Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the deployment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deploymentName",
          "in" : "path",
          "description" : "Name of the deployment to update",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated deployment information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/updateDeployment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Deployment successfully updated."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      },
      "delete" : {
        "tags" : [ "Deployments" ],
        "summary" : "DEPLOYMENT - Delete a deployment",
        "description" : "Deletes a deployment based on the name",
        "operationId" : "DeleteDeployment",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "User Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the deployment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deploymentName",
          "in" : "path",
          "description" : "Name of the deployment to delete",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deployment successfully deleted."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/api/v/4/bucket_sets/{systemKey}" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "FILES  - Returns a list of metadata for buckets in system",
        "description" : "Returns a list of metadata for buckets in system",
        "operationId" : "GetBucketsData",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all buckets metadata",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/allBuckets"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/4/bucket_sets/{systemKey}/{deploymentName}" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "FILES  - Returns metadata for specified bucket",
        "description" : "Returns metadata for specified bucket",
        "operationId" : "GetSingleBucketData",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deploymentName",
          "in" : "path",
          "description" : "Name of the deployment to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a bucket's metadata",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/buckets"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/4/bucket_sets/{systemKey}/{deploymentName}/file/copy" : {
      "post" : {
        "tags" : [ "Files" ],
        "summary" : "FILES  - Copies a file to a new location within buckets",
        "description" : "Copies a file to a new location within buckets",
        "operationId" : "CopyBucketFile",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deploymentName",
          "in" : "path",
          "description" : "Name of the deployment to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "If either `from_box` or `to_box` is empty, then the corresponding path is considered a full path to the local file system. Both `from_box` and `to_box` cannot be simultaneously empty.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/copyFile"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "File is copied. Returns empty."
          }
        }
      }
    },
    "/api/v/4/bucket_sets/{systemKey}/{deploymentName}/file/create" : {
      "post" : {
        "tags" : [ "Files" ],
        "summary" : "FILES  - Creates a new file in a bucket",
        "description" : "Creates a new file in bucket",
        "operationId" : "CreateBucketFile",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deploymentName",
          "in" : "path",
          "description" : "Name of the deployment to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/createBox"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Returns metadata from the new box file",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/box_data"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/4/bucket_sets/{systemKey}/{deploymentName}/file/delete" : {
      "post" : {
        "tags" : [ "Files" ],
        "summary" : "FILES  - Deletes a file from the bucket.",
        "description" : "Deletes a file from the bucket.",
        "operationId" : "DeleteBucketFile",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deploymentName",
          "in" : "path",
          "description" : "Name of the deployment to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "If `box` is empty, then `path` is treated as a full path in the local file system.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/deleteFile"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "File is deleted. Returns empty."
          }
        }
      }
    },
    "/api/v/4/bucket_sets/{systemKey}/{deploymentName}/file/meta" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "FILES  - Get a file's metadata in a box",
        "description" : "## Description:\nReturns metadata of a specific file in a specific box. \nboxName defaults to \"inbox\"\n\n### Query Structure:\n```json\nbox={boxName}\npath={relativePath}\n```   \n### boxName Options\n\n* inbox\n* outbox\n* sandbox\n\nIf `box==\"\"`, then all files from all three boxes (inbox, outbox, sandbox)\nwill be returned.\n\n### Example:\n\n```json\nbox=inbox\npath=/relative/path/to/file\n```\n",
        "operationId" : "GetBoxFilesMeta",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "box",
          "in" : "query",
          "description" : "one of inbox, outbox or sandbox, defaults to 'inbox' if empty.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "description" : "Query object used to filter the items. See query model at in the description for example.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deploymentName",
          "in" : "path",
          "description" : "Name of the deployment to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns metadata from a box file",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/box_data"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/4/bucket_sets/{systemKey}/{deploymentName}/file/move" : {
      "post" : {
        "tags" : [ "Files" ],
        "summary" : "FILES  - Moves a file to a new location within buckets.",
        "description" : "Moves a file to a new location within buckets.",
        "operationId" : "MoveBucketFile",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deploymentName",
          "in" : "path",
          "description" : "Name of the deployment to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "If either `from_box` or `to_box` is empty, then the corresponding path is considered a full path to the local file system. Both `from_box` and `to_box` cannot be simultaneously empty.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/copyFile"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "File is moved. Returns empty."
          }
        }
      }
    },
    "/api/v/4/bucket_sets/{systemKey}/{deploymentName}/files" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "FILES  - Get all files metadata in a box",
        "description" : "## Description:\nReturns metadata of files in a specific box. \nboxName defaults to \"inbox\"\n\n### Query Structure:\n```json\nbox={boxName}\n```   \n### boxName Options\n\n* inbox\n* outbox\n* sandbox\n\nIf `box==\"\"`, then all files from all three boxes (inbox, outbox, sandbox)\nwill be returned.\n\n### Example:\n\n```json\nbox=inbox\n```\n",
        "operationId" : "GetBoxFiles",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "box",
          "in" : "query",
          "description" : "Query object used to filter the items. See query model at in the description for example.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deploymentName",
          "in" : "path",
          "description" : "Name of the deployment to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns all metadata from box files",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/box"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/4/data/{systemKey}/{collectionName}/index" : {
      "post" : {
        "tags" : [ "Data" ],
        "summary" : "DATA - Create collection",
        "description" : "This creates a non-unique index on a column. This is useful for speeding up certain queries, but doesn't work with upsert. This call will fail if the index already exists.",
        "operationId" : "CreateNonUniqueIndex",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through dev authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system you're adding the user to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collectionName",
          "in" : "path",
          "description" : "Name of the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "columnName",
          "in" : "query",
          "description" : "<COLUMN TO INDEX>",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Column is successfully indexed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid status value",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Data" ],
        "summary" : "DATA - Delete collection",
        "description" : "This deletes a non unique index from a column.",
        "operationId" : "DeleteNonUniqueIndex",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through dev authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system you're adding the user to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collectionName",
          "in" : "path",
          "description" : "Name of the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "columnName",
          "in" : "query",
          "description" : "<COLUMN TO INDEX>",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Index was successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/4/data/{systemKey}/{collectionName}/listindexes" : {
      "get" : {
        "tags" : [ "Data" ],
        "summary" : "DATA - Get list of indexes",
        "description" : "This returns all USER CREATED indexes/constraints for the collection.For safety, primary key indexes are not returned.",
        "operationId" : "GetIndexes",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collectionName",
          "in" : "path",
          "description" : "Name of the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of external databases in the specified system.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/allIndexes"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/api/v/4/data/{systemKey}/{collectionName}/uniqueindex" : {
      "post" : {
        "tags" : [ "Data" ],
        "summary" : "DATA - Create Unique Index",
        "description" : "This creates a unique index on a column. A user has to do this before you can use upsert with columnName as the conflictColumn. This call will fail if the index already exists.",
        "operationId" : "CreateUniqueIndex",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through dev authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system you're adding the user to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collectionName",
          "in" : "path",
          "description" : "Name of the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "columnName",
          "in" : "query",
          "description" : "<COLUMN TO INDEX>",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Column is successfully indexed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Data" ],
        "summary" : "DATA - Delete unique index",
        "description" : "This deletes a unique index on a column.",
        "operationId" : "DeleteUniqueIndex",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through dev authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system you're adding the user to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collectionName",
          "in" : "path",
          "description" : "Name of the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "columnName",
          "in" : "query",
          "description" : "<COLUMN TO INDEX>",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Unique Index was successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/api/v/4/data/{systemKey}/{collectionName}/upsert" : {
      "put" : {
        "tags" : [ "Data" ],
        "summary" : "DATA - Update upsert values",
        "description" : "This adds an insert (if the row does not exist) or an update (if the row exists)",
        "operationId" : "UpdateUpsert",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through dev authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system you're adding the user to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collectionName",
          "in" : "path",
          "description" : "Name of the collection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "conflictColumn",
          "in" : "query",
          "description" : "A column in your table that has a unique constraint. `columnName` can be used.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Upsert was successfully updated."
          },
          "400" : {
            "description" : "Invalid status value",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/4/devices/{systemKey}/connectioncount" : {
      "get" : {
        "tags" : [ "Device" ],
        "summary" : "DEVICES - Get total of connected devices",
        "description" : "Returns the number of device connections.",
        "operationId" : "ConnectedDeviceCount",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the devices.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns list of connected devices",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/connectedDeviceCount"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/4/devices/{systemKey}/connections" : {
      "get" : {
        "tags" : [ "Device" ],
        "summary" : "DEVICES - Get connected device list",
        "description" : "Returns the list of connected devices.",
        "operationId" : "GetConnectedDeviceList",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the devices.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns list of connected devices",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/connectedDevice"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/4/devices/{systemKey}/connections/{name}" : {
      "get" : {
        "tags" : [ "Device" ],
        "summary" : "DEVICES - Get information for a connected device",
        "description" : "Returns the connection information of the device.",
        "operationId" : "GetConnectedDeviceInfo",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the devices.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the connected device.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns list of connected devices",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/connectedDeviceInfo"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/4/external-db/{systemKey}" : {
      "get" : {
        "tags" : [ "Databases" ],
        "summary" : "DATABASES - Retrieves all external database connections",
        "description" : "Returns all the names and database types of the external database connections for that system. This is a developer only endpoint.",
        "operationId" : "GetAllExternalDB",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of external databases in the specified system.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/allDatabases"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      },
      "post" : {
        "tags" : [ "Databases" ],
        "summary" : "DATABASES - Create a external database connection",
        "description" : "## Description:\nCreates an external database connections for that system. This is a developer only endpoint.\n\n### List of database types supported:\n\n|Database Name|db_type|\n|-------------|-------|\n|MONGO|mongodb|\n|POSTGRES|postgres|\n|MYSQL|mysql|\n|MSSQL|mssql|\n|COUCHDB|couchdb|\n\n\n\n### Database Credentials\n\n|Field|Type|Database|Description|Options|Default|\n|-----|----|-----|-------|-------|----|\n|user|string|All|The external database username|\n|password|string|All|The external database password|\n|address|string|All|The external database IP address|\n|port|string|All|The port used to connect to the external database||27017 (Mongo), 3306 (MySQL), 5432 (Postgres), 1433 (MSSQL)|\n|dbname|string|All|The name of the external database|\n|connection_type|string|Mongo|The external database DNS connection type|srv and standard|standard|\n|tls|boolean|Mongo and Postgres|Setting the tls to `true` allows for transport encryption. This field is optional|True and false|True (Mongo) False(Postgres)|\n|authMechanism|string|Mongo|Database authentication method. This field is optional|SCRAM-SHA-256, SCRAM-SHA-1, MONGODB-CR, PLAIN, GSSAPI, MONGODB-X509|SCRAM-SHA-1|\n|authSource|string|Mongo|Database authentication source. This field is optional||admin|\n|replicaSet|string|Mongo|Allows for use of Replication Methods such as `rs.reconfig()  `.This field is optional||empty string|\n|encryption|string|MSSQL|Setting the encryption to `true` allows for secure encryption|disable and true|\n",
        "operationId" : "CreateExternalDB",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Credentials for external database connection.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/createDatabase"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Creates external database connection.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/api/v/4/external-db/{systemKey}/{name}" : {
      "get" : {
        "tags" : [ "Databases" ],
        "summary" : "DATABASES - Retrieve a specific external database connection",
        "description" : "Returns the name and database type of a external database connection. This is a developer and user endpoint.",
        "operationId" : "GetExternalDB",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "User Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of external database connection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Credentials for a specific external database connection. Refer to the 'credentials' table for each database in the endpoint above.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/externalDB"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error."
          }
        }
      },
      "put" : {
        "tags" : [ "Databases" ],
        "summary" : "DATABASES - Update external database credentials",
        "description" : "Updates existing external database credentials in the specified system. This is a developer and user endpoint.",
        "operationId" : "UpdateDatabaseCredentials",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "User Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of external database connection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated external database credentials.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/credentials"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "External database credentials was successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/credentials"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      },
      "delete" : {
        "tags" : [ "Databases" ],
        "summary" : "DATABASES - Delete a external database connection",
        "description" : "Deletes an existing external database connection in the specified system.This is a developer and user endpoint.",
        "operationId" : "DeleteExternalDB",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "User Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of external database connection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "External Database connection was successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/api/v/4/external-db/{systemKey}/{name}/data" : {
      "post" : {
        "tags" : [ "Databases" ],
        "summary" : "DATABASES - Create a external database connection",
        "description" : "Perform an operation on the external database.This is a developer and user endpoint.",
        "operationId" : "PerformDBOperation",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "User Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of external database connection.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "List of operations to be performed. Refer to the operations that are supported on the ClearBlade Docs or Native Libraries.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/operationsDB"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Returns external database data objects.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DBResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/api/v/4/message/{systemKey}/topics" : {
      "get" : {
        "tags" : [ "Messaging" ],
        "summary" : "MESSAGING - Gets list of topics",
        "description" : "## Description:\nReturns the list of topics.\n### Query Structure:\n```json\n{\"PAGESIZE\":int,\"PAGENUM\":int,\"FILTERS\":[[{\"_REPLACE_WITH_OPERATOR_\":[{\"valueType\":\"value\"}]}]], \"SORT\":[{\"DESC\":\"value\"}]}\n```\n\n ### Example:\n\n```json\n{\"FILTERS\":[[{\"NEQ\":[{\"concurrency\":0}]}]],\"PAGESIZE\": ,\"PAGENUM\":1}\n```\n",
        "operationId" : "GetTopics",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the messages belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query object used to filter the items. See query model in the description for example.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the list of topics and information.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/msgArray"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/4/message/{systemKey}/topics/count" : {
      "get" : {
        "tags" : [ "Messaging" ],
        "summary" : "MESSAGING - Gets number of topics",
        "description" : "Returns the number of topics.",
        "operationId" : "GetTopicCount",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the topics belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the number of topics.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/count"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResp"
                }
              }
            }
          }
        }
      }
    },
    "/api/v/4/user/manage" : {
      "put" : {
        "tags" : [ "User" ],
        "summary" : "USER - Users change roles and passwords for other users",
        "description" : "Users can change the roles and passwords for other users in the system",
        "operationId" : "ChangeUserInfo",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Roles to change for the user.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/rolespass"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User's roles and passwords successfully changed."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/api/v/4/webhook/execute/{systemKey}/{webhookName}" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "summary" : "WEBHOOKS - Executes query string payload webhook",
        "description" : "Executes the webhook of type Payload, authentication occurs over GET's query string",
        "operationId" : "PayloadWebhookQuery",
        "parameters" : [ {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the messages belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "webhookName",
          "in" : "path",
          "description" : "Name that identifies the webhook",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "token",
          "in" : "query",
          "description" : "User authentication and data pushed through webhook",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Webhook executed."
          }
        }
      },
      "post" : {
        "tags" : [ "Webhooks" ],
        "summary" : "WEBHOOKS - Executing a webhook",
        "description" : "Executes a webhook through a code service",
        "operationId" : "ExecuteWebhook",
        "parameters" : [ {
          "name" : "ClearBlade-UserToken",
          "in" : "header",
          "description" : "Token obtained through user authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the messages belong to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "webhookName",
          "in" : "path",
          "description" : "Name that identifies the webhook",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Message to publish.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/executeWebhook"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Webhook executed"
          }
        }
      }
    },
    "/api/v/4/{SystemKey}/adapters" : {
      "get" : {
        "tags" : [ "Adapter" ],
        "summary" : "ADAPTERS - Get all adapters",
        "description" : "Returns all device info that the current user is authorized to see.",
        "operationId" : "GetAdapters",
        "parameters" : [ {
          "name" : "SystemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the adapter is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of adapters."
          },
          "400" : {
            "description" : "Bad request."
          },
          "401" : {
            "description" : "User cannot access resource"
          }
        }
      },
      "post" : {
        "tags" : [ "Adapter" ],
        "summary" : "ADAPTERS - Add an adapter",
        "description" : "Adds an adapter to the system",
        "operationId" : "addAdapter",
        "parameters" : [ {
          "name" : "SystemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the adapter is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication..",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Information to create an adapter.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/addAdapter"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Dev authenticated."
          },
          "400" : {
            "description" : "Bad Request."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/api/v/4/{SystemKey}/adapters/{AdapterName}" : {
      "put" : {
        "tags" : [ "Adapter" ],
        "summary" : "ADAPTERS - Map Adapter command to execute a file",
        "description" : "Adds a command to the configuration section of the adapter.",
        "operationId" : "MapAdapterCommand",
        "parameters" : [ {
          "name" : "SystemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the adapter is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "AdapterName",
          "in" : "path",
          "description" : "Identifies an adapter in the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated adapter information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/MapAdapterCommand"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Command has been added."
          },
          "400" : {
            "description" : "Bad Request."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      },
      "delete" : {
        "tags" : [ "Adapter" ],
        "summary" : "ADAPTERS - Delete adapter",
        "description" : "Deletes the adapter",
        "operationId" : "DeleteAdapter",
        "parameters" : [ {
          "name" : "SystemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the device is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "AdapterName",
          "in" : "path",
          "description" : "Identifies an adapter in the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response or 'Unknown Response type' (it's successful)"
          },
          "400" : {
            "description" : "Bad request."
          }
        }
      }
    },
    "/api/v/4/{SystemKey}/adapters/{AdapterName}/control" : {
      "put" : {
        "tags" : [ "Adapter" ],
        "summary" : "ADAPTERS - Send command to edge",
        "description" : "Commands with files will send data to an edge",
        "operationId" : "AddEdgeCommand",
        "parameters" : [ {
          "name" : "SystemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the adapter is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "AdapterName",
          "in" : "path",
          "description" : "Identifies an adapter in the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated user information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/edgeCommand"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Edge command is working."
          },
          "400" : {
            "description" : "Bad Request."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/api/v/4/{SystemKey}/adapters/{AdapterName}/files" : {
      "get" : {
        "tags" : [ "Adapter" ],
        "summary" : "Gets list of configuration information for all adapter files",
        "description" : "Lists configuration information for all versions of all adapter files",
        "operationId" : "AdapterConfig",
        "parameters" : [ {
          "name" : "AdapterName",
          "in" : "path",
          "description" : "Identifies an adapter in the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "SystemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the adapter is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration page appears."
          },
          "400" : {
            "description" : "Bad request."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "500" : {
            "description" : "Internal Server error."
          }
        }
      },
      "post" : {
        "tags" : [ "Adapter" ],
        "summary" : "ADAPTERS - Add or replace file content & configuration",
        "description" : "Create a new file with content and configuration, or replace an existing file's content & configuration.",
        "operationId" : "updateFileInfo",
        "parameters" : [ {
          "name" : "SystemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the adapter is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "AdapterName",
          "in" : "path",
          "description" : "Identifies an adapter in the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Information about the file that was added.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdapterFileConfig"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Dev authenticated."
          },
          "400" : {
            "description" : "Bad Request."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/api/v/4/{SystemKey}/adapters/{AdapterName}/files/{fileName}" : {
      "get" : {
        "tags" : [ "Adapter" ],
        "summary" : "ADAPTERS - Download file from adapter",
        "description" : "Downloads file from command in adapter to computer.",
        "operationId" : "FileDownload",
        "parameters" : [ {
          "name" : "AdapterName",
          "in" : "path",
          "description" : "Identifies an adapter in the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "SystemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the adapter is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fileName",
          "in" : "path",
          "description" : "File Name identifies the file in the adapter.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "File is downloaded unto computer."
          },
          "400" : {
            "description" : "Bad request."
          }
        }
      },
      "put" : {
        "tags" : [ "Adapter" ],
        "summary" : "ADAPTERS - Update Existing File's content",
        "description" : "Update the content of the existing file",
        "operationId" : "updateExistingFileContent",
        "parameters" : [ {
          "name" : "SystemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the adapter is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "AdapterName",
          "in" : "path",
          "description" : "Identifies an adapter in the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fileName",
          "in" : "path",
          "description" : "File Name identifies the file in the adapter.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Information about the file that was added.",
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "file" ],
                "type" : "object",
                "properties" : {
                  "file" : {
                    "type" : "string",
                    "description" : "base64 encoded string as file content to overwrite the existing content",
                    "example" : "IyEvYmluL2Jhc2gKZWNobyAiaGVsbG8gd29ybGQi"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Returns the config and content of the file updated."
          },
          "400" : {
            "description" : "Bad Request."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      },
      "delete" : {
        "tags" : [ "Adapter" ],
        "summary" : "ADAPTERS - Delete adapter files",
        "description" : "Deletes the adapter file for a command",
        "operationId" : "DeleteFile",
        "parameters" : [ {
          "name" : "SystemKey",
          "in" : "path",
          "description" : "System Key that identifies the system the device is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "AdapterName",
          "in" : "path",
          "description" : "Identifies an adapter in the system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fileName",
          "in" : "path",
          "description" : "File Name identifies the file in the adapter.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response or ‘Unknown Response type’ (it’s successful)"
          },
          "400" : {
            "description" : "Bad request."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/api/v/4/{systemKey}/code/failed" : {
      "get" : {
        "tags" : [ "Code" ],
        "summary" : "CODE - Get all failed services using Query",
        "description" : "Returns list of failed code services.",
        "operationId" : "GetFailedServiceQuery",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Dev Token obtained through authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the device is a part of.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Uses query to limit scope of list of failed services. Check FailQuery Model at the bottom of this page.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of filters for failed services."
          },
          "400" : {
            "description" : "Bad request."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/codeadmin/failed" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get all failed services",
        "description" : "Returns list of failed code services for all systems the current developer is authorized to see.",
        "operationId" : "GetFailedServices",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of failed services."
          }
        }
      }
    },
    "/codeadmin/failed/{systemKey}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get system's failed services",
        "description" : "Returns list of failed code services for the specified system.",
        "operationId" : "GetSystemFailedServices",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system with the failed services.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of failed services."
          }
        }
      },
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Retry failed service",
        "description" : "Retries one failed service in the specified system.",
        "operationId" : "RetryFailedService",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system with the failed services.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Unique id of the failed code service you're retrying.",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Code service was successfully executed."
          }
        }
      },
      "delete" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Delete failed service run",
        "description" : "Deletes the specified failed service run from the list of failed service runs. Does not delete the service.",
        "operationId" : "DeleteFailedService",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system with the failed services.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Unique id of failed code service run you're deleting.",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Run was successfully deleted from the list of failed runs."
          }
        }
      }
    },
    "/codeadmin/v/2/history/library/{systemKey}/{libName}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get library history",
        "description" : "Returns all previous versions of a library.",
        "operationId" : "LibraryHistory",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the library.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "libName",
          "in" : "path",
          "description" : "Library's name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "History of the specified library."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/codeadmin/v/2/history/library/{systemKey}/{libName}/{libVersion}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get old library version",
        "description" : "Gets an old version of a library.",
        "operationId" : "GetOldLibraryVersion",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the library.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "libName",
          "in" : "path",
          "description" : "Library's name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "libVersion",
          "in" : "path",
          "description" : "Library's version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The old version of the specified library."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/codeadmin/v/2/library/{systemKey}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get all libraries",
        "description" : "Returns all available libraries in the specified system along with their meta information.",
        "operationId" : "GetLibraries",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the libraries.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of available libraries and some info about them."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/codeadmin/v/2/library/{systemKey}/{libName}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get library",
        "description" : "Returns the specified library and its meta information.",
        "operationId" : "GetLibrary",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the library.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "libName",
          "in" : "path",
          "description" : "Library's name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The specified library and its metadata."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      },
      "put" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Update library",
        "description" : "Updates local library.",
        "operationId" : "UpdateLibrary",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the library.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "libName",
          "in" : "path",
          "description" : "Library's name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated library information and code.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/updatedata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Library successfully updated."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      },
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Create library",
        "description" : "Creates a local library in the specified system.",
        "operationId" : "CreateLibrary",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the library.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "libName",
          "in" : "path",
          "description" : "Library's name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "New library information and code.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/libdata"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Library successfully created."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      },
      "delete" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Delete library",
        "description" : "Deletes a local library from the specified system.",
        "operationId" : "DeleteLibrary",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the library.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "libName",
          "in" : "path",
          "description" : "Library's name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Library was successfully deleted."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/codeadmin/v/2/logs/{systemKey}/{serviceName}" : {
      "get" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Get services logs",
        "description" : "Returns log list for the code service",
        "operationId" : "GetLogs",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system with the failed services.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "Code service's name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns Log history."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    },
    "/codeadmin/v/2/{systemKey}/{serviceName}" : {
      "put" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Update code service",
        "description" : "Updates the information and data in the code service.",
        "operationId" : "UpdateService",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System key that identifies the system the code service belongs to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "Code service's name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "list of resources to add or remove to the template for an edge.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/serviceUpdate"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          },
          "400" : {
            "description" : "Bad request."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "post" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Add code service",
        "description" : "Adds code service to the system.",
        "operationId" : "AddService",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the library.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "Code service's name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Code service information.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/addservice"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Code service successfully added."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      },
      "delete" : {
        "tags" : [ "Developer" ],
        "summary" : "DEVELOPER - Delete code service",
        "description" : "Deletes a local library from the specified system.",
        "operationId" : "DeleteService",
        "parameters" : [ {
          "name" : "ClearBlade-DevToken",
          "in" : "header",
          "description" : "Developer Token obtained through admin authentication.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "systemKey",
          "in" : "path",
          "description" : "System Key that identifies the system that holds the library.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "Code service's name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Library was successfully deleted."
          },
          "500" : {
            "description" : "Server error."
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "2FAinfo" : {
        "type" : "object",
        "properties" : {
          "phone" : {
            "type" : "string",
            "example" : "+15120000000"
          },
          "two_factor_enabled" : {
            "type" : "boolean",
            "example" : true
          },
          "two_factor_method" : {
            "type" : "string",
            "example" : "sms"
          }
        },
        "description" : "2FA method information"
      },
      "AdapterFileConfig" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "adapter_name" : {
            "type" : "string",
            "description" : "The adapter the file is a part of."
          },
          "file" : {
            "type" : "string",
            "description" : "The base64 encoded file content.",
            "example" : "IyEvYmluL2Jhc2gKbWtkaXIgU2hvd1RpbWVBZGFwdGVyCgptdiBzdGFydC5zaCBTaG93VGltZUFkYXB0ZXIKbXYgc3RvcC5zaCBTaG93VGltZUFkYXB0ZXIKbXYgc3RhdHVzLnNoIFNob3dUaW1lQWRhcHRlcgptdiBkZXBsb3kuc2ggU2hvd1RpbWVBZGFwdGVyCm12IHVuZGVwbG95LnNoIFNob3dUaW1lQWRhcHRlcgptdiBzaG93VGltZSBTaG93VGltZUFkYXB0ZXIKCmVjaG8gIlNob3dUaW1lQWRhcHRlciBEZXBsb3llZCI="
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the file, spaces ` ` or `-` are not allowed"
          },
          "path_name" : {
            "type" : "string",
            "description" : "the file path where the adapter file is stored on the client side. For example, on the file system where edge is running.",
            "example" : "start.sh"
          }
        },
        "description" : "Adapter file content and config, to associate this file with a command, use MapAdapterCommand endpoint"
      },
      "Assets" : {
        "type" : "object",
        "properties" : {
          "asset_class" : {
            "type" : "string",
            "description" : "The names of the services, users, devices, triggers, timers, adapters, portals, plugins or collection that are being updated in the deployment",
            "example" : "adapters"
          },
          "asset_id" : {
            "type" : "string",
            "description" : "name of a particular asset or empty string for all assets",
            "example" : "adapter_name"
          },
          "sync_to_edge" : {
            "type" : "boolean",
            "description" : "specifies whether asset should be synced to all edges",
            "example" : true
          },
          "sync_to_platform" : {
            "type" : "boolean",
            "description" : "specifies whether asset should be synced to platform",
            "example" : true
          }
        },
        "description" : "Assets for the deployment"
      },
      "CacheArrayResp" : {
        "type" : "array",
        "description" : "list of caches",
        "items" : {
          "$ref" : "#/components/schemas/getCacheResp"
        }
      },
      "Change" : {
        "type" : "object",
        "properties" : {
          "add" : {
            "type" : "string",
            "example" : "owner@clearblade.com"
          },
          "remove" : {
            "type" : "string",
            "example" : "owner@clearblade.com"
          }
        },
        "description" : "Owner changes"
      },
      "Collection" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "category" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "photoUrls" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "A data set that contains items"
      },
      "ColumnField" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ItemID"
        }
      },
      "DBResp" : {
        "type" : "object",
        "properties" : {
          "Data" : {
            "type" : "array",
            "example" : ""
          },
          "Total" : {
            "type" : "integer",
            "example" : 1
          }
        }
      },
      "DataArray" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/DataArray2"
        }
      },
      "DataArray2" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/DataObject"
        }
      },
      "DataObject" : {
        "type" : "object",
        "properties" : {
          "EQ" : {
            "$ref" : "#/components/schemas/DataObject2"
          }
        }
      },
      "DataObject2" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/DataObjectItem"
        }
      },
      "DataObjectItem" : {
        "type" : "object",
        "properties" : {
          "item_id" : {
            "type" : "string",
            "example" : "6e0227d8-8a98-454a-951d-a109f813a397"
          }
        }
      },
      "DataPut" : {
        "type" : "object",
        "properties" : {
          "$set" : {
            "type" : "object",
            "properties" : {
              "columnName" : {
                "type" : "object",
                "example" : "newValue"
              }
            }
          },
          "query" : {
            "$ref" : "#/components/schemas/DataQuery"
          }
        }
      },
      "DataQuery" : {
        "type" : "object",
        "properties" : {
          "FILTERS" : {
            "$ref" : "#/components/schemas/DataArray"
          }
        }
      },
      "Error" : {
        "required" : [ "category", "code", "detail", "id", "level", "line", "message" ],
        "type" : "object",
        "properties" : {
          "category" : {
            "type" : "string",
            "example" : "User Permissions"
          },
          "code" : {
            "type" : "integer",
            "example" : 400
          },
          "detail" : {
            "type" : "string",
            "example" : "Invalid token"
          },
          "id" : {
            "type" : "string",
            "example" : "f5471393-b45e-42dc-8a13-034284d291f5"
          },
          "level" : {
            "type" : "integer",
            "example" : 1
          },
          "line" : {
            "type" : "string",
            "example" : "/go/src/clearblade/router/newRouter.go:336"
          },
          "lowLevelError" : {
            "type" : "object",
            "example" : { }
          },
          "message" : {
            "type" : "string",
            "example" : "Bad request"
          }
        },
        "description" : "Bad Request error information"
      },
      "ErrorResp" : {
        "required" : [ "error", "statusCode" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "$ref" : "#/components/schemas/Error"
          },
          "statusCode" : {
            "type" : "integer",
            "description" : "Error code",
            "example" : 400
          }
        },
        "description" : "Error responses"
      },
      "FilterQuery" : {
        "type" : "object",
        "properties" : {
          "PAGENUM" : {
            "type" : "integer",
            "example" : 1
          },
          "PAGESIZE" : {
            "type" : "integer"
          },
          "SORT" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SortQuery"
            }
          }
        }
      },
      "Filters" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Operator"
        }
      },
      "Item" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "ItemID" : {
        "type" : "object",
        "properties" : {
          "item_id" : {
            "type" : "string",
            "example" : "6e0227d8-8a98-454a-951d-a109f813a397"
          }
        }
      },
      "KVPs" : {
        "type" : "object",
        "properties" : {
          "topic" : {
            "type" : "string",
            "example" : "temperature/sensorA"
          }
        }
      },
      "MapAdapterCommand" : {
        "type" : "object",
        "properties" : {
          "architecture" : {
            "type" : "string",
            "description" : "The platform the adapter will be running on.",
            "example" : "darwin-amd64"
          },
          "deploy_command" : {
            "type" : "string",
            "description" : "The file name that will be running for the deploy command.",
            "example" : "./deploy.sh"
          },
          "logs_command" : {
            "type" : "string",
            "description" : "",
            "example" : "./logs.sh"
          },
          "os" : {
            "type" : "string",
            "description" : "The os this adapter is going to run on.",
            "example" : "linux"
          },
          "run_deploy_on_deploy" : {
            "type" : "boolean",
            "description" : "",
            "example" : true
          },
          "run_start_on_deploy" : {
            "type" : "boolean",
            "description" : "",
            "example" : true
          },
          "run_stop_on_deploy" : {
            "type" : "boolean",
            "description" : "",
            "example" : true
          },
          "start_command" : {
            "type" : "string",
            "description" : "A command or shell script that will be executed to start the adapter on a ClearBlade Edge. If a start-up command is not specified , the adapter would need to be manually started by connecting to the gateway device (via ssh) and issuing an appropriate start",
            "example" : "./start.sh"
          },
          "status_command" : {
            "type" : "string",
            "description" : "A command or shell script that will be run to determine the status of the adapter on a specific ClearBlade Edge. A shell script that echoes the status of an adapter should be supplied",
            "example" : "./status.sh"
          },
          "stop_command" : {
            "type" : "string",
            "description" : "A command or shell script that will be run to stop the adapter on a ClearBlade Edge.  If the Stop Command is not specified, the adapter would need to be manually stopped by connecting to the gateway device (via ssh) and issuing an appropriate stop command.",
            "example" : "./stop.sh"
          },
          "undeploy_command" : {
            "type" : "string",
            "description" : "A command or shell script that will be run to uninstall the adapter from a ClearBlade Edge. If the Undeploy Command is not specified the default behavior of the ClearBlade platform is to remove the adapter files from the directory where Edge is running.",
            "example" : "./undeploy.sh"
          }
        },
        "description" : "The information to be used for adding a command to an adapter."
      },
      "Operator" : {
        "type" : "object",
        "properties" : {
          "EQ" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OperatorValue"
            }
          },
          "GT" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OperatorValue"
            }
          },
          "GTE" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OperatorValue"
            }
          },
          "LT" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OperatorValue"
            }
          },
          "LTE" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OperatorValue"
            }
          },
          "NEQ" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OperatorValue"
            }
          },
          "RE" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OperatorValue"
            }
          }
        },
        "description" : "Choose only one of the below properties."
      },
      "OperatorValue" : {
        "type" : "object",
        "properties" : {
          "[columnName]" : {
            "type" : "string",
            "description" : "[itemValue]"
          }
        },
        "description" : "An object describing a column/value relationship to be used in a query's operators."
      },
      "PutQuery" : {
        "type" : "object",
        "properties" : {
          "$set" : {
            "type" : "object",
            "properties" : {
              "[columnName]" : {
                "type" : "object",
                "example" : "[newValue]"
              }
            }
          },
          "query" : {
            "$ref" : "#/components/schemas/Filters"
          }
        }
      },
      "Query" : {
        "type" : "object",
        "properties" : {
          "FILTERS" : {
            "$ref" : "#/components/schemas/Filters"
          },
          "PAGENUM" : {
            "type" : "integer",
            "example" : 1
          },
          "PAGESIZE" : {
            "type" : "integer"
          },
          "SORT" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SortObject"
            }
          }
        }
      },
      "QueryResultSet" : {
        "type" : "object",
        "properties" : {
          "DATA" : {
            "type" : "array",
            "description" : "An array containing each row returned by a query",
            "items" : {
              "type" : "object"
            }
          },
          "TOTAL" : {
            "type" : "integer",
            "description" : "The number of rows affected by a query"
          }
        },
        "description" : "An object representing a SQL query result set."
      },
      "SMSSettings" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "type" : "string",
            "example" : "+15120000000"
          },
          "password" : {
            "type" : "string",
            "example" : "test"
          },
          "service_name" : {
            "type" : "string",
            "description" : "Only Twilio is supported.",
            "example" : "Twilio"
          },
          "two_factor_message" : {
            "type" : "string",
            "example" : "Please use the code to log in: $CODE"
          },
          "url" : {
            "type" : "string",
            "example" : "https://api.twilio.com"
          },
          "username" : {
            "type" : "string",
            "example" : "AC25b4eb989b9db8"
          },
          "validation_message" : {
            "type" : "string",
            "example" : "Please validate your email here: $LINK"
          }
        },
        "description" : "2FA SMS communication settings"
      },
      "SMSTest" : {
        "type" : "object",
        "properties" : {
          "recipient" : {
            "type" : "string",
            "example" : "+15120000000"
          }
        },
        "description" : "2FA SMS communication test"
      },
      "SecuritySettings" : {
        "type" : "object",
        "properties" : {
          "developer_token_ttl" : {
            "type" : "integer",
            "example" : 86400
          },
          "two_factor_auth" : {
            "$ref" : "#/components/schemas/enabled"
          }
        },
        "description" : "Security Settings for 2FA"
      },
      "SortObject" : {
        "type" : "object",
        "properties" : {
          "ASC" : {
            "type" : "string",
            "description" : "Sort by ascending values in this column",
            "example" : "columnName"
          },
          "DESC" : {
            "type" : "string",
            "description" : "Sort by descending values in this column",
            "example" : "columnName"
          }
        },
        "description" : "Choose only one of the below properties."
      },
      "SortQuery" : {
        "type" : "object",
        "properties" : {
          "DESC" : {
            "type" : "string",
            "description" : "Sort by descending values",
            "example" : "datetime"
          }
        },
        "description" : "Sorts based on query."
      },
      "SortUser" : {
        "type" : "object",
        "properties" : {
          "ASC" : {
            "type" : "string",
            "description" : "Sort by ascending values",
            "example" : "user_id"
          }
        },
        "description" : "Sort by user ID."
      },
      "SuccessResp" : {
        "required" : [ "success" ],
        "type" : "object",
        "properties" : {
          "success" : {
            "type" : "boolean",
            "description" : "Describes if the action was successfully performed or not.",
            "example" : true
          }
        },
        "description" : "Success responses"
      },
      "addAdapter" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "architecture" : {
            "type" : "string",
            "description" : "The platform the adapter will be running on.",
            "example" : "darwin-amd64"
          },
          "deploy_command" : {
            "type" : "string",
            "description" : "The file name that will be running for the deploy command.",
            "example" : ""
          },
          "logs_command" : {
            "type" : "string",
            "description" : "A command or shell script that will be used to retrieve any logs printed out by the adapter while it is running.",
            "example" : ""
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the adapter.",
            "example" : "example-adapter"
          },
          "os" : {
            "type" : "string",
            "description" : "The os this adapter is going to run on.",
            "example" : "linux"
          },
          "start_command" : {
            "type" : "string",
            "description" : "A command or shell script that will be executed to start the adapter on a ClearBlade Edge. If a start-up command is not specified , the adapter would need to be manually started by connecting to the gateway device (via ssh) and issuing an appropriate start",
            "example" : ""
          },
          "status_command" : {
            "type" : "string",
            "description" : "A command or shell script that will be run to determine the status of the adapter on a specific ClearBlade Edge. A shell script that echoes the status of an adapter should be supplied",
            "example" : ""
          },
          "stop_command" : {
            "type" : "string",
            "description" : "A command or shell script that will be run to stop the adapter on a ClearBlade Edge.  If the Stop Command is not specified, the adapter would need to be manually stopped by connecting to the gateway device (via ssh) and issuing an appropriate stop command.",
            "example" : ""
          },
          "undeploy_command" : {
            "type" : "string",
            "description" : "A command or shell script that will be run to uninstall the adapter from a ClearBlade Edge. If the Undeploy Command is not specified the default behavior of the ClearBlade platform is to remove the adapter files from the directory where Edge is running.",
            "example" : ""
          }
        },
        "description" : "The information to be used for adding an adapter."
      },
      "addCache" : {
        "required" : [ "ttl" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Description of new shared cache"
          },
          "name" : {
            "type" : "string",
            "example" : "sharedCache"
          },
          "ttl" : {
            "type" : "integer",
            "example" : 30
          }
        },
        "description" : "the information given when adding a cache"
      },
      "addColumnInfo" : {
        "required" : [ "id", "name", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "This is the collection ID",
            "example" : "c0f8e2c50bbeeafb87f5efa2eee301"
          },
          "name" : {
            "type" : "string",
            "example" : "Sensor_Location"
          },
          "type" : {
            "type" : "string",
            "example" : "string"
          }
        }
      },
      "addUserColumn" : {
        "required" : [ "column_name", "type" ],
        "type" : "object",
        "properties" : {
          "column_name" : {
            "type" : "string",
            "example" : "phone_number"
          },
          "type" : {
            "type" : "string",
            "example" : "string"
          }
        },
        "description" : "User column information."
      },
      "addservice" : {
        "required" : [ "code", "name", "parameters", "systemID" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "example" : "function serviceName(req,resp){resp.success(“success”);}"
          },
          "dependencies" : {
            "type" : "string",
            "example" : "log"
          },
          "name" : {
            "type" : "string",
            "example" : "serviceName"
          },
          "parameters" : {
            "type" : "string",
            "example" : ""
          },
          "run_user" : {
            "type" : "string",
            "example" : ""
          },
          "systemID" : {
            "type" : "string",
            "example" : "c0f8e2c50bc6cc90b7a19abbbb8d01"
          }
        }
      },
      "allBuckets" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/buckets"
        }
      },
      "allCollections" : {
        "type" : "object",
        "properties" : {
          "appID" : {
            "type" : "string",
            "description" : "This is the system key",
            "example" : "c0f8e2c50bbeeafb87f5efa2eee301"
          },
          "collectionID" : {
            "type" : "string",
            "example" : "92ceabdd0be690a3d3fdd9dbd3e901"
          },
          "name" : {
            "type" : "string",
            "example" : "Employee_List"
          }
        }
      },
      "allCollectionsSuccess" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/allCollections"
        }
      },
      "allDatabases" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/database"
        }
      },
      "allIndexes" : {
        "type" : "object",
        "properties" : {
          "Data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/indexArray"
            }
          },
          "Total" : {
            "type" : "integer",
            "description" : "Total number of indexes in collection",
            "example" : 2
          }
        }
      },
      "allowKey" : {
        "type" : "object",
        "properties" : {
          "allow_key_auth" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "analyticItems" : {
        "type" : "object",
        "properties" : {
          "developers" : {
            "type" : "array",
            "example" : ""
          },
          "disabled" : {
            "type" : "boolean",
            "example" : false
          },
          "diskUsage" : {
            "type" : "integer",
            "example" : 2
          },
          "lastUpdated" : {
            "type" : "integer",
            "example" : 1580407664
          },
          "name" : {
            "type" : "string",
            "example" : "System-Name"
          },
          "numAPIReqsMonth" : {
            "type" : "integer",
            "example" : 2
          },
          "numAPIReqsTotal" : {
            "type" : "integer",
            "example" : 2
          },
          "numAPIReqsYear" : {
            "type" : "integer",
            "example" : 2
          },
          "numDeployments" : {
            "type" : "integer",
            "example" : 2
          },
          "numDevices" : {
            "type" : "integer",
            "example" : 2
          },
          "numDevs" : {
            "type" : "integer",
            "example" : 2
          },
          "numEdges" : {
            "type" : "integer",
            "example" : 2
          },
          "numLibraries" : {
            "type" : "integer",
            "example" : 2
          },
          "numPub" : {
            "type" : "integer",
            "example" : 2
          },
          "numPubMonth" : {
            "type" : "integer",
            "example" : 2
          },
          "numPubYear" : {
            "type" : "integer",
            "example" : 2
          },
          "numRecMonth" : {
            "type" : "integer",
            "example" : 2
          },
          "numRecTotal" : {
            "type" : "integer",
            "example" : 2
          },
          "numRecYear" : {
            "type" : "integer",
            "example" : 2
          },
          "numRoles" : {
            "type" : "integer",
            "example" : 2
          },
          "numServices" : {
            "type" : "integer",
            "example" : 2
          },
          "numUsers" : {
            "type" : "integer",
            "example" : 2
          },
          "owner" : {
            "type" : "string",
            "example" : "example@clearblade.com"
          },
          "system_key" : {
            "type" : "string",
            "example" : "ccafb4cf0bd0dcbcadaccaf9ebba01"
          }
        }
      },
      "auditInfo" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/auditItems"
        }
      },
      "auditItems" : {
        "type" : "object",
        "properties" : {
          "action_type" : {
            "type" : "string",
            "example" : "Update"
          },
          "asset_class" : {
            "type" : "string",
            "example" : "devices"
          },
          "asset_id" : {
            "type" : "string",
            "example" : "ClearBlade-iPhone"
          },
          "changes" : {
            "type" : "string",
            "example" : "{\"last_location_update\":\"2020-01-29T20:18:18.429,\"last_seen_location\":\"none\",\"x_pos\":874.2206168192284,\"y_pos\":739.82265853589}"
          },
          "email" : {
            "type" : "string",
            "example" : "example@clearblade.com"
          },
          "id" : {
            "type" : "integer",
            "example" : 10440595
          },
          "response_time" : {
            "type" : "integer",
            "description" : "In milleseconds",
            "example" : 4038669
          },
          "system_key" : {
            "type" : "string",
            "example" : "ccafb4cf0bd0dcbcadaccaf9ebba01"
          },
          "time" : {
            "type" : "string",
            "example" : "2020-01-29T20:18:18.475214Z"
          },
          "user_type" : {
            "type" : "string",
            "example" : "DEV"
          }
        }
      },
      "authAnon" : {
        "type" : "object",
        "properties" : {
          "user_token" : {
            "type" : "string",
            "example" : "jt-w5IiOOnhuSp8hJbanB2Tluj_ShXphjAta0_6_mAcUPSbatjFRYr1m5Ojl4skSOZ3txbbkFWArnUnfNA=="
          }
        }
      },
      "authUser" : {
        "type" : "object",
        "properties" : {
          "expires_at" : {
            "type" : "integer",
            "description" : "The format is UNIX timestamp. If value is -1, then no refresh token is returned",
            "example" : 1589313683
          },
          "refresh_token" : {
            "type" : "string",
            "example" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJhNGE0YTNlYjBiZDg5ZmU4YmV4cCI6MTU4OTc0NTY4MywiaWF0IjoxNTg4ODgxNjgzfQ.K2Ji0HldYtUO0RgednnOq117cnZy-ij-C1k1a8qVMsw"
          },
          "user_id" : {
            "type" : "string",
            "example" : "ce81b8dd0bf6fea6cec6d3c19774"
          },
          "user_token" : {
            "type" : "string",
            "example" : "jt-w5IiOOnhuSp8hJbanB2Tluj_ShXphjAta0_6_mAcUPSbatjFRYr1m5Ojl4skSOZ3txbbkFWArnUnfNA=="
          }
        }
      },
      "authdata" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "cbman@clearblade.com"
          },
          "password" : {
            "type" : "string",
            "example" : "cl34rbl4d3"
          }
        },
        "description" : "The credentials to be used for authentication and refreshing developer tokens"
      },
      "box" : {
        "type" : "object",
        "properties" : {
          "example/full/path/to/file.txt" : {
            "$ref" : "#/components/schemas/box_data"
          }
        }
      },
      "box_data" : {
        "type" : "object",
        "properties" : {
          "base_name" : {
            "type" : "string",
            "description" : "Base Name",
            "example" : "sample.txt"
          },
          "bucket_name" : {
            "type" : "string",
            "description" : "Box Name",
            "example" : "inbox"
          },
          "last_modified" : {
            "type" : "string",
            "description" : "Date of update",
            "example" : "2017-07-03T19:52:41.693Z"
          },
          "path_name" : {
            "type" : "string",
            "description" : "Full file path",
            "example" : "example/full/path/to/file.txt"
          },
          "permissions" : {
            "type" : "string",
            "description" : "File permissions",
            "example" : "-rw-r--r--"
          },
          "relative_name" : {
            "type" : "string",
            "description" : "relative name",
            "example" : "test/file.txt"
          },
          "size" : {
            "type" : "integer",
            "description" : "File size in bytes",
            "example" : 60
          }
        }
      },
      "buckets" : {
        "type" : "object",
        "properties" : {
          "deployment_name" : {
            "type" : "string",
            "description" : "Deployment Name",
            "example" : "ExampleDeployment"
          },
          "edge_config" : {
            "type" : "array",
            "description" : "Edge Config file",
            "example" : ""
          },
          "edge_storage" : {
            "type" : "string",
            "description" : "Edge storage type - local or google",
            "example" : "local"
          },
          "platform_config" : {
            "type" : "array",
            "description" : "Platform Config file",
            "example" : ""
          },
          "platform_storage" : {
            "type" : "string",
            "description" : "Platform storage type - local or google",
            "example" : "local"
          },
          "system_key" : {
            "type" : "string",
            "example" : "98a6cbe60bceafcc5d8b4a33b"
          }
        }
      },
      "changeRoleSettings" : {
        "required" : [ "changes", "id" ],
        "type" : "object",
        "properties" : {
          "changes" : {
            "$ref" : "#/components/schemas/roleSettings"
          },
          "id" : {
            "type" : "string",
            "example" : "Administrator"
          }
        },
        "description" : "Changes settings in individual roles"
      },
      "changeRolesObject" : {
        "type" : "object",
        "properties" : {
          "add" : {
            "type" : "array",
            "example" : ""
          },
          "delete" : {
            "type" : "array",
            "example" : ""
          }
        },
        "description" : "Contains at least one of the keys, add or delete which consists of an array of roles"
      },
      "changeroles" : {
        "required" : [ "roles" ],
        "type" : "object",
        "properties" : {
          "roles" : {
            "$ref" : "#/components/schemas/changeRolesObject"
          }
        },
        "description" : "Changes roles"
      },
      "changes" : {
        "type" : "object",
        "properties" : {
          "password" : {
            "type" : "string",
            "example" : "test"
          },
          "roles" : {
            "$ref" : "#/components/schemas/changeRolesObject"
          }
        },
        "description" : "Changes roles and password"
      },
      "changesInfo" : {
        "required" : [ "itemInfo", "permissions" ],
        "type" : "object",
        "properties" : {
          "itemInfo" : {
            "$ref" : "#/components/schemas/itemInfo"
          },
          "permissions" : {
            "$ref" : "#/components/schemas/permissions"
          }
        },
        "description" : "Item identification"
      },
      "codeMeta" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/codeSettings"
            }
          }
        }
      },
      "codeSettings" : {
        "type" : "object",
        "properties" : {
          "auto_balance" : {
            "type" : "boolean",
            "description" : "When set to `true` automatically start this service on each of the available nodes with the number of instances in the concurrency limit",
            "example" : false
          },
          "auto_balance_euid" : {
            "type" : "string",
            "example" : ""
          },
          "auto_restart" : {
            "type" : "boolean",
            "example" : false
          },
          "concurrency" : {
            "type" : "integer",
            "example" : 0
          },
          "euid" : {
            "type" : "string",
            "example" : "b0a6cbe60b8edf93fdca978aed8e01"
          },
          "execution_timeout" : {
            "type" : "integer",
            "example" : 60
          },
          "logging_enabled" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string",
            "example" : "serviceName"
          },
          "namespace" : {
            "type" : "string",
            "example" : ""
          },
          "system_key" : {
            "type" : "string",
            "example" : "98a6cbe60bceafcc5d8b4a33b"
          },
          "uuid" : {
            "type" : "string",
            "example" : "ea339dce-3e5e-45b2-b1a6-fe030a03b0fd"
          },
          "version" : {
            "type" : "integer",
            "example" : 3
          },
          "version_id" : {
            "type" : "string",
            "example" : "1767d09d-e6c6-4841-a26a-9935a1e5fd96"
          }
        }
      },
      "collectionSuccess" : {
        "required" : [ "CURRENTPAGE", "NEXTPAGEURL", "PREVPAGEURL", "TOTAL" ],
        "type" : "object",
        "properties" : {
          "CURRENTPAGE" : {
            "type" : "integer",
            "example" : 2
          },
          "DATA" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/dataArray"
            }
          },
          "NEXTPAGEURL" : {
            "type" : "string",
            "example" : "/api/v/1/data/a8eeb8db0b8aebf2d7f186d89348?query=%7B%22FILTERS%22%3A%5B%5D%2C%22PAGENUM%22%3A2%2C%22PAGESIZE%22%3A100%2C%22SELECTCOLUMNS%22%3Anull%2C%22SORT%22%3A%5B%5D%7D"
          },
          "PREVPAGEURL" : {
            "type" : "integer",
            "example" : 1
          },
          "TOTAL" : {
            "type" : "integer",
            "example" : 2
          }
        },
        "description" : "Collection success response body"
      },
      "columnObject" : {
        "type" : "object",
        "properties" : {
          "ColumnName" : {
            "type" : "string",
            "example" : "item_id"
          },
          "ColumnType" : {
            "type" : "string",
            "example" : "int"
          },
          "PK" : {
            "type" : "boolean",
            "example" : false
          }
        }
      },
      "columnSuccess" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/columnObject"
        }
      },
      "connectedDevice" : {
        "type" : "object",
        "properties" : {
          "device_name" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/connectedDeviceSettings"
            }
          }
        }
      },
      "connectedDeviceCount" : {
        "type" : "object",
        "properties" : {
          "total_device_connections" : {
            "type" : "integer",
            "example" : 5
          },
          "total_devices" : {
            "type" : "integer",
            "example" : 3
          },
          "unique_device_connections" : {
            "type" : "integer",
            "example" : 2
          }
        }
      },
      "connectedDeviceInfo" : {
        "type" : "object",
        "properties" : {
          "allow_certificate_auth" : {
            "type" : "boolean"
          },
          "allow_key_auth" : {
            "type" : "boolean"
          },
          "certificate" : {
            "type" : "string",
            "example" : "null"
          },
          "connections" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/connectedDeviceSettings"
            }
          },
          "created_date" : {
            "type" : "integer",
            "example" : 1576095410
          },
          "description" : {
            "type" : "string",
            "example" : "A connected device."
          },
          "device_key" : {
            "type" : "string",
            "example" : "e4ba8adf0beeea9dcc909dafaeab01 :: deviceName"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "has_keys" : {
            "type" : "boolean"
          },
          "last_active_date" : {
            "type" : "integer",
            "example" : 1576095410
          },
          "name" : {
            "type" : "string",
            "example" : "ExampleDevice"
          },
          "state" : {
            "type" : "string",
            "example" : "active"
          },
          "system_key" : {
            "type" : "string",
            "example" : "e4ba8adf0beeea9dcc909dafaeab01"
          },
          "type" : {
            "type" : "string",
            "example" : "sensor"
          }
        }
      },
      "connectedDeviceSettings" : {
        "type" : "object",
        "properties" : {
          "client_id" : {
            "type" : "string",
            "example" : "DhkVG42mlBQ7DkZSvb5d"
          },
          "time_connected" : {
            "type" : "string",
            "example" : "2019-12-13T17:53:09.5778599Z"
          }
        }
      },
      "copyFile" : {
        "type" : "object",
        "properties" : {
          "from_box" : {
            "type" : "string",
            "description" : "Box Name where file is being copied/moved",
            "example" : "inbox"
          },
          "from_path" : {
            "type" : "string",
            "description" : "Relative File Path Name where file is being copied/moved",
            "example" : "/relative/file/path"
          },
          "to_box" : {
            "type" : "string",
            "description" : "Box Name of where file is being copied/moved to",
            "example" : "inbox"
          },
          "to_path" : {
            "type" : "string",
            "description" : "Relative File Path Name where file is being copied/moved to",
            "example" : "/relative/file/path"
          }
        }
      },
      "count" : {
        "type" : "object",
        "example" : {
          "count" : 1
        }
      },
      "createBox" : {
        "type" : "object",
        "properties" : {
          "box" : {
            "type" : "string",
            "description" : "Box Name",
            "example" : "inbox"
          },
          "contents" : {
            "type" : "string",
            "description" : "base64 encoded file contents",
            "example" : "IyEvYmluL2Jhc2gKbWtkaXIgU2hvd1RpbWVBZGFwdGVyCgptdiBzdGFydC5zaCBTaG93VGltZUFkYXB0ZXIKbXYgc3RvcC5zaCBTaG93VGltZUFkYXB0ZXIKbXYgc3RhdHVzLnNoIFNob3dUaW1lQWRhcHRlcgptdiBkZXBsb3kuc2ggU2hvd1RpbWVBZGFwdGVyCm12IHVuZGVwbG95LnNoIFNob3dUaW1lQWRhcHRlcgptdiBzaG93VGltZSBTaG93VGltZUFkYXB0ZXIKCmVjaG8gIlNob3dUaW1lQWRhcHRlciBEZXBsb3llZCI="
          },
          "path" : {
            "type" : "string",
            "description" : "Relative File Path",
            "example" : "/relative/file/path"
          }
        }
      },
      "createDatabase" : {
        "type" : "object",
        "properties" : {
          "credentials" : {
            "$ref" : "#/components/schemas/credentials"
          },
          "dbtype" : {
            "type" : "string",
            "example" : "mysql"
          },
          "name" : {
            "type" : "string",
            "example" : "mysql_example"
          }
        },
        "description" : "Credentials for all databases can be found in the endpoint description"
      },
      "createDeployment" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "assets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Assets"
            }
          },
          "edges" : {
            "type" : "array",
            "description" : "Names of edges to be included in the deployment",
            "example" : ""
          },
          "name" : {
            "type" : "string"
          }
        },
        "description" : "The information used to create a deployment"
      },
      "credentials" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "example" : "MYSQL_ADDRESS"
          },
          "dbname" : {
            "type" : "string",
            "example" : "MYSQL_DATABASE_NAME"
          },
          "password" : {
            "type" : "string",
            "example" : "MSQL_PASSWORD"
          },
          "port" : {
            "type" : "string",
            "example" : "3306"
          },
          "user" : {
            "type" : "string",
            "example" : "MYSQL_USER"
          }
        }
      },
      "dataArray" : {
        "type" : "object",
        "example" : {
          "row1" : "row1_data",
          "row2" : "row2_data"
        }
      },
      "database" : {
        "type" : "object",
        "properties" : {
          "dbtype" : {
            "type" : "string",
            "example" : "MongoDB"
          },
          "name" : {
            "type" : "string",
            "example" : "sample_db"
          }
        },
        "description" : "Database name and type"
      },
      "deleteFile" : {
        "type" : "object",
        "properties" : {
          "box" : {
            "type" : "string",
            "description" : "Box Name of file being deleted",
            "example" : "inbox"
          },
          "path" : {
            "type" : "string",
            "description" : "Relative File Path Name of file being deleted",
            "example" : "/relative/file/path"
          }
        }
      },
      "deleteuserdata" : {
        "type" : "object",
        "properties" : {
          "user_id" : {
            "type" : "string",
            "example" : "c6b4cf0b8ca5b7c3fad793cb12"
          }
        }
      },
      "deployment" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "This an example deployment"
          },
          "name" : {
            "type" : "string",
            "example" : "deployment_name"
          }
        }
      },
      "deploymentSuccess" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/deployment"
        }
      },
      "devemail" : {
        "required" : [ "email" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "rob@clearblade.com"
          }
        },
        "description" : "email key of developer"
      },
      "deviceAdd" : {
        "type" : "object",
        "properties" : {
          "active_key" : {
            "type" : "string",
            "example" : "1574445864"
          },
          "allow_certificate_auth" : {
            "type" : "boolean"
          },
          "allow_key_auth" : {
            "type" : "boolean"
          },
          "certificate" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "example" : "This is a sensor"
          },
          "name" : {
            "type" : "string",
            "example" : "device_name"
          },
          "state" : {
            "type" : "string",
            "example" : "On"
          },
          "type" : {
            "type" : "string",
            "example" : "Sensor"
          }
        }
      },
      "deviceAdminNew" : {
        "required" : [ "allow_certificate_auth", "allow_key_auth", "enabled", "name", "state", "type" ],
        "type" : "object",
        "properties" : {
          "active_key" : {
            "type" : "string"
          },
          "allow_certificate_auth" : {
            "type" : "boolean"
          },
          "allow_key_auth" : {
            "type" : "boolean"
          },
          "certificate" : {
            "type" : "string"
          },
          "custom" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "keys" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        },
        "description" : "New device information"
      },
      "deviceAdminUpdate" : {
        "type" : "object",
        "properties" : {
          "active_key" : {
            "type" : "string"
          },
          "allow_certificate_auth" : {
            "type" : "boolean"
          },
          "allow_key_auth" : {
            "type" : "boolean"
          },
          "certificate" : {
            "type" : "string"
          },
          "custom" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "keys" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        },
        "description" : "Updated device information"
      },
      "deviceAuth" : {
        "type" : "object",
        "properties" : {
          "deviceName" : {
            "type" : "string",
            "example" : "BLEdevice"
          },
          "deviceToken" : {
            "type" : "string",
            "example" : "1dBfevzh0-lLVbZwx9DbyTLPyw-8F0RDq3qeUGqwinr8x3-bKMXLpfyliRSXsre5KxMn76CuChFQANoEEg=="
          },
          "expiresAt" : {
            "type" : "integer",
            "description" : "The format is UNIX timestamp. If value is -1, then no refresh token is returned",
            "example" : 1589313683
          },
          "refreshToken" : {
            "type" : "string",
            "example" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJhNGE0YTNlYjBiZDg5ZmU4YmV4cCI6MTU4OTc0NTY4MywiaWF0IjoxNTg4ODgxNjgzfQ.K2Ji0HldYtUO0RgednnOq117cnZy-ij-C1k1a8qVMsw"
          }
        }
      },
      "deviceAuthdata" : {
        "required" : [ "activeKey", "deviceName" ],
        "type" : "object",
        "properties" : {
          "activeKey" : {
            "type" : "string",
            "example" : "378BLE"
          },
          "deviceName" : {
            "type" : "string",
            "example" : "BLEdevice"
          }
        }
      },
      "deviceKey" : {
        "type" : "object",
        "properties" : {
          "active_key" : {
            "type" : "string",
            "example" : "��W&\u001A�Kw��"
          },
          "keys" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/rotatingDeviceKeys"
            }
          }
        },
        "description" : "List of rotating keys."
      },
      "deviceSession" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/deviceSessionInfo"
        }
      },
      "deviceSessionInfo" : {
        "type" : "object",
        "properties" : {
          "device_key" : {
            "type" : "string",
            "example" : "DEVICENAME00000"
          },
          "issued" : {
            "type" : "integer",
            "example" : 1587659826
          }
        }
      },
      "deviceUpdate" : {
        "type" : "object",
        "properties" : {
          "allow_certificate_auth" : {
            "type" : "boolean",
            "example" : true
          },
          "allow_key_auth" : {
            "type" : "boolean",
            "example" : true
          },
          "certificate" : {
            "type" : "string",
            "example" : ""
          },
          "created_date" : {
            "type" : "integer",
            "example" : 1574445666
          },
          "description" : {
            "type" : "string",
            "example" : "This device is a sensor"
          },
          "device_key" : {
            "type" : "string",
            "example" : "c0f8e2c50bbeeafb87f5efa2eee301 :: device_name"
          },
          "enabled" : {
            "type" : "boolean",
            "example" : true
          },
          "last_active_date" : {
            "type" : "integer",
            "example" : 1574445864
          },
          "name" : {
            "type" : "string",
            "example" : "device_name"
          },
          "state" : {
            "type" : "string",
            "example" : "On"
          },
          "system_key" : {
            "type" : "string",
            "example" : "c0f8e2c50bbeeafb87f5efa2eee301"
          },
          "type" : {
            "type" : "string",
            "example" : "sensor"
          }
        }
      },
      "deviceUserUpdate" : {
        "type" : "object",
        "properties" : {
          "custom_attribute" : {
            "type" : "string",
            "example" : "custom_setting"
          },
          "state" : {
            "type" : "string",
            "example" : "On"
          }
        },
        "description" : "Updated device information"
      },
      "devpass" : {
        "required" : [ "new_password", "old_password" ],
        "type" : "object",
        "properties" : {
          "new_password" : {
            "type" : "string",
            "example" : "bieberluver"
          },
          "old_password" : {
            "type" : "string",
            "example" : "bieberboy"
          }
        },
        "description" : "Contains oldPass and newPass keys"
      },
      "devregdata" : {
        "required" : [ "email", "fname", "lname", "org", "password" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Developer's email.",
            "example" : "martin@clearblade.com"
          },
          "fname" : {
            "type" : "string",
            "description" : "Developer's first name.",
            "example" : "Martin"
          },
          "lname" : {
            "type" : "string",
            "description" : "Developer's last name.",
            "example" : "theMachine"
          },
          "org" : {
            "type" : "string",
            "description" : "Developer's organization.",
            "example" : "ClearBlade"
          },
          "password" : {
            "type" : "string",
            "description" : "Developer's password.",
            "example" : "bieberboy"
          }
        },
        "description" : "The information to be used for user registration. Custom fields may be added."
      },
      "devregresp" : {
        "type" : "object",
        "properties" : {
          "dev_token" : {
            "type" : "string",
            "example" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJhNGE0YhjY2NhNS0xNjRhLTQ5ODgtYjU2MS1jYWVmNTcyNGU0NjAiLCJ1dCI6MSwidHQiOjEsImV4cCI6MTU4OTMxMzY4MywiaWF0IjoxNTg4ODgxNjgzfQ.0FK58r0wcJSQIDuDCAselAdmN-uj_CXHqJqk2mF9WB4"
          },
          "expires_at" : {
            "type" : "integer",
            "description" : "The format is UNIX timestamp. If value is -1, then no refresh token is returned",
            "example" : 1589313683
          },
          "is_two_factor" : {
            "type" : "boolean",
            "example" : false
          },
          "refresh_token" : {
            "type" : "string",
            "example" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJhNGE0YTNlYjBiZDg5ZmU4YmV4cCI6MTU4OTc0NTY4MywiaWF0IjoxNTg4ODgxNjgzfQ.K2Ji0HldYtUO0RgednnOq117cnZy-ij-C1k1a8qVMsw"
          },
          "user_id" : {
            "type" : "string",
            "example" : "a4a4a3eb0bd89fe8bbeb99f8d2be01"
          }
        }
      },
      "disableData" : {
        "required" : [ "admin", "disabled", "email" ],
        "type" : "object",
        "properties" : {
          "admin" : {
            "type" : "boolean"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "email" : {
            "type" : "string"
          }
        },
        "description" : "The information to be used for disabling a developer"
      },
      "edgeCommand" : {
        "required" : [ "command", "edges" ],
        "type" : "object",
        "properties" : {
          "command" : {
            "type" : "string",
            "description" : "The command the edge is currently using.",
            "example" : "status"
          },
          "edges" : {
            "type" : "string",
            "description" : "Name of edge(s) being used.",
            "example" : ""
          }
        },
        "description" : "The information for the command running on a specific edge."
      },
      "edgeNew" : {
        "required" : [ "system_key", "system_secret", "token" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "local_addr" : {
            "type" : "string"
          },
          "local_port" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          },
          "mac_address" : {
            "type" : "string"
          },
          "public_addr" : {
            "type" : "string"
          },
          "public_port" : {
            "type" : "string"
          },
          "system_key" : {
            "type" : "string"
          },
          "system_secret" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          }
        },
        "description" : "New edge"
      },
      "edgeTemplateModule" : {
        "type" : "object",
        "properties" : {
          "module" : {
            "type" : "string",
            "enum" : [ "trigger", "service", "library" ]
          }
        }
      },
      "edgeTemplateUpdate" : {
        "required" : [ "def_name" ],
        "type" : "object",
        "properties" : {
          "def_module" : {
            "$ref" : "#/components/schemas/edgeTemplateModule"
          },
          "def_name" : {
            "type" : "string"
          }
        }
      },
      "edgeUpdate" : {
        "required" : [ "system_key", "system_secret" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "local_addr" : {
            "type" : "string"
          },
          "local_port" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          },
          "mac_address" : {
            "type" : "string"
          },
          "public_addr" : {
            "type" : "string"
          },
          "public_port" : {
            "type" : "string"
          },
          "system_key" : {
            "type" : "string"
          },
          "system_secret" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          }
        },
        "description" : "Update edge"
      },
      "emailSettings" : {
        "type" : "object",
        "properties" : {
          "encryption_type" : {
            "type" : "string",
            "example" : "STARTTLS"
          },
          "from" : {
            "type" : "string",
            "example" : "example@gmail.com"
          },
          "host" : {
            "type" : "string",
            "example" : "smtp.gmail.com"
          },
          "password" : {
            "type" : "string",
            "example" : "test"
          },
          "port" : {
            "type" : "string",
            "example" : "587"
          },
          "protocol" : {
            "type" : "string",
            "example" : "SMTP"
          },
          "two_factor_message" : {
            "type" : "string",
            "example" : "Please use the code to log in: $CODE"
          },
          "two_factor_subject" : {
            "type" : "string",
            "example" : "Login code"
          },
          "username" : {
            "type" : "string",
            "example" : "example@gmail.com"
          },
          "validation_message" : {
            "type" : "string",
            "example" : "Please validate your email here: $LINK"
          },
          "validation_subject" : {
            "type" : "string",
            "example" : "Email validation"
          }
        },
        "description" : "2FA email communication settings"
      },
      "emailTest" : {
        "type" : "object",
        "properties" : {
          "recipient" : {
            "type" : "string",
            "example" : "example@companyname.com"
          }
        },
        "description" : "2FA email communication test"
      },
      "enabled" : {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "eventDefinition" : {
        "type" : "object",
        "properties" : {
          "def_keys" : {
            "type" : "array",
            "example" : ""
          },
          "def_module" : {
            "type" : "string",
            "example" : "Messaging"
          },
          "def_name" : {
            "type" : "string",
            "example" : "Subscribe"
          },
          "visibility" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "executeWebhook" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "string",
            "example" : "Third party server data"
          }
        },
        "description" : "Data passing through webhooks"
      },
      "externalDB" : {
        "type" : "object",
        "properties" : {
          "credentials" : {
            "$ref" : "#/components/schemas/credentials"
          },
          "dbtype" : {
            "type" : "string",
            "example" : "mysql"
          },
          "id" : {
            "type" : "integer",
            "example" : 5
          },
          "name" : {
            "type" : "string",
            "example" : "mysql_example"
          },
          "system_key" : {
            "type" : "string",
            "example" : "bc91ede40bb993a7babaa801"
          }
        }
      },
      "getCacheResp" : {
        "required" : [ "id", "name", "system_key", "ttl" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "Here goes an example description."
          },
          "id" : {
            "type" : "string",
            "description" : "Unique ID of cache",
            "example" : "54eb0787-50df-4099-b368-c68ea97f1ce2"
          },
          "name" : {
            "type" : "string",
            "example" : "test_cache"
          },
          "system_key" : {
            "type" : "string",
            "example" : "b4d49dd00basfdb3deb4ccbefeb0df01"
          },
          "ttl" : {
            "type" : "integer",
            "example" : 30
          }
        },
        "description" : "The list of Shared Cache returned"
      },
      "getUsers" : {
        "type" : "object",
        "properties" : {
          "creation_date" : {
            "type" : "string",
            "example" : "2019-09-11T18:41:15Z"
          },
          "email" : {
            "type" : "string",
            "example" : "cbman@clearblade.com"
          },
          "user_id" : {
            "type" : "string",
            "example" : "ce81b8dd0bf6fea6cec6d3c19774"
          }
        }
      },
      "getUsersData" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/getUsers"
        }
      },
      "getUsersSuccess" : {
        "type" : "object",
        "properties" : {
          "Data" : {
            "$ref" : "#/components/schemas/getUsersData"
          },
          "Total" : {
            "type" : "integer",
            "example" : 1
          }
        }
      },
      "getWebhook" : {
        "required" : [ "auth_method", "id", "name", "service_name", "system_key", "system_secret" ],
        "type" : "object",
        "properties" : {
          "auth_method" : {
            "type" : "string",
            "example" : "http_basic_auth"
          },
          "description" : {
            "type" : "string",
            "example" : "Webhook to get data"
          },
          "id" : {
            "type" : "string",
            "example" : "f2ca33c4-8bd0-45aa-af4a-da3467b451bc"
          },
          "name" : {
            "type" : "string",
            "example" : "webhook_example"
          },
          "service_name" : {
            "type" : "string",
            "example" : "service_example"
          },
          "system_key" : {
            "type" : "string",
            "example" : "ccafb4cf0bd0dcbcadaccaf9ebba01"
          },
          "system_secret" : {
            "type" : "string",
            "example" : "CCAFB4CF0BBABDDCE3F2F1E6C3E601"
          }
        },
        "description" : "Webhook properties"
      },
      "indexArray" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Column Name",
            "example" : "ExampleColumn"
          },
          "type" : {
            "type" : "string",
            "description" : "Index Type",
            "example" : "Unique Index"
          }
        },
        "description" : "Type choices are unique index and nonunique index"
      },
      "itemInfo" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "8edaedc50bcaf9cd88bce5c6e57a"
          },
          "name" : {
            "type" : "string",
            "example" : "sampleAsset"
          }
        },
        "description" : "Item identification"
      },
      "libdata" : {
        "required" : [ "code", "dependencies", "visibility" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "example" : "function getter(uri){var r=Requests();r.get({'uri':uri},function(err,resp){log(JSON.stringify(resp));});}"
          },
          "dependencies" : {
            "type" : "string",
            "example" : "http,log"
          },
          "visibility" : {
            "type" : "string",
            "example" : "system"
          }
        }
      },
      "messagePublish" : {
        "required" : [ "topic" ],
        "type" : "object",
        "properties" : {
          "body" : {
            "type" : "string",
            "example" : "{\"temperature\":43}"
          },
          "qos" : {
            "type" : "number",
            "example" : 0.0
          },
          "topic" : {
            "type" : "string",
            "example" : "/sensor/111111"
          }
        },
        "description" : "The topic, message body and the qos (0,1 or 2) required to publish a message"
      },
      "msgArray" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/msgTopic"
        }
      },
      "msgTopic" : {
        "type" : "object",
        "properties" : {
          "ip" : {
            "type" : "string",
            "example" : ""
          },
          "payload" : {
            "type" : "string",
            "description" : "The message body of the topic",
            "example" : "Message Body."
          },
          "payloadsize" : {
            "type" : "integer",
            "description" : "Message character count",
            "example" : 50
          },
          "pk" : {
            "type" : "string",
            "example" : "12a38ef9-6d01-4aed-8117-e4464f14ffbc"
          },
          "qos" : {
            "type" : "integer",
            "description" : "Quality of Service (0,1,2)",
            "example" : 0
          },
          "time" : {
            "type" : "integer",
            "description" : "The format is UNIX timestamp.",
            "example" : 1589313683
          },
          "topicid" : {
            "type" : "string",
            "example" : "Topic Name"
          },
          "userid" : {
            "type" : "string",
            "example" : "e291cdc70bf6a4fa3e288c3af01"
          }
        }
      },
      "newcollection" : {
        "required" : [ "appID", "name" ],
        "type" : "object",
        "properties" : {
          "appID" : {
            "type" : "string",
            "description" : "This is the system key",
            "example" : "c0f8e2c50bbeeaf87f5efa2eee301"
          },
          "collectionID" : {
            "type" : "string",
            "example" : "c0f8e2c50bbeeafb87f5efa2eee301"
          },
          "name" : {
            "type" : "string",
            "example" : "newCollection"
          }
        },
        "description" : "The information necessary to create a new collection"
      },
      "newsystem" : {
        "required" : [ "description", "name" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "Here is my new system."
          },
          "name" : {
            "type" : "string",
            "example" : "ExampleSystem"
          }
        },
        "description" : "Info to create a new system"
      },
      "operations" : {
        "type" : "string",
        "example" : "db.collectionName.find()"
      },
      "operationsDB" : {
        "type" : "object",
        "properties" : {
          "operation" : {
            "type" : "object"
          }
        }
      },
      "passdata" : {
        "required" : [ "new_password", "old_password" ],
        "type" : "object",
        "properties" : {
          "new_password" : {
            "type" : "string",
            "example" : "P@ssw0rd"
          },
          "old_password" : {
            "type" : "string",
            "example" : "cl34rbl4d3"
          }
        }
      },
      "permissions" : {
        "type" : "object",
        "properties" : {
          "permissions" : {
            "type" : "integer",
            "example" : 8
          }
        },
        "description" : "Read - 1, Create - 2 , Update - 4 , Delete - 8. Ex: R+C+D = 1+2+8 = 10"
      },
      "platformInfo" : {
        "type" : "object",
        "properties" : {
          "about" : {
            "type" : "object",
            "example" : "ClearBlade Platform"
          },
          "buildId" : {
            "type" : "string",
            "example" : "a66297bca:485"
          },
          "version" : {
            "type" : "string",
            "example" : "9.0.0"
          }
        }
      },
      "portalArray" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/portalSettings"
        }
      },
      "portalSettings" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "object"
          },
          "description" : {
            "type" : "string",
            "example" : "Portal Description."
          },
          "last_updated" : {
            "type" : "string",
            "example" : "03 Aug 20 02:33 UTC"
          },
          "name" : {
            "type" : "string",
            "example" : "ExamplePortal"
          },
          "namespace" : {
            "type" : "string",
            "example" : ""
          },
          "system_key" : {
            "type" : "string",
            "example" : "98a6cbe60bceafcc5d8b4a33b"
          },
          "type" : {
            "type" : "string",
            "example" : "custom_v2"
          }
        }
      },
      "regUser" : {
        "type" : "object",
        "properties" : {
          "creation_date" : {
            "type" : "string",
            "example" : "2019-09-11T18:41:15Z"
          },
          "email" : {
            "type" : "string",
            "example" : "cbman@clearblade.com"
          },
          "expires_at" : {
            "type" : "integer",
            "description" : "The format is UNIX timestamp. If value is -1, then no refresh token is returned",
            "example" : 1589313683
          },
          "options" : {
            "type" : "string",
            "example" : ""
          },
          "refresh_token" : {
            "type" : "string",
            "example" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJhNGE0YTNlYjBiZDg5ZmU4YmV4cCI6MTU4OTc0NTY4MywiaWF0IjoxNTg4ODgxNjgzfQ.K2Ji0HldYtUO0RgednnOq117cnZy-ij-C1k1a8qVMsw"
          },
          "user_id" : {
            "type" : "string",
            "example" : "ce81b8dd0bf6fea6cec6d3c19774"
          },
          "user_token" : {
            "type" : "string",
            "example" : "jt-w5IiOOnhuSp8hJbanB2Tluj_ShXphjAta0_6_mAcUPSbatjFRYr1m5Ojl4skSOZ3txbbkFWArnUnfNA=="
          }
        }
      },
      "regensystem" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "[systemID]"
          }
        },
        "description" : "Contains id of system to generate new keys for"
      },
      "resetPassword" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "example@clearblade.com"
          },
          "new_password" : {
            "type" : "string",
            "example" : "password"
          }
        }
      },
      "retrySync" : {
        "type" : "object",
        "properties" : {
          "asset_class" : {
            "type" : "string",
            "description" : "Asset Type",
            "example" : "services"
          },
          "asset_id" : {
            "type" : "string",
            "example" : "c0f8e2c50bbeeafb87f5efa2eee301"
          },
          "edge" : {
            "type" : "string",
            "description" : "Edge Name",
            "example" : "ExampleEdge"
          },
          "is_collection" : {
            "type" : "boolean"
          },
          "sync_event" : {
            "type" : "integer"
          }
        }
      },
      "roleSettings" : {
        "type" : "object",
        "properties" : {
          "allcollections" : {
            "$ref" : "#/components/schemas/changesInfo"
          },
          "allservices" : {
            "$ref" : "#/components/schemas/permissions"
          },
          "collections" : {
            "$ref" : "#/components/schemas/changesInfo"
          },
          "deployments" : {
            "$ref" : "#/components/schemas/permissions"
          },
          "description" : {
            "type" : "string"
          },
          "devices" : {
            "$ref" : "#/components/schemas/permissions"
          },
          "edges" : {
            "$ref" : "#/components/schemas/changesInfo"
          },
          "msgHistory" : {
            "$ref" : "#/components/schemas/permissions"
          },
          "portals" : {
            "$ref" : "#/components/schemas/changesInfo"
          },
          "roles" : {
            "$ref" : "#/components/schemas/permissions"
          },
          "services" : {
            "$ref" : "#/components/schemas/changesInfo"
          },
          "topics" : {
            "$ref" : "#/components/schemas/changesInfo"
          },
          "triggers" : {
            "$ref" : "#/components/schemas/permissions"
          },
          "users" : {
            "$ref" : "#/components/schemas/permissions"
          }
        },
        "description" : "Assets with permission changes"
      },
      "roles" : {
        "required" : [ "changes", "user" ],
        "type" : "object",
        "properties" : {
          "changes" : {
            "$ref" : "#/components/schemas/changeroles"
          },
          "user" : {
            "type" : "string",
            "example" : "b4d8aaab0bf48e98dacbd78e9e50"
          }
        },
        "description" : "Contains the roles to add or delete for the user"
      },
      "rolesinfo" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "collections" : {
            "type" : "array",
            "example" : ""
          },
          "description" : {
            "type" : "string",
            "example" : ""
          },
          "name" : {
            "type" : "string",
            "example" : "Administrator"
          },
          "services" : {
            "type" : "array",
            "example" : ""
          },
          "topics" : {
            "type" : "array",
            "example" : ""
          }
        },
        "description" : "Information of the roles"
      },
      "rolespass" : {
        "required" : [ "changes", "user" ],
        "type" : "object",
        "properties" : {
          "changes" : {
            "$ref" : "#/components/schemas/changes"
          },
          "user" : {
            "type" : "string",
            "example" : "b4d8aaab0bf48e98dacbd78e9e50"
          }
        },
        "description" : "Contains the roles to add or delete for the user"
      },
      "rotatingDeviceKeys" : {
        "type" : "string",
        "example" : "��W&\u001A�Kw��"
      },
      "serviceUpdate" : {
        "required" : [ "auto_balance", "auto_restart", "code", "concurrency", "current_version", "logging_enabled", "name" ],
        "type" : "object",
        "properties" : {
          "auto_balance" : {
            "type" : "boolean",
            "description" : "If concurrency > 0 then auto_balance can be set to true if needed"
          },
          "auto_restart" : {
            "type" : "boolean",
            "description" : "If execution_timeout = -1 => Stream Service then auto_restart can be set to true if needed"
          },
          "code" : {
            "type" : "string",
            "example" : "function serviceName(req,resp){resp.success(“success”);}"
          },
          "concurrency" : {
            "type" : "integer",
            "example" : 0
          },
          "current_version" : {
            "type" : "integer",
            "example" : 4
          },
          "dependencies" : {
            "type" : "string",
            "example" : "log"
          },
          "execution_timeout" : {
            "type" : "integer",
            "example" : 60
          },
          "logging_enabled" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string",
            "example" : "serviceName"
          },
          "parameters" : {
            "type" : "array",
            "example" : ""
          },
          "run_user" : {
            "type" : "string",
            "description" : "Uses user_id.",
            "example" : "e8b7f0cb0bdccdb7a8a7c78cdfcb01"
          },
          "timers" : {
            "type" : "array",
            "example" : ""
          },
          "triggers" : {
            "type" : "array",
            "example" : ""
          }
        }
      },
      "systemInfo" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/analyticItems"
        }
      },
      "systemSettings" : {
        "type" : "object",
        "properties" : {
          "Dev" : {
            "type" : "string",
            "description" : "Developer Id for the owner of the system",
            "example" : "92f8dbbb0bccb3fff4be5cdb601"
          },
          "appId" : {
            "type" : "string",
            "description" : "system key",
            "example" : "a6e0f8e20bbefcec789de6b8f4cf01"
          },
          "appSecret" : {
            "type" : "string",
            "description" : "system secret",
            "example" : "A6E0F8E20BDEB0C2838EF2B6D09801"
          },
          "auth_service" : {
            "type" : "string",
            "description" : "Configure the system to have all authentication requests go through a specific Code Service.",
            "example" : ""
          },
          "description" : {
            "type" : "string",
            "example" : "Here is my new system."
          },
          "name" : {
            "type" : "string",
            "example" : "ExampleSystem"
          },
          "reg_service" : {
            "type" : "string",
            "description" : "Configure the system to have all registration requests go through a specific Code Service.",
            "example" : ""
          },
          "registration" : {
            "type" : "string",
            "example" : ""
          },
          "token_ttl" : {
            "type" : "string",
            "description" : "ttl for developer tokens in seconds. Min - 86400   (1 day), Max- 2592000 (30 days), Default - 432000 Infinite - -1",
            "example" : "432000"
          },
          "token_ttl_anon" : {
            "type" : "integer",
            "description" : "ttl for anonymous tokens in seconds. Min - 3600   (1 hour), Max- 7776000 (90 days), Default - 432000 (5 days) Infinite - -1",
            "example" : 432000
          },
          "token_ttl_device" : {
            "type" : "string",
            "description" : "ttl for device tokens in seconds. Min - 3600   (1 hour), Max- 7776000 (90 days), Default - 432000 (5 days) Infinite - -1",
            "example" : "432000"
          },
          "token_ttl_user" : {
            "type" : "string",
            "description" : "ttl for user tokens in seconds. Min - 3600   (1 hour), Max- 7776000 (90 days), Default - 432000 (5 days) Infinite - -1",
            "example" : "432000"
          }
        },
        "description" : "System info"
      },
      "timerArray" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/timerList"
        }
      },
      "timerList" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "This timer is 60 seconds"
          },
          "frequency" : {
            "type" : "integer",
            "description" : "Frequency (in seconds) between two consecutive invocations of a timer handler",
            "example" : 60
          },
          "name" : {
            "type" : "string",
            "example" : "Timer_Example"
          },
          "namespace" : {
            "type" : "string",
            "example" : ""
          },
          "repeats" : {
            "type" : "integer",
            "description" : "The number of times a timer handler is invoked. To invoke the handler indefinitely set 'repeats = -1'",
            "example" : -1
          },
          "service_name" : {
            "type" : "string",
            "example" : "TimerHandler"
          },
          "start_time" : {
            "type" : "string",
            "example" : "2017-07-03T19:52:41.693Z"
          },
          "system_key" : {
            "type" : "string",
            "example" : "ccafb4cf0bd0dcbcadaccaf9ebba01"
          },
          "system_secret" : {
            "type" : "string",
            "example" : "CCAFB4CF0BBABDDCE3F2F1E6C3E601"
          },
          "timer_key" : {
            "type" : "string",
            "example" : "c0f8e2c50bbeeafb87f5efa2eee301 :: timer_name"
          },
          "user_id" : {
            "type" : "string",
            "example" : "c6b4cf0b8ca5b7c3fad793cb12"
          },
          "user_token" : {
            "type" : "string",
            "example" : "jt-w5IiOOnhuSp8hJbanB2Tluj_ShXphjAta0_6_mAcUPSbatjFRYr1m5Ojl4skSOZ3txbbkFWArnUnfNA=="
          }
        }
      },
      "timerSuccess" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "My 10 second timer"
          },
          "frequency" : {
            "type" : "integer",
            "example" : 10
          },
          "name" : {
            "type" : "string",
            "example" : "tenSecondTimer"
          },
          "namespace" : {
            "type" : "string",
            "example" : "tenSecond"
          },
          "repeats" : {
            "type" : "integer",
            "example" : 20
          },
          "service_name" : {
            "type" : "string",
            "example" : "getTemps"
          },
          "start_time" : {
            "type" : "string",
            "example" : "2017-07-03T19:52:41.693Z"
          },
          "system_key" : {
            "type" : "string",
            "example" : "828dead00b84d78ed580c5faa7a101"
          },
          "system_secret" : {
            "type" : "string",
            "example" : "828DEAD00BD6F9E9AF8FD2F3D817"
          },
          "timer_key" : {
            "type" : "string",
            "example" : "828dead00b84d78ed580c5faa7a101::tenSecondTimer"
          },
          "user_id" : {
            "type" : "string",
            "example" : "92f8dbbb0bccb3fff4b2e0e5cdb601"
          },
          "user_token" : {
            "type" : "string",
            "example" : "jt-w5IiOOnhuSp8hJbanB2Tluj_ShXphjAta0_6_mAcUPSbatjFRYr1m5Ojl4skSOZ3txbbkFWArnUnfNA=="
          }
        },
        "description" : "Success response for timer"
      },
      "timerdata" : {
        "required" : [ "disabled", "frequency", "name", "repeats", "service_name" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Information about the timer",
            "example" : "My 10 second timer"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Enable or disable timer",
            "example" : true
          },
          "frequency" : {
            "type" : "integer",
            "description" : "Frequency (in seconds) between two consecutive invocations of a timer handler",
            "example" : 10
          },
          "name" : {
            "type" : "string",
            "description" : "Timer label",
            "example" : "tenSecondTimer"
          },
          "repeats" : {
            "type" : "integer",
            "description" : "The number of times a timer handler is invoked. To invoke the handler indefinitely set 'repeats = -1'",
            "example" : 20
          },
          "service_name" : {
            "type" : "string",
            "description" : "The handler service invoked by the timer",
            "example" : "getTemps"
          }
        }
      },
      "triggerArray" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/triggerList"
        }
      },
      "triggerList" : {
        "type" : "object",
        "properties" : {
          "event_definition" : {
            "$ref" : "#/components/schemas/eventDefinition"
          },
          "key_value_pairs" : {
            "type" : "object",
            "example" : {
              "topic" : "/CB/sensors/#"
            }
          },
          "name" : {
            "type" : "string",
            "example" : "Message_Trigger"
          },
          "namespace" : {
            "type" : "string",
            "example" : ""
          },
          "service_name" : {
            "type" : "string",
            "example" : "TriggerHandler"
          },
          "system_key" : {
            "type" : "string",
            "example" : "ccafb4cf0bd0dcbcadaccaf9ebba01"
          },
          "system_secret" : {
            "type" : "string",
            "example" : "CCAFB4CF0BBABDDCE3F2F1E6C3E601"
          }
        }
      },
      "triggerdata" : {
        "required" : [ "def_module", "def_name", "disabled", "key_value_pairs", "service_name" ],
        "type" : "object",
        "properties" : {
          "def_module" : {
            "type" : "string",
            "example" : "Messaging"
          },
          "def_name" : {
            "type" : "string",
            "example" : "Publish"
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Enable or disable trigger",
            "example" : true
          },
          "key_value_pairs" : {
            "$ref" : "#/components/schemas/KVPs"
          },
          "service_name" : {
            "type" : "string",
            "example" : "updateTemps"
          }
        }
      },
      "updateCache" : {
        "required" : [ "ttl" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "ttl" : {
            "type" : "integer",
            "example" : 30
          }
        },
        "description" : "the information updated in a cache"
      },
      "updateCollection" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "addColumn" : {
            "$ref" : "#/components/schemas/addColumnInfo"
          },
          "id" : {
            "type" : "string",
            "description" : "This is the collection ID",
            "example" : "c0f8e2c50bbeeafb87f5efa2eee301"
          }
        },
        "description" : "The information necessary to create a new column in a collection. There is also a deleteColumn option using the same info as addColumn"
      },
      "updateDeployment" : {
        "required" : [ "assets", "edges" ],
        "type" : "object",
        "properties" : {
          "assets" : {
            "type" : "object",
            "properties" : {
              "add" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Assets"
                }
              },
              "remove" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Assets"
                }
              }
            },
            "description" : "Assets to be added and removed from deployment"
          },
          "edges" : {
            "type" : "object",
            "properties" : {
              "adds" : {
                "type" : "array",
                "description" : "Names of edges to be added to the deployment",
                "example" : [ "edge1", "edge2", "edge3" ],
                "items" : {
                  "type" : "string"
                }
              },
              "removes" : {
                "type" : "array",
                "description" : "Names of edges to be removed from the deployment",
                "example" : [ "edge5", "edge6", "edge7" ],
                "items" : {
                  "type" : "string"
                }
              }
            },
            "description" : "Edges to be added and removed from deployment"
          }
        },
        "description" : "the information used to update a deployment"
      },
      "updateOwner" : {
        "required" : [ "change", "owner" ],
        "type" : "object",
        "properties" : {
          "change" : {
            "type" : "object"
          },
          "owner" : {
            "type" : "string",
            "example" : "owner@clearblade.com"
          }
        },
        "description" : "New system owner email"
      },
      "updatedata" : {
        "required" : [ "code", "dependencies", "description" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "example" : "function rand(){log('rolling die'); return 3;}"
          },
          "dependencies" : {
            "type" : "string",
            "example" : "log"
          },
          "description" : {
            "type" : "string",
            "example" : "Random number generator"
          }
        }
      },
      "userCheck" : {
        "type" : "object",
        "properties" : {
          "is_authenticated" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "userSession" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/userSessionInfo"
        }
      },
      "userSessionInfo" : {
        "type" : "object",
        "properties" : {
          "issued" : {
            "type" : "integer",
            "example" : 1587659826
          },
          "user_id" : {
            "type" : "string",
            "example" : "9aeeace602d2a6aaead2f62a"
          }
        }
      },
      "userdata" : {
        "type" : "object",
        "properties" : {
          "column_name" : {
            "type" : "string",
            "example" : "column_value"
          }
        }
      },
      "userinfo" : {
        "type" : "object",
        "properties" : {
          "admin" : {
            "type" : "boolean",
            "example" : true
          },
          "creation_date" : {
            "type" : "integer",
            "example" : 1551475825
          },
          "email" : {
            "type" : "string",
            "example" : "example@clearblade.com"
          },
          "email_validated" : {
            "type" : "boolean",
            "example" : true
          },
          "fname" : {
            "type" : "string",
            "example" : "FirstName"
          },
          "last_login" : {
            "type" : "integer",
            "example" : 1551475825
          },
          "lname" : {
            "type" : "string",
            "example" : "LastName"
          },
          "org" : {
            "type" : "string",
            "example" : "CompanyName"
          },
          "phone" : {
            "type" : "string",
            "example" : "+15120000000"
          },
          "phone_validated" : {
            "type" : "boolean",
            "example" : true
          },
          "two_factor_enabled" : {
            "type" : "boolean",
            "example" : true
          },
          "two_factor_enabled_instance\"" : {
            "type" : "boolean",
            "example" : true
          },
          "two_factor_method" : {
            "type" : "string",
            "example" : "email"
          },
          "userid" : {
            "type" : "string",
            "example" : "e291cdc70be288c3af01"
          }
        },
        "description" : "User information"
      },
      "userlogin" : {
        "required" : [ "email", "password" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "helpme@clearblade.com"
          },
          "password" : {
            "type" : "string",
            "example" : "c13rb1ad3ru13z"
          }
        },
        "description" : "user login information"
      },
      "userregdata" : {
        "required" : [ "email", "password" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "User's email.",
            "example" : "cbman@clearblade.com"
          },
          "password" : {
            "type" : "string",
            "description" : "User's password.",
            "example" : "cl34rbl4d3"
          }
        },
        "description" : "The information to be used for user registration. Custom fields may be added."
      },
      "users" : {
        "type" : "object",
        "properties" : {
          "PAGENUM" : {
            "type" : "integer",
            "example" : 1
          },
          "PAGESIZE" : {
            "type" : "integer"
          },
          "SORT" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SortUser"
            }
          }
        }
      },
      "validation" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "example" : "email"
          }
        }
      },
      "webhookCreate" : {
        "required" : [ "auth_method", "name", "service_name" ],
        "type" : "object",
        "properties" : {
          "auth_method" : {
            "type" : "string",
            "example" : "http_basic_auth"
          },
          "description" : {
            "type" : "string",
            "example" : "Create a webhook"
          },
          "name" : {
            "type" : "string",
            "example" : "webhook_example"
          },
          "service_name" : {
            "type" : "string",
            "example" : "service_example"
          }
        },
        "description" : "Webhook creation properties"
      },
      "webhookResp" : {
        "type" : "array",
        "description" : "list of webhooks and properties",
        "items" : {
          "$ref" : "#/components/schemas/getWebhook"
        }
      },
      "webhookUpdate" : {
        "required" : [ "auth_method" ],
        "type" : "object",
        "properties" : {
          "auth_method" : {
            "type" : "string",
            "example" : "http_basic_auth"
          },
          "description" : {
            "type" : "string",
            "example" : "Create a webhook"
          }
        },
        "description" : "Webhook update properties"
      }
    }
  }
}