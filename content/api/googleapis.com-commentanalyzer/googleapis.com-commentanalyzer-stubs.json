{
  "mappings" : [ {
    "id" : "6484382a-5dd4-499b-9218-e77670800180",
    "name" : "Suggest comment scores as training data.",
    "request" : {
      "urlPath" : "/v1alpha1/comments:suggestscore",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"requestedLanguages\" : [ \"s2nd7adi4e6nof8ww2f0ym1viym4kgn37h6706uuxcqldc9ni93zrerqkhkzz6zp5mcbinp\", \"jsxtbc5rbu3ige73sf8t3023d5guux7gopuhwxksgjssll3qpry6oa2x16c45jjsbq5n2mbckhsoor5bg7aj9gljv2508xep6l8gm52295qwln2571hvht1ijb9c8j4cn8den9435f62tw96wmoo8dvxtfai5eowogiayiey5zw4vl8y16qpz\", \"cs1ke14b8f9hf8novz8jwvx81oy2sytazo2mnx27z7tfwhv7fve7b0yc6g5fj6ecrd162u6ybosv9g5pwd0rz5a3ajt0r5bjwqg7j3zn52nqp0malyjmohx7qe8e60sn93cxge6ecaqwivsi7pmdab3iqgct6y50a40y0hd3\", \"idwelnmuq9mgxl7p0wgnoljke8oi37ey3saxiwf5x0vginc4agx41u462d8quvjqahdwwpuuaia13m4egfse7opc2gcl6vyrcoqv6625be8ng72jeizxt5lewa\", \"rwbca7rj26qxr7ar8sb2t8pkxmd8jk4y8vt0rakxb9hr2puqf1d3avym9t1e7c9cp40wxmvsybudvsm37rixyewz07pyicsmiglanok0y8ivxa\" ],\n  \"detectedLanguages\" : [ \"obhz6is6n1z2vwqvswzoxpz71g9d62nbh0juu3l47ik0jkaoq4ivaj111vhqs2nv53rt8biyh5kimqgpq7h6vhfox3yu\", \"8aiklfvhj7th9hpqdt2ycg0sz0pcbtu6k2dzenji1dty39lh4q3qmppdn7pjx25xsuddfvef4v2j295tmpvru4w3v\", \"ad2qaj1inq5027d2fjg59a\", \"n9aaqoqrvjza8lmrosgj3wq6ytabq1tu4wzcgh3q7mia0hnihltnss5w8yexn8bp3gw4g5dmujpbq3ib3a73gkjzpkk7bkldhugsp6t787v2yhoa2emhq0tcr3kl4gbw1p2uvi9inlq3gixw529ehwmhyaquduipcqwcm8gxda8ahezb1h\", \"z35tfns6ysmuys039v1okghtza32qwadtmogswqx92wqw2789q4ktdjuzht2qnj1165oabypkbuj3jzd2s1i136y5wo1u7dmccx11o4uy5puhburg66zsski54apacmzxvgze3vx0bnu9rcw208n7i513sxg2v9hx0b23trtibd9adkvh1nd4w1figr77ebq87ox\" ],\n  \"clientToken\" : \"u2hwc8r08k69d\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6484382a-5dd4-499b-9218-e77670800180",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:41.416349Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "commentanalyzer.comments.suggestscore",
          "schema" : {
            "description" : "The comment score suggestion response message.",
            "properties" : {
              "clientToken" : {
                "description" : "Same token from the original SuggestCommentScoreRequest.",
                "type" : "string"
              },
              "detectedLanguages" : {
                "description" : "The list of languages detected from the comment text.",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              },
              "requestedLanguages" : {
                "description" : "The list of languages provided in the request.",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "23c77176-da0c-4593-8a73-6d15a34d73c2",
    "name" : "Analyzes the provided text and returns scores for requested attributes.",
    "request" : {
      "urlPath" : "/v1alpha1/comments:analyze",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"detectedLanguages\" : [ \"gs7ml11lizvp2r4wsoki56p1yhcd6i8yl4qmw92c24l3e7wpflh3\", \"5r30c55qf493xrayt9x7norbi8kam4ssbkwls7dq33c2qj1dvxm5pjciapxsdsx1dhuc90omkj3bxg0pfxfyafic5eve5fjlo7zk84xq7m5viuz\", \"dz1turzkoi0tyhq53o1eyr9qcqzt3ri\", \"rh18o8re1\", \"i4wkg3tmzhntz7agb7lc6ny52j7o1s9y1klj1swoqln68y25dnml0kj\", \"1giyxztxgq3tutu0u6r767183tyevq7jjno94kaeyw54nju5lwqon5mv7c1kp8kkdvh43sf14z768v0gf8xiph3zxy3l3du3q80nqvfy7d5pvypfhbt99au\" ],\n  \"languages\" : [ \"w5moh37vsubz73zis1qcit4qkruo4w1fhbmzsawsdpdo2qgxyad1zwkgeojhju2694ce0uwsa\", \"3gi9p9x8i7wo0mkgats2dlrwfry05k4v13gdy59g4p67pf56afyrkhdn7b8z5v0msx3hl9mu0c9mhlcmeozpb5mw862n5cnsklya1ogt6cq8baxw8ixnaj6low2tqj\", \"qss7ln2130uk49sdgb10xt3jzojz9lnixjecukstefq4ilxii5g1x\", \"sdwdnk6k4r\", \"mxm8\", \"w6oairbmyjevp5yu7ghvckwaryqkay9usrfk27er6c0t475m8rzdwq84dxghm2md4n03h88vd6exk4kmvsdhvvx3gprpad8ny5cmfigyx2374aryvcjtqb6nuvrlbvoukheb9dnsliz6ojpi\" ],\n  \"clientToken\" : \"qan9io8ze0xqvfoe3aok7j6ya5w44x7ywsynknzw8q8f24qs9lsxv6rnhansn91cyxjxwa2amhr57ia885ntrimzzcqt8pnbf6ys19htkscon82dsjy0gk36noydpbjlg2yb5opxyz8ann0l2ih1ksq0prrg74nfc\",\n  \"attributeScores\" : { }\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "23c77176-da0c-4593-8a73-6d15a34d73c2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:41.416186Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "commentanalyzer.comments.analyze",
          "schema" : {
            "description" : "The comment analysis response message.",
            "properties" : {
              "attributeScores" : {
                "additionalProperties" : {
                  "$ref" : "#/components/schemas/AttributeScores"
                },
                "description" : "Scores for the requested attributes. The map keys are attribute names (same as the requested_attribute field in AnalyzeCommentRequest, for example \"ATTACK_ON_AUTHOR\", \"INFLAMMATORY\", etc).",
                "type" : "object"
              },
              "clientToken" : {
                "description" : "Same token from the original AnalyzeCommentRequest.",
                "type" : "string"
              },
              "detectedLanguages" : {
                "description" : "Contains the languages detected from the text content, sorted in order of likelihood.",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              },
              "languages" : {
                "description" : "The language(s) used by CommentAnalyzer service to choose which Model to use when analyzing the comment. Might better be called \"effective_languages\". The logic used to make the choice is as follows: if !Request.languages.empty() effective_languages = Request.languages else effective_languages = detected_languages[0]",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  } ]
}