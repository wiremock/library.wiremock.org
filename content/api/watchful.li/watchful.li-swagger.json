{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "watchful.li",
    "version" : "1.0.0"
  },
  "externalDocs" : {
    "url" : "https://watchful.li/faqs/tools/watchful-rest-api.html"
  },
  "servers" : [ {
    "url" : "https://watchful.li/api/v1"
  } ],
  "tags" : [ {
    "name" : "audits",
    "description" : "Operations about audits"
  }, {
    "name" : "extensions",
    "description" : "Operations about extensions"
  }, {
    "name" : "feedbacks",
    "description" : "Operations about feedbacks"
  }, {
    "name" : "logs",
    "description" : "Operations about logs"
  }, {
    "name" : "reports",
    "description" : "Create reports in PDF"
  }, {
    "name" : "sites",
    "description" : "Operations about sites"
  }, {
    "name" : "ssousers",
    "description" : "Operations about SsoUser"
  }, {
    "name" : "tags",
    "description" : "Operations about tags"
  } ],
  "paths" : {
    "/audits" : {
      "get" : {
        "tags" : [ "audits" ],
        "summary" : "Get a list of audits",
        "description" : "Returns a list of audits",
        "operationId" : "getAudits",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of object to return (max 100, default 25)",
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "limitstart",
          "in" : "query",
          "description" : "Start of the return (default 0)",
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audit"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audit"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audit"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          }
        }
      }
    },
    "/audits/metadata" : {
      "get" : {
        "tags" : [ "audits" ],
        "summary" : "Get the list of fields",
        "description" : "Returns a list of fields",
        "operationId" : "getFieldsAudits",
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/audits/{id}" : {
      "get" : {
        "tags" : [ "audits" ],
        "summary" : "Find audit by ID",
        "description" : "Returns a audit based on ID",
        "operationId" : "getAuditById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of audit that needs to be fetched",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields to return separate by comas: name,id",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audit"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audit"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audit"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID"
          },
          "403" : {
            "description" : "Invalid API Key"
          }
        }
      },
      "delete" : {
        "tags" : [ "audits" ],
        "summary" : "Delete a specific audit",
        "description" : "Delete a specific audit",
        "operationId" : "deleteAuditById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of audit that needs to be deleted",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Audit correctly deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/extensions" : {
      "get" : {
        "tags" : [ "extensions" ],
        "summary" : "Get a list Extensions",
        "description" : "Returns a list Extensions",
        "operationId" : "getExtensions",
        "parameters" : [ {
          "name" : "ext_name",
          "in" : "query",
          "description" : "Do a 'LIKE' search, you can also use '%'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "siteids",
          "in" : "query",
          "description" : "List of sites id separated by comma",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ext_prefix",
          "in" : "query",
          "description" : "Do a 'LIKE' search, you can also use '%'. technical name of the extension com_xxxx",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Do a 'LIKE' search, you can also use '%'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vUpdate",
          "in" : "query",
          "description" : "update available for this extension",
          "schema" : {
            "type" : "integer",
            "enum" : [ 1, 0 ]
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields to return separate by comas: name,id",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of object to return (max 100, default 25)",
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "limitstart",
          "in" : "query",
          "description" : "Start of the return (default 0)",
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Extension"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Extension"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Extension"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid"
          }
        }
      }
    },
    "/extensions/metadata" : {
      "get" : {
        "tags" : [ "extensions" ],
        "summary" : "Get the list of fields",
        "description" : "Returns a list of fields",
        "operationId" : "getFieldsExtensions",
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/extensions/{id}/ignore" : {
      "post" : {
        "tags" : [ "extensions" ],
        "summary" : "Set 'ignore updates' for a given extension / site_id",
        "description" : "Set 'ignore updates' for a given extension / site_id",
        "operationId" : "ignoreExtensionUpdate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the extension",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Extension successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "Update not found for the given extension"
          }
        }
      }
    },
    "/extensions/{id}/unignore" : {
      "post" : {
        "tags" : [ "extensions" ],
        "summary" : "Remove 'ignore updates' for a given extension",
        "description" : "Remove 'ignore updates' for a given extension",
        "operationId" : "unignoreExtensionUpdate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the extension",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Extension successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "Update not found for the given extension"
          }
        }
      }
    },
    "/extensions/{id}/update" : {
      "post" : {
        "tags" : [ "extensions" ],
        "summary" : "Update the extension on the remote site",
        "description" : "Update the extension on the remote site",
        "operationId" : "updateExtension",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the extension",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Extension successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "Update not found for the given extension"
          }
        }
      }
    },
    "/feedbacks" : {
      "get" : {
        "tags" : [ "feedbacks" ],
        "summary" : "Get feedbacks",
        "description" : "Returns a list of feedbacks",
        "operationId" : "getFeedbacks",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields to return separate by comas (es. name,id)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Feedback"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Feedback"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Feedback"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          }
        }
      },
      "post" : {
        "tags" : [ "feedbacks" ],
        "summary" : "Create a feedback",
        "description" : "Create a feedback",
        "operationId" : "createFeedbacks",
        "requestBody" : {
          "description" : "JSON object Feedback",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/Feedback"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audit"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audit"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audit"
                }
              }
            }
          },
          "201" : {
            "description" : "Saved successfully"
          },
          "400" : {
            "description" : "Invalid data"
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Not saved"
          }
        }
      }
    },
    "/feedbacks/metadata" : {
      "get" : {
        "tags" : [ "feedbacks" ],
        "summary" : "Get the list of fields",
        "description" : "Returns a list of fields",
        "operationId" : "getFieldsFeedbacks",
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/logs" : {
      "get" : {
        "tags" : [ "logs" ],
        "summary" : "Get a list of logs",
        "description" : "Returns a list of logs",
        "parameters" : [ {
          "name" : "log_type",
          "in" : "query",
          "description" : "Type of the log",
          "schema" : {
            "type" : "string",
            "enum" : [ "", "plugin_sends_error", "curlerror", "modified_file", "word_not_in_homepage", "file_not_exists", "update_available", "new_extension", "deleted_extension", "extension_not_saved", "modified_value_files", "custom" ]
          }
        }, {
          "name" : "log_entry",
          "in" : "query",
          "description" : "Do a 'LIKE' search, you can also use '%'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Logs after this date, format YYYY-MM-DD HH:MM:SS",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "Logs before this date, format YYYY-MM-DD HH:MM:SS",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields to return separate by comas: name,id",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of object to return (max 100, default 25)",
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "limitstart",
          "in" : "query",
          "description" : "Start of the return (default 0)",
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Log"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Log"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Log"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          }
        }
      }
    },
    "/logs/export" : {
      "get" : {
        "tags" : [ "logs" ],
        "summary" : "Get a CSV or PDF file contain the list of logs",
        "description" : "Returns a file contain the list of logs",
        "operationId" : "getExportLogs",
        "parameters" : [ {
          "name" : "format",
          "in" : "query",
          "description" : "Format of exported file (PDF or CSV)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "csv", "pdf" ]
          }
        }, {
          "name" : "site",
          "in" : "query",
          "description" : "Site id of the log",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "filter_type",
          "in" : "query",
          "description" : "Type of the log",
          "schema" : {
            "type" : "string",
            "enum" : [ "", "plugin_sends_error", "curlerror", "modified_file", "word_not_in_homepage", "file_not_exists", "update_available", "new_extension", "deleted_extension", "extension_not_saved", "modified_value_files", "custom" ]
          }
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Do a 'LIKE' search, you can also use '%'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startdate",
          "in" : "query",
          "description" : "Logs after this date, format YYYY-MM-DD HH:MM:SS",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "enddate",
          "in" : "query",
          "description" : "Logs before this date, format YYYY-MM-DD HH:MM:SS",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of object to return (max 100, default 25)",
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "startid",
          "in" : "query",
          "description" : "Start of the return (default 0)",
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          },
          "403" : {
            "description" : "Invalid API Key"
          }
        }
      }
    },
    "/logs/metadata" : {
      "get" : {
        "tags" : [ "logs" ],
        "summary" : "Get the list of fields",
        "description" : "Returns a list of fields",
        "operationId" : "getFieldsLogs",
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/logs/types" : {
      "get" : {
        "tags" : [ "logs" ],
        "summary" : "Get the list of log types",
        "description" : "Returns a list of log types",
        "operationId" : "getTypesLogs",
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/logs/{id}" : {
      "delete" : {
        "tags" : [ "logs" ],
        "summary" : "Delete a specific log",
        "description" : "Delete a specific log",
        "operationId" : "deleteLogById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of log that needs to be deleted",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Log correctly deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/packages" : {
      "post" : {
        "responses" : {
          "default" : {
            "description" : "No description"
          }
        }
      }
    },
    "/reports/sites/{id}" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "Returns a PDF report for a specific site",
        "description" : "Returns a PDF report based on a site ID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID that needs to be fetched",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Start of the report, format YYYY-MM-DD, default today-30day ",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "End of the report, format YYYY-MM-DD, default today",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reports",
          "in" : "query",
          "description" : "Type of reports separate by comas: Ga,Logs,Uptime",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "log_type",
          "in" : "query",
          "description" : "Type of the log to show in the report",
          "schema" : {
            "type" : "string",
            "enum" : [ "", "plugin_sends_error", "curlerror", "modified_file", "word_not_in_homepage", "file_not_exists", "update_available", "new_extension", "deleted_extension", "extension_not_saved", "modified_value_files" ]
          }
        }, {
          "name" : "compare",
          "in" : "query",
          "description" : "Define if you want show previous values in Google Analytics graph",
          "schema" : {
            "type" : "integer",
            "enum" : [ 0, 1 ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/pdf" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Reports"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/reports/tags/{id}" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "Find sites by ID",
        "description" : "Returns a report based on a site ID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID that needs to be fetched",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Start of the report, format YYYY-MM-DD, default today-30day ",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "End of the report, format YYYY-MM-DD, default today",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reports",
          "in" : "query",
          "description" : "Type of reports separate by comas: Ga,Logs,Uptime",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "log_type",
          "in" : "query",
          "description" : "Type of the log to show in the report",
          "schema" : {
            "type" : "string",
            "enum" : [ "", "plugin_sends_error", "curlerror", "modified_file", "word_not_in_homepage", "file_not_exists", "update_available", "new_extension", "deleted_extension", "extension_not_saved", "modified_value_files" ]
          }
        }, {
          "name" : "compare",
          "in" : "query",
          "description" : "Define if you want show previous values in Google Analytics graph",
          "schema" : {
            "type" : "integer",
            "enum" : [ 0, 1 ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/pdf" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Reports"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/sites" : {
      "get" : {
        "tags" : [ "sites" ],
        "summary" : "Get a list of Sites",
        "description" : "Returns a list of Sites",
        "operationId" : "getSites",
        "parameters" : [ {
          "name" : "siteids",
          "in" : "query",
          "description" : "List of sites id separated by comma",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Site name. Do a 'LIKE' search, you can also use '%'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "access_url",
          "in" : "query",
          "description" : "Access URL. Do a 'LIKE' search, you can also use '%'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "j_version",
          "in" : "query",
          "description" : "Joomla version. Do a 'LIKE' search, you can also use '%'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ip",
          "in" : "query",
          "description" : "Ip address. Do a 'LIKE' search, you can also use '%'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "jUpdate",
          "in" : "query",
          "description" : "Joomla core update status (1: update required, 0: update not required)",
          "schema" : {
            "type" : "integer",
            "enum" : [ 1, 0 ]
          }
        }, {
          "name" : "canUpdate",
          "in" : "query",
          "description" : "canUpdate",
          "schema" : {
            "type" : "integer",
            "enum" : [ 1, 0 ]
          }
        }, {
          "name" : "published",
          "in" : "query",
          "description" : "Is published",
          "schema" : {
            "type" : "integer",
            "enum" : [ 1, 0 ]
          }
        }, {
          "name" : "error",
          "in" : "query",
          "description" : "Has errors",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "nbUpdates",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "up",
          "in" : "query",
          "description" : "Is online",
          "schema" : {
            "type" : "integer",
            "enum" : [ 1, 0 ]
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields to return separated by commas (e.g. name,id)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of objects to return (max 100, default 25)",
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "limitstart",
          "in" : "query",
          "description" : "Start of the return (default 0)",
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      },
      "post" : {
        "tags" : [ "sites" ],
        "summary" : "Create a site",
        "description" : "Create a site",
        "operationId" : "createSite",
        "requestBody" : {
          "description" : "JSON object Site",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostSite"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              }
            }
          },
          "201" : {
            "description" : "Saved successfully"
          },
          "400" : {
            "description" : "Invalid data"
          },
          "403" : {
            "description" : "Not allowed to add sites"
          },
          "404" : {
            "description" : "Not saved"
          }
        }
      }
    },
    "/sites/metadata" : {
      "get" : {
        "tags" : [ "sites" ],
        "summary" : "Get the list of fields",
        "description" : "Returns a list of fields",
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/sites/{id}" : {
      "get" : {
        "tags" : [ "sites" ],
        "summary" : "Find sites by ID",
        "description" : "Return a site based on ID",
        "operationId" : "getSiteById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID that needs to be fetched",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields to return separate by comas: name,id",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      },
      "put" : {
        "tags" : [ "sites" ],
        "summary" : "Update a site",
        "description" : "Update a site",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website that needs to be update",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "JSON object Site",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostSite"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data"
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "sites" ],
        "summary" : "Delete a specific Site",
        "description" : "Delete a specific Site",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Site that needs to be deleted",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deleted successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/sites/{id}/audits" : {
      "get" : {
        "tags" : [ "sites" ],
        "summary" : "Return audits for a specific website",
        "description" : "Return audits for a specific website",
        "operationId" : "getSiteAudits",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields to return separate by comas: name,id",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of object to return (max 100, default 25)",
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "limitstart",
          "in" : "query",
          "description" : "Start of the return (default 0)",
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "ORDER by this field",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audits"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audits"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audits"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      },
      "post" : {
        "tags" : [ "sites" ],
        "summary" : "Create an audit for the site",
        "description" : "Create an audit for the site",
        "operationId" : "createAudits",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audit"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audit"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audit"
                }
              }
            }
          },
          "201" : {
            "description" : "Saved successfully"
          },
          "400" : {
            "description" : "Invalid data"
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Not saved"
          }
        }
      }
    },
    "/sites/{id}/backupnow" : {
      "post" : {
        "tags" : [ "sites" ],
        "summary" : "Add the site to the backup queue",
        "description" : "Add the site to the backup queue",
        "operationId" : "addSiteToBackupQueue",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/sites/{id}/backupprofiles" : {
      "get" : {
        "tags" : [ "sites" ],
        "summary" : "Return backup profile",
        "description" : "Return backup profile",
        "operationId" : "getBackupProfiles",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/sites/{id}/backups" : {
      "get" : {
        "tags" : [ "sites" ],
        "summary" : "List of latest backups",
        "description" : "List of latest backups",
        "operationId" : "getListBackups",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/sites/{id}/backupstart" : {
      "post" : {
        "tags" : [ "sites" ],
        "summary" : "Start a remote backup for the site",
        "description" : "Start a remote backup for the site",
        "operationId" : "startSiteBackup",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/sites/{id}/backupstep" : {
      "post" : {
        "tags" : [ "sites" ],
        "summary" : "Step (continue) a remote backup for the site",
        "description" : "Step (continue) a remote backup for the site",
        "operationId" : "stepSiteBackup",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/sites/{id}/extensions" : {
      "get" : {
        "tags" : [ "sites" ],
        "summary" : "Get extensions for a site",
        "description" : "Get extensions for a site",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields to return separate by comas: name,id",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of object to return (max 100, default 25)",
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "limitstart",
          "in" : "query",
          "description" : "Start of the return (default 0)",
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "ORDER by this field",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Extension"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Extension"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Extension"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid"
          }
        }
      },
      "post" : {
        "tags" : [ "sites" ],
        "summary" : "Install extension",
        "operationId" : "installExtension",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "url",
          "in" : "query",
          "description" : "URL to install the extension from",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "url"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified"
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/sites/{id}/logs" : {
      "get" : {
        "tags" : [ "sites" ],
        "summary" : "Return logs for a specific website",
        "description" : "Return logs for a specific website",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "log_entry",
          "in" : "query",
          "description" : "Do a 'LIKE' search, you can also use '%'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "log_type",
          "in" : "query",
          "description" : "Type of the log",
          "schema" : {
            "type" : "string",
            "enum" : [ "", "plugin_sends_error", "curlerror", "modified_file", "word_not_in_homepage", "file_not_exists", "update_available", "new_extension", "deleted_extension", "extension_not_saved", "modified_value_files" ]
          }
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Logs after this date, format YYYY-MM-DD HH:MM:SS",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "Logs before this date, format YYYY-MM-DD HH:MM:SS",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields to return separate by comas: name,id",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of object to return (max 100, default 25)",
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "limitstart",
          "in" : "query",
          "description" : "Start of the return (default 0)",
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Log"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Log"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Log"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      },
      "post" : {
        "tags" : [ "sites" ],
        "summary" : "Create a custom log for a specific website",
        "description" : "Create a custom log for a specific website",
        "operationId" : "CreateLog",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "JSON object Log (only type custom)",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostLog"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Log"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Log"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Log"
                }
              }
            }
          },
          "201" : {
            "description" : "Saved successfully"
          },
          "400" : {
            "description" : "Invalid data"
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Not saved"
          }
        }
      }
    },
    "/sites/{id}/monitor" : {
      "post" : {
        "tags" : [ "sites" ],
        "summary" : "Post uptime monitor",
        "description" : "Return boolean",
        "operationId" : "postMonitor",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Monitor"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Monitor"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Monitor"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "sites" ],
        "summary" : "Delete uptime monitor",
        "description" : "Return boolean",
        "operationId" : "deleteMonitor",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Monitor"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Monitor"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Monitor"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/sites/{id}/scanner" : {
      "get" : {
        "tags" : [ "sites" ],
        "summary" : "Scan the site for malware",
        "description" : "Scan the site for malware",
        "operationId" : "scanner",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/sites/{id}/seo" : {
      "get" : {
        "tags" : [ "sites" ],
        "summary" : "SEO analyze for a page",
        "description" : "SEO analyze for a page",
        "operationId" : "seoAnalyze",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/sites/{id}/tags" : {
      "get" : {
        "tags" : [ "sites" ],
        "summary" : "Return tags for a specific website",
        "description" : "Return tags for a specific website",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Do a 'LIKE' search, you can also use '%'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Bootstrap color of the tag",
          "schema" : {
            "type" : "string",
            "enum" : [ "", "default", "success", "warning", "important", "info", "inverse" ]
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields to return separate by comas: name,id",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of object to return (max 100, default 25)",
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "limitstart",
          "in" : "query",
          "description" : "Start of the return (default 0)",
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "ORDER by this field",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      },
      "post" : {
        "tags" : [ "sites" ],
        "summary" : "Add tags for a specific website",
        "description" : "Add tags for a specific website",
        "operationId" : "postTags",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "JSON object Tag",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/Tag"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              }
            }
          },
          "201" : {
            "description" : "Saved successfully"
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/sites/{id}/updatejoomla" : {
      "post" : {
        "tags" : [ "sites" ],
        "summary" : "Update Joomla core on the remote site",
        "description" : "Update Joomla core on the remote site",
        "operationId" : "updateJoomla",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Joomla core successfully updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID or Joomla Update not found"
          }
        }
      }
    },
    "/sites/{id}/uptime" : {
      "get" : {
        "tags" : [ "sites" ],
        "summary" : "Return uptime data",
        "description" : "Return uptime data",
        "operationId" : "getUptime",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Uptime"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Uptime"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Uptime"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/sites/{id}/validate" : {
      "get" : {
        "tags" : [ "sites" ],
        "summary" : "validate the site, return the new logs",
        "description" : "validate the site",
        "operationId" : "validateSite",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Log"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Log"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Log"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/sites/{id}/validatedebug" : {
      "get" : {
        "tags" : [ "sites" ],
        "summary" : "validate the site, return the debug information",
        "operationId" : "validateDebugSite",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the website",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Log"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Log"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Log"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/ssousers" : {
      "get" : {
        "tags" : [ "ssousers" ],
        "summary" : "Get a list of SSO Users",
        "description" : "Returns a list of SSO Users",
        "operationId" : "getSsoUsers",
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SsoUsers"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SsoUsers"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SsoUsers"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          }
        }
      },
      "post" : {
        "tags" : [ "ssousers" ],
        "summary" : "Create a SSO User",
        "description" : "Create a SSO User",
        "operationId" : "CreateSsoUsers",
        "requestBody" : {
          "description" : "JSON object SsoUsers",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/SsoUsers"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SsoUsers"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SsoUsers"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SsoUsers"
                }
              }
            }
          },
          "201" : {
            "description" : "Saved successfully"
          },
          "400" : {
            "description" : "Invalid data"
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Not saved"
          }
        }
      }
    },
    "/ssousers/{id}" : {
      "get" : {
        "tags" : [ "ssousers" ],
        "summary" : "Find SSO User by ID",
        "description" : "Returns a SSO User based on ID",
        "operationId" : "getSsoUsersById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of SSO User that needs to be fetched",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields to return separate by comas: name,id",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SsoUsers"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SsoUsers"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SsoUsers"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID"
          },
          "403" : {
            "description" : "Invalid API Key"
          }
        }
      },
      "put" : {
        "tags" : [ "ssousers" ],
        "summary" : "Update a SSO User",
        "description" : "Update a SSO User",
        "operationId" : "UpdateSsoUsers",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of SSO User that needs to be updated",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "JSON object SsoUsers",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/SsoUsers"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SsoUsers"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SsoUsers"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SsoUsers"
                }
              }
            }
          },
          "201" : {
            "description" : "Updated successfully"
          },
          "400" : {
            "description" : "Invalid data"
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Not saved"
          }
        }
      },
      "delete" : {
        "tags" : [ "ssousers" ],
        "summary" : "Delete a specific SSO User",
        "description" : "Delete a specific SSO User",
        "operationId" : "deleteSsoUserById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of SSO User that needs to be deleted",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "SSO User correctly deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/tags" : {
      "get" : {
        "tags" : [ "tags" ],
        "summary" : "Get a list of tags",
        "description" : "Returns a list of tags",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Do a 'LIKE' search, you can also use '%'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Bootstrap color of the tag",
          "schema" : {
            "type" : "string",
            "enum" : [ "", "default", "success", "warning", "important", "info", "inverse" ]
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields to return separate by comas: name,id",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of object to return (max 100, default 25)",
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "limitstart",
          "in" : "query",
          "description" : "Start of the return (default 0)",
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          }
        }
      },
      "post" : {
        "tags" : [ "tags" ],
        "summary" : "Create a tag",
        "description" : "Create a tag",
        "operationId" : "CreateTags",
        "requestBody" : {
          "description" : "JSON object Tag",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/Tag"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          },
          "201" : {
            "description" : "Saved successfully"
          },
          "400" : {
            "description" : "Invalid data"
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Not saved"
          }
        }
      }
    },
    "/tags/metadata" : {
      "get" : {
        "tags" : [ "tags" ],
        "summary" : "Get the list of fields",
        "description" : "Returns a list of fields",
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/tags/{id}" : {
      "get" : {
        "tags" : [ "tags" ],
        "summary" : "Find tag by ID",
        "description" : "Returns a tag based on ID",
        "operationId" : "getTagById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of tag that needs to be fetched",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields to return separate by comas: name,id",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID"
          },
          "403" : {
            "description" : "Invalid API Key"
          }
        }
      },
      "put" : {
        "tags" : [ "tags" ],
        "summary" : "Update a tag",
        "description" : "Update a tag",
        "operationId" : "UpdateTag",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of tag",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "JSON object of the updated tag",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/Tag"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data"
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "tags" ],
        "summary" : "Delete a specific tag",
        "description" : "Delete a specific tag",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of tag that needs to be deleted",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Tag correctly deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    },
    "/tags/{id}/sites" : {
      "get" : {
        "tags" : [ "tags" ],
        "summary" : "Find sites by tag ID",
        "description" : "Returns a list of sites based with a specific tag id",
        "operationId" : "getSitesByTags",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of tag that needs to be fetched",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Do a 'LIKE' search, you can also use '%'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "access_url",
          "in" : "query",
          "description" : "Do a 'LIKE' search, you can also use '%'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "j_version",
          "in" : "query",
          "description" : "Do a 'LIKE' search, you can also use '%'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ip",
          "in" : "query",
          "description" : "Do a 'LIKE' search, you can also use '%'",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "jUpdate",
          "in" : "query",
          "description" : "Joomla core update",
          "schema" : {
            "type" : "integer",
            "enum" : [ 1, 0 ]
          }
        }, {
          "name" : "published",
          "in" : "query",
          "description" : "is published",
          "schema" : {
            "type" : "integer",
            "enum" : [ 1, 0 ]
          }
        }, {
          "name" : "error",
          "in" : "query",
          "description" : "have errors",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "nbUpdates",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "up",
          "in" : "query",
          "description" : "is the website online",
          "schema" : {
            "type" : "integer",
            "enum" : [ 1, 0 ]
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields to return separate by comas: name,id",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of object to return (max 100, default 25)",
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "limitstart",
          "in" : "query",
          "description" : "Start of the return (default 0)",
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "No response was specified",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              },
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid API Key"
          },
          "404" : {
            "description" : "Invalid ID"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Audit" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier for the audit",
            "format" : "int64"
          }
        }
      },
      "Audits" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Audit"
        }
      },
      "Extension" : {
        "required" : [ "idx_site", "type" ],
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string",
            "description" : "Date of release"
          },
          "ext_name" : {
            "type" : "string",
            "description" : "Extension name"
          },
          "idx_site" : {
            "type" : "integer",
            "description" : "Unique identifier for the site",
            "format" : "int64"
          },
          "newVersion" : {
            "type" : "string",
            "description" : "New version"
          },
          "type" : {
            "type" : "string",
            "description" : "Datetime of the log",
            "format" : "date-format"
          },
          "url" : {
            "type" : "string",
            "description" : "Author URL"
          },
          "vUpdate" : {
            "type" : "integer",
            "description" : "Update is available"
          },
          "version" : {
            "type" : "string",
            "description" : "Extension version"
          }
        }
      },
      "Feedback" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier for the feedback",
            "format" : "int64"
          }
        }
      },
      "Log" : {
        "required" : [ "id_log", "idx_site", "log_date", "log_entry", "log_level", "userid" ],
        "type" : "object",
        "properties" : {
          "Site name" : {
            "type" : "string",
            "description" : "Name of the site / readyonly"
          },
          "id_log" : {
            "type" : "integer",
            "description" : "Unique identifier for the log",
            "format" : "int64"
          },
          "idx_site" : {
            "type" : "integer",
            "description" : "Unique identifier for the site",
            "format" : "int64"
          },
          "log_date" : {
            "type" : "string",
            "description" : "Datetime of the log",
            "format" : "date-format"
          },
          "log_entry" : {
            "type" : "string",
            "description" : "Log information"
          },
          "log_level" : {
            "type" : "integer",
            "description" : "Level of log",
            "format" : "int64"
          },
          "log_type" : {
            "type" : "string",
            "description" : "Type of log"
          },
          "userid" : {
            "type" : "integer",
            "description" : "Unique identifier for the user",
            "format" : "int64"
          }
        }
      },
      "Monitor" : {
        "type" : "object"
      },
      "PostLog" : {
        "required" : [ "log_entry", "log_level" ],
        "type" : "object",
        "properties" : {
          "log_date" : {
            "type" : "string",
            "description" : "Datetime of the log",
            "format" : "date-format"
          },
          "log_entry" : {
            "type" : "string",
            "description" : "Log information"
          },
          "log_level" : {
            "type" : "integer",
            "description" : "Level of log",
            "format" : "int64"
          }
        }
      },
      "PostSite" : {
        "required" : [ "access_url" ],
        "type" : "object",
        "properties" : {
          "access_url" : {
            "type" : "string",
            "description" : "URL of the site"
          },
          "admin_url" : {
            "type" : "string",
            "description" : "Adminsitration URL"
          },
          "akeebaProfile" : {
            "type" : "string",
            "description" : "Akeeba Profile",
            "format" : "date-format"
          },
          "backupSchedule" : {
            "type" : "string",
            "description" : "Backup Schedule"
          },
          "dateBackup" : {
            "type" : "string",
            "description" : "Date backup",
            "format" : "date-format"
          },
          "name" : {
            "type" : "string",
            "description" : "Friendly name for the site"
          },
          "notes" : {
            "type" : "string",
            "description" : "Personnal note for the site"
          },
          "published" : {
            "type" : "boolean",
            "description" : "Published status of site"
          },
          "secret_word" : {
            "type" : "string",
            "description" : "Watchful secret word"
          },
          "tags" : {
            "type" : "string",
            "description" : "JSON encoded array of tags for the site (e.g. [{<q>name</q>:<q>mytag</q>},{<q>name</q>:<q>anothertag</q>}])",
            "format" : "json"
          },
          "word_akeeba" : {
            "type" : "string",
            "description" : "Akeeba backup word"
          },
          "word_check" : {
            "type" : "string",
            "description" : "Word checked for uptime"
          }
        }
      },
      "Reports" : {
        "type" : "object"
      },
      "Site" : {
        "required" : [ "siteid" ],
        "type" : "object",
        "properties" : {
          "access_url" : {
            "type" : "string",
            "description" : "URL of the site"
          },
          "admin_url" : {
            "type" : "string",
            "description" : "Adminsitration URL"
          },
          "akeebaProfile" : {
            "type" : "string",
            "description" : "Akeeba Profile",
            "format" : "date-format"
          },
          "backupSchedule" : {
            "type" : "string",
            "description" : "Backup Schedule"
          },
          "canBackup" : {
            "type" : "boolean",
            "description" : "Site can be backuped"
          },
          "canUpdate" : {
            "type" : "boolean",
            "description" : "Site can use remote installer"
          },
          "dateBackup" : {
            "type" : "string",
            "description" : "Date backup",
            "format" : "date-format"
          },
          "date_last_check" : {
            "type" : "string",
            "description" : "Watchful Last check",
            "format" : "date-format"
          },
          "error" : {
            "type" : "boolean",
            "description" : "Error status of site"
          },
          "ip" : {
            "type" : "string",
            "description" : "server IP"
          },
          "jUpdate" : {
            "type" : "boolean",
            "description" : "?"
          },
          "j_version" : {
            "type" : "string",
            "description" : "Joomla site version"
          },
          "monitorid" : {
            "type" : "boolean",
            "description" : "Id of the associated UptimeRobot monitor"
          },
          "name" : {
            "type" : "string",
            "description" : "Friendly name for the site"
          },
          "nbUpdates" : {
            "type" : "string",
            "description" : "Number of updates",
            "format" : "date-format"
          },
          "new_j_version" : {
            "type" : "string",
            "description" : "Joomla site version"
          },
          "notes" : {
            "type" : "string",
            "description" : "Personnal note for the site"
          },
          "published" : {
            "type" : "boolean",
            "description" : "Published status of site"
          },
          "secret_word" : {
            "type" : "string",
            "description" : "Watchful secret word"
          },
          "siteid" : {
            "type" : "integer",
            "description" : "Unique identifier for the site",
            "format" : "int64"
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags for this site",
            "items" : {
              "type" : "object"
            }
          },
          "up" : {
            "type" : "boolean",
            "description" : "Site status"
          },
          "word_akeeba" : {
            "type" : "string",
            "description" : "Akeeba backup word"
          },
          "word_check" : {
            "type" : "string",
            "description" : "Word checked for uptime"
          }
        }
      },
      "SsoUsers" : {
        "required" : [ "email", "groupid", "id", "name", "password", "userid", "username" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Email of the SSO User"
          },
          "groupid" : {
            "type" : "integer",
            "description" : "Security Joomla group ID",
            "format" : "int64"
          },
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier for the SSO User",
            "format" : "int64"
          },
          "lastLoginDate" : {
            "type" : "string",
            "description" : "Last login date on remote site",
            "format" : "date-time"
          },
          "lastLoginSite" : {
            "type" : "integer",
            "description" : "Site Id of the last remote login",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "Account display name"
          },
          "password" : {
            "type" : "string",
            "description" : "Password of the SSO User"
          },
          "userid" : {
            "type" : "integer",
            "description" : "Watchful user account",
            "format" : "int64"
          },
          "username" : {
            "type" : "string",
            "description" : "Username of the SSO User"
          }
        }
      },
      "Tag" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier for the tag",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "Friendly name for the tag"
          },
          "nbSites" : {
            "type" : "integer",
            "description" : "Number of sites use this tag (required field id)"
          },
          "type" : {
            "type" : "string",
            "description" : "Bootstrap color of the tag",
            "default" : "default",
            "enum" : [ "default", "success", "warning", "important", "info", "inverse" ]
          }
        }
      },
      "Uptime" : {
        "type" : "object"
      },
      "Version" : {
        "type" : "object"
      }
    }
  }
}