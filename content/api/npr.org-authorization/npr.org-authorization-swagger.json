{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "NPR Authorization Service",
    "description" : "The interface to our OAuth2 server",
    "termsOfService" : "https://dev.npr.org/guide/prerequisites/terms-of-use",
    "contact" : {
      "name" : "NPR One Enterprise Team",
      "url" : "https://dev.npr.org",
      "email" : "NPROneEnterprise@npr.org"
    },
    "version" : "2"
  },
  "externalDocs" : {
    "description" : "Learn more at the NPR One Developer Center",
    "url" : "https://dev.npr.org/guide/services/authorization"
  },
  "servers" : [ {
    "url" : "https://authorization.api.npr.org/"
  } ],
  "paths" : {
    "/v2/device" : {
      "post" : {
        "tags" : [ "authorization" ],
        "summary" : "Initiate an OAuth2 login flow for limited input devices",
        "description" : "This flow should only be used by clients who cannot show a native webview or do not have advanced input controls. It is an alternative to `GET /v2/authorize`.\n\nThird-party clients will need to use one or the other of these two endpoints, but they will generally not use both.",
        "operationId" : "generateDeviceCode",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "required" : [ "client_id", "client_secret" ],
                "type" : "object",
                "properties" : {
                  "client_id" : {
                    "type" : "string",
                    "description" : "The client's ID"
                  },
                  "client_secret" : {
                    "type" : "string",
                    "description" : "The client's secret key"
                  },
                  "scope" : {
                    "type" : "string",
                    "description" : "A space-separated list of scope(s) requested by the application. Required for all untrusted clients; will be ignored for trusted clients."
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "We have generated a unique device code and user code. These will only be valid for the amount of time specified in the `expires_in` field; if the user does not complete the login process in that amount of time, the client will need to request a new set of codes.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeviceCodeData"
                }
              }
            }
          },
          "400" : {
            "description" : "A bad request; generally, one or more parameters passed in were incorrect or missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleError"
                }
              }
            }
          },
          "401" : {
            "description" : "The client credentials were invalid or the authorization server denied the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleError"
                }
              }
            }
          },
          "500" : {
            "description" : "A server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleError"
                }
              }
            }
          },
          "503" : {
            "description" : "The system is undergoing maintenance and we are unable to fulfill this request. Look for a `Retry-After` header to see the predicted time the system will be back up.",
            "headers" : {
              "Retry-After" : {
                "description" : "The predicted time the system will be back up",
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/token" : {
      "post" : {
        "tags" : [ "authorization" ],
        "summary" : "Create a new OAuth2 access token",
        "description" : "Please be aware that the required parameters are contingent on the `grant_type` that you select.\n\nFor the `authorization_code` grant type, you are **required** to pass in the `code` and `redirect_uri` parameters. `service`, `username` and `password` parameters will be ignored.\n\nFor the `client_credentials` grant type, you do not need to pass in any additional parameters beyond the basic requirements. `code`, `redirect_uri`, `service`, `username` and `password` parameters will be ignored.\n\nFor the `device_code` grant type, you are **required** to pass in the `code` parameter. If you are a third-party developer, you are also required to provide the `scope` parameter; see the documentation for `GET /v2/authorize` for possible values. `redirect_uri`, `service`, `username` and `password` parameters will be ignored.\n\nFor the `password` grant type, you are **required** to pass in the `username` and `password` parameters. The `code` and `redirect_uri` parameters are ignored.\nThird-party developers do not have access to this grant type.\n\nFor the `refresh_token` grant type, you are **required** to pass in the `refresh_token` parameter. The `scope` parameter can optionally be used to request a different set of scopes than were used in the original request, but it **cannot** contain any scopes that were not previously requested. If not specified, then `scope` will be set to whichever scopes were used for the original access token request. If trading in an old non-expiring access token for a refresh-enabled token, set the value of `refresh_token` to the access token value and `token_type_hint` must be set to `access_token`. `code`, `redirect_uri`, `service`, `username` and `password` parameters will be ignored.\n\nThe `anonymous_user` grant type is a custom grant type created by NPR to suit our needs for functionality such as our &quot;try-before-you-buy&quot; experience. If you are a third-party developer, you will not have access to this grant type unless we have explicitly given you permission within our system.\nFor this grant type, if you are a third-party developer, you are required to provide the `scope` parameter; see the documentation for `GET /v2/authorize` for possible values. `code`, `redirect_uri`, `service`, `username` and `password` parameters will be ignored.\n\nThe `third_party` grant type is another custom grant type created by NPR to handle login via third-party providers such as Facebook and Google. If you are a third-party developer, you will not have access to this grant types unless we have explicitly given you permission within our system.\nFor this grant type, you are **required** to pass in the `service` and `token` parameters. If you are a third-party developer, you are also required to provide the `scope` parameter; see the documentation for `GET /v2/authorize` for possible values. The `code` and `redirect_uri` parameters are ignored.\n\nIf you are unsure of which grant type to select, assume that `authorization_code` is the one you want.\n\nNote that at this time, refresh tokens are an opt-in feature; however, in the future, they will gradually transition to being opt-out, and ultimately required for all clients. Our general guidance at this time is that if this endpoint starts returning refresh tokens for you, you are responsible for implementing the code to handle them appropriately in accordance with the OAuth 2.0 spec. For more information about our gradual rollout of this feature, please contact the NPR One API team.",
        "operationId" : "createToken",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "required" : [ "client_id", "client_secret", "grant_type" ],
                "type" : "object",
                "properties" : {
                  "grant_type" : {
                    "type" : "string",
                    "description" : "The type of grant the client is requesting",
                    "enum" : [ "authorization_code", "client_credentials", "device_code", "password", "refresh_token", "anonymous_user", "third_party" ]
                  },
                  "client_id" : {
                    "type" : "string",
                    "description" : "The client's ID, required for all grant types."
                  },
                  "client_secret" : {
                    "type" : "string",
                    "description" : "The client's secret, required for all grant types."
                  },
                  "code" : {
                    "type" : "string",
                    "description" : "Required for `authorization_code` and `device_code` grant types. The authorization code from a successful call to `/v2/authorize`, or a device code from a successful call to `/v2/device`."
                  },
                  "redirect_uri" : {
                    "type" : "string",
                    "description" : "Required for `authorization_code` grant type. The requested redirect_uri."
                  },
                  "username" : {
                    "type" : "string",
                    "description" : "Required for `password` grant type. The email address of an NPR user.",
                    "format" : "email"
                  },
                  "password" : {
                    "type" : "string",
                    "description" : "Required for `password` grant type. The password that matches the user specified with the username parameter.",
                    "format" : "password"
                  },
                  "service" : {
                    "type" : "string",
                    "description" : "Required for `third_party` grant type. The name of the third-party login provider.",
                    "enum" : [ "facebook", "google", "microsoft", "janrain", "comcast" ]
                  },
                  "refresh_token" : {
                    "type" : "string",
                    "description" : "Required for `refresh_token` grant type. A valid refresh token from a previous successful call to `POST /v2/token`."
                  },
                  "scope" : {
                    "type" : "string",
                    "description" : "Required for third-party developers using the `device_code` and `third_party` grant types. Optionally used by the `refresh_token` grant type. A space-separated list of scope(s) requested by the application."
                  },
                  "token_type_hint" : {
                    "type" : "string",
                    "description" : "A hint about the type of the token submitted for a new access and refresh token. If unspecified, the default value is assumed to be `refresh_token`.",
                    "enum" : [ "access_token", "refresh_token" ]
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A new token was successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessTokenData"
                }
              }
            }
          },
          "400" : {
            "description" : "A bad request; generally, one or more parameters passed in were incorrect or missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleError"
                }
              }
            }
          },
          "401" : {
            "description" : "The client credentials were invalid (any grant type), the user credentials were invalid (`password` grant type), the user has not yet logged in or has purposely denied the request (`device_code` grant type), or the authorization server denied the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleError"
                }
              }
            }
          },
          "500" : {
            "description" : "A server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleError"
                }
              }
            }
          },
          "503" : {
            "description" : "The system is undergoing maintenance and we are unable to fulfill this request. Look for a `Retry-After` header to see the predicted time the system will be back up.",
            "headers" : {
              "Retry-After" : {
                "description" : "The predicted time the system will be back up",
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/token/revoke" : {
      "post" : {
        "tags" : [ "authorization" ],
        "summary" : "Revoke an existing OAuth2 access token",
        "description" : "Our implementation follows the proposed IETF specification [RFC-7009](https://tools.ietf.org/html/rfc7009).\n\nIf your client application offers the ability to for a logged-in user to log out, and you have access to a long-lived\n`client_credentials` token (i.e. you have generated one that you are storing securely for the lifetime of the entire app\ninstall), we suggest (but do not require) that you call this endpoint and revoke the access token belonging to the\nlogged-in user as part of your logout process. If you do not already have a long-lived `client_credentials` token,\nplease don't generate one just for the purposes of calling this endpoint.\n\nIf you are building a prototype application, we also recommend that you use this endpoint to clean up access tokens\nthat you generate during the testing of your app and do not intend to reuse.\n\nNote that revoking an access token will automatically revoke any refresh tokens associated with it, and vice-versa.",
        "operationId" : "revokeToken",
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "A `client_credentials` access token from the same client application as the token being revoked. Should start with `Bearer`, followed by a space, followed by the token.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "required" : [ "token" ],
                "type" : "object",
                "properties" : {
                  "token" : {
                    "type" : "string",
                    "description" : "The access token or refresh token that the client wants to have revoked."
                  },
                  "token_type_hint" : {
                    "type" : "string",
                    "description" : "A hint about the type of the token submitted for revocation. If unspecified, the default value is assumed to be `access_token`.",
                    "enum" : [ "access_token", "refresh_token" ]
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The old token was successfully revoked",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "An empty JSON object"
                }
              }
            }
          },
          "400" : {
            "description" : "A bad request; generally, one or more parameters passed in were incorrect or missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleError"
                }
              }
            }
          },
          "401" : {
            "description" : "The client credentials were invalid or the authorization server denied the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleError"
                }
              }
            }
          },
          "403" : {
            "description" : "The client associated with the access token in the header does not own the access token that this request is attempting to revoke.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleError"
                }
              }
            }
          },
          "500" : {
            "description" : "A server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleError"
                }
              }
            }
          },
          "503" : {
            "description" : "The system is undergoing maintenance and we are unable to fulfill this request. Look for a `Retry-After` header to see the predicted time the system will be back up.",
            "headers" : {
              "Retry-After" : {
                "description" : "The predicted time the system will be back up",
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AbstractCDocLink" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/AbstractLink"
        }, {
          "required" : [ "content-type" ],
          "type" : "object",
          "properties" : {
            "content-type" : {
              "type" : "string",
              "description" : "The MIME type of the response of this link"
            }
          }
        } ]
      },
      "AbstractLink" : {
        "required" : [ "href" ],
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string",
            "description" : "The link to be followed",
            "format" : "uri"
          }
        }
      },
      "AccessTokenData" : {
        "required" : [ "access_token", "expires_in", "token_type" ],
        "type" : "object",
        "properties" : {
          "access_token" : {
            "type" : "string",
            "description" : "The access token to use for all future calls"
          },
          "expires_in" : {
            "type" : "integer",
            "description" : "The remaining lifetime of the access token (in seconds)",
            "format" : "int32"
          },
          "refresh_token" : {
            "type" : "string",
            "description" : "The refresh token that can be used to obtain a new access token if the old one expires; if a refresh token is returned, it is the client's responsibility to securely cache it for future use."
          },
          "token_type" : {
            "type" : "string",
            "description" : "Identifies the type of token returned. At this time, this field always has the value `Bearer`.",
            "enum" : [ "Bearer", "MAC" ]
          }
        }
      },
      "Affiliation" : {
        "required" : [ "following", "href", "id" ],
        "type" : "object",
        "properties" : {
          "daysSinceLastListen" : {
            "type" : "integer",
            "description" : "The number of days since a user last listened to a story from this aggregation. Absent if user never listened to the aggregation.",
            "format" : "int32"
          },
          "following" : {
            "type" : "boolean",
            "description" : "Whether or not the user is following the aggregation. When changing affiliation status, the client is expected to toggle this value and then send the entire object back.",
            "default" : false
          },
          "href" : {
            "type" : "string",
            "description" : "A link to more details about the program from the NPR Story API"
          },
          "id" : {
            "type" : "string",
            "description" : "A unique identifier for the aggregation (program)"
          },
          "notif_following" : {
            "type" : "array",
            "description" : "The topic in Firebase Cloud Messaging to which the device should subscribe if it supports notifications and the user wants notifications about the podcasts they follow.",
            "items" : {
              "type" : "string"
            }
          },
          "notif_rated" : {
            "type" : "array",
            "description" : "The topic in Firebase Cloud Messaging to which the device should subscribe if it supports notifications and the user wants notifications about the podcasts they have highly rated.",
            "items" : {
              "type" : "string"
            }
          },
          "rating" : {
            "type" : "number",
            "description" : "The user's average rating for this affiliation on a scale of 0-1. Absent if user never listened to the aggregation.",
            "format" : "float"
          },
          "title" : {
            "type" : "string",
            "description" : "The title for the aggregation (program)"
          }
        },
        "description" : "A program (aggregation) that a given user has shown an affiliation with"
      },
      "CollectionDocument" : {
        "required" : [ "attributes", "errors", "href", "items", "links", "version" ],
        "type" : "object",
        "properties" : {
          "attributes" : {
            "type" : "object"
          },
          "errors" : {
            "type" : "array",
            "description" : "A list of encountered errors, ignored on POST, PUT",
            "items" : {
              "type" : "object"
            }
          },
          "href" : {
            "type" : "string",
            "description" : "A URL representation of the resource; should generally be ignored by clients unless noted otherwise"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "links" : {
            "type" : "object"
          },
          "version" : {
            "type" : "string",
            "description" : "The version of the Collection.Doc+JSON spec being used",
            "default" : "1.0"
          }
        },
        "description" : "Base Collection.Doc+JSON output"
      },
      "DeviceCodeData" : {
        "required" : [ "device_code", "expires_in", "interval", "user_code", "verification_uri" ],
        "type" : "object",
        "properties" : {
          "device_code" : {
            "type" : "string",
            "description" : "40-character code for the device to input into the /token endpoint, not for display to the user"
          },
          "expires_in" : {
            "type" : "integer",
            "description" : "The number of seconds for which this set of codes will be valid, after which they will be purged",
            "format" : "int32",
            "default" : 1800
          },
          "interval" : {
            "type" : "integer",
            "description" : "The number of seconds the client application should maintain between requests to the /token endpoint",
            "format" : "int32",
            "default" : 5
          },
          "user_code" : {
            "type" : "string",
            "description" : "6-character alphanumeric code for the user to enter at http://npr.org/device, to be displayed by the client application"
          },
          "verification_uri" : {
            "type" : "string",
            "description" : "The URL where the user should input their code, to be displayed by the client application",
            "default" : "http://npr.org/device"
          }
        }
      },
      "Error" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "The error code",
            "format" : "int32"
          },
          "debug" : {
            "type" : "string",
            "description" : "Additional debug information if debug mode is turned on"
          },
          "text" : {
            "type" : "string",
            "description" : "The error description"
          }
        },
        "description" : "A serialized version of any error encountered when processing this request"
      },
      "ErrorDocument" : {
        "description" : "A Collection.doc+JSON representation of an error result from an API call",
        "allOf" : [ {
          "$ref" : "#/components/schemas/CollectionDocument"
        }, {
          "type" : "object",
          "properties" : {
            "attributes" : {
              "type" : "object",
              "description" : "Ignore; will be empty for errors"
            },
            "errors" : {
              "type" : "array",
              "description" : "A list of encountered errors, ignored on POST, PUT",
              "items" : {
                "$ref" : "#/components/schemas/Error"
              }
            },
            "items" : {
              "type" : "array",
              "description" : "Ignore; will be empty for errors",
              "items" : {
                "type" : "object"
              }
            },
            "links" : {
              "type" : "object",
              "description" : "Ignore; will be empty for errors"
            }
          }
        } ]
      },
      "SimpleError" : {
        "required" : [ "message", "type" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "A message describing the error that occurred"
          },
          "type" : {
            "type" : "string",
            "description" : "A short string representing the type of error that occurred",
            "default" : "error"
          }
        },
        "description" : "A simple representation of an error result from an API call, rarely used; in most cases we still return a Collection.doc+JSON document for errors"
      }
    },
    "responses" : {
      "400WithDocument" : {
        "description" : "A bad request; generally, one or more parameters passed in were incorrect or missing",
        "headers" : {
          "X-RateLimit-Remaining" : {
            "description" : "The number of remaining requests in the current period",
            "schema" : {
              "type" : "integer"
            }
          },
          "X-RateLimit-Reset" : {
            "description" : "The number of seconds left in the current period",
            "schema" : {
              "type" : "integer"
            }
          },
          "X-RateLimit-Limit" : {
            "description" : "The number of allowed requests in the current period",
            "schema" : {
              "type" : "integer"
            }
          }
        },
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorDocument"
            }
          }
        }
      },
      "401WithDocument" : {
        "description" : "The client is not authorized to complete this request. Check to ensure a valid access token was passed in the headers.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorDocument"
            }
          }
        }
      },
      "404WithDocument" : {
        "description" : "The resource with the requested ID could not be found, and the server was unable to complete the request.",
        "headers" : {
          "X-RateLimit-Remaining" : {
            "description" : "The number of remaining requests in the current period",
            "schema" : {
              "type" : "integer"
            }
          },
          "X-RateLimit-Reset" : {
            "description" : "The number of seconds left in the current period",
            "schema" : {
              "type" : "integer"
            }
          },
          "X-RateLimit-Limit" : {
            "description" : "The number of allowed requests in the current period",
            "schema" : {
              "type" : "integer"
            }
          }
        },
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorDocument"
            }
          }
        }
      },
      "429WithDocument" : {
        "description" : "The client has exceeded the number of daily calls as per their rate limit. For now, this only applies to prototype applications and untrusted clients. Trusted clients will never be rate-limited, nor will any production apps.",
        "headers" : {
          "X-RateLimit-Remaining" : {
            "description" : "The number of remaining requests in the current period",
            "schema" : {
              "type" : "integer"
            }
          },
          "X-RateLimit-Reset" : {
            "description" : "The number of seconds left in the current period",
            "schema" : {
              "type" : "integer"
            }
          },
          "X-RateLimit-Limit" : {
            "description" : "The number of allowed requests in the current period",
            "schema" : {
              "type" : "integer"
            }
          }
        },
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorDocument"
            }
          }
        }
      },
      "500WithDocument" : {
        "description" : "A server error",
        "headers" : {
          "X-RateLimit-Remaining" : {
            "description" : "The number of remaining requests in the current period",
            "schema" : {
              "type" : "integer"
            }
          },
          "X-RateLimit-Reset" : {
            "description" : "The number of seconds left in the current period",
            "schema" : {
              "type" : "integer"
            }
          },
          "X-RateLimit-Limit" : {
            "description" : "The number of allowed requests in the current period",
            "schema" : {
              "type" : "integer"
            }
          }
        },
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorDocument"
            }
          }
        }
      },
      "503WithDocument" : {
        "description" : "The system is undergoing maintenance and we are unable to fulfill this request. Look for a `Retry-After` header to see the predicted time the system will be back up.",
        "headers" : {
          "Retry-After" : {
            "description" : "The predicted time the system will be back up",
            "schema" : {
              "type" : "string",
              "format" : "date-time"
            }
          }
        },
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorDocument"
            }
          }
        }
      },
      "Simple400" : {
        "description" : "A bad request; generally, one or more parameters passed in were incorrect or missing",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/SimpleError"
            }
          }
        }
      },
      "Simple401" : {
        "description" : "The client credentials were invalid or the authorization server denied the request.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/SimpleError"
            }
          }
        }
      },
      "Simple500" : {
        "description" : "A server error",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/SimpleError"
            }
          }
        }
      },
      "Simple503" : {
        "description" : "The system is undergoing maintenance and we are unable to fulfill this request. Look for a `Retry-After` header to see the predicted time the system will be back up.",
        "headers" : {
          "Retry-After" : {
            "description" : "The predicted time the system will be back up",
            "schema" : {
              "type" : "string",
              "format" : "date-time"
            }
          }
        },
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/SimpleError"
            }
          }
        }
      }
    },
    "parameters" : {
      "Authorization" : {
        "name" : "Authorization",
        "in" : "header",
        "description" : "Your access token from the Authorization Service. Should start with `Bearer`, followed by a space, followed by the token.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "X-Advertising-ID" : {
        "name" : "X-Advertising-ID",
        "in" : "header",
        "description" : "A device-specific advertising identifier, if possible. Apple's IDFA is an example.",
        "schema" : {
          "type" : "string"
        }
      }
    },
    "securitySchemes" : {
      "oauth2" : {
        "type" : "oauth2"
      }
    }
  }
}