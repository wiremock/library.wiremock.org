{
  "mappings" : [ {
    "id" : "04864a14-57d9-43f5-89eb-80229042e968",
    "name" : "Queries the contact center quota, an aggregation over all the projects, that bel...",
    "request" : {
      "urlPath" : "/v1alpha1/ds5mxl35hfh7t81qtb8whn79cr5732y4oolbceaujaiig6gd9rm4xj194suh4s7bidtk1uw7jhx0htr92nyfjglz21zxlwp1rtjtalqn831jb7rzjn9nkupjuw04i9yeuv0hg7asjg333dyphkv4w87l6h1pb9tfb37lvzypuwzrmuqsnlbbf7yy1:queryContactCenterQuota",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenterCountLimit\" : 1628097078,\n  \"contactCenterCountSum\" : 816304371\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "04864a14-57d9-43f5-89eb-80229042e968",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:42.679553Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.queryContactCenterQuota",
          "schema" : {
            "description" : "Represents a quota for contact centers.",
            "properties" : {
              "contactCenterCountLimit" : {
                "description" : "Reflects the count limit of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              },
              "contactCenterCountSum" : {
                "description" : "Reflects the count sum of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "e6741bc5-fbab-4cdf-a03f-09ef7071123f",
    "name" : "Creates a new ContactCenter in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/h7v3kmq3nl146yzwnfbg57jvjz13txxsixwld8bn9rhsrkaxr8bx7t7ex7914/contactCenters",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Natacha Rosenbaum\",\n  \"error\" : {\n    \"code\" : 1475205357,\n    \"details\" : [ { }, { }, { }, { } ],\n    \"message\" : \"Vitae blanditiis laboriosam veritatis voluptatem nulla rerum. Distinctio occaecati vel praesentium corporis omnis quisquam. Totam provident qui. Modi et placeat sit.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e6741bc5-fbab-4cdf-a03f-09ef7071123f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:42.679451Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "b00dacaa-9352-4f77-a3f0-e100692d4120",
    "name" : "Lists ContactCenters in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/aa8h5he7znpasr3njsx8j8e2vvq/contactCenters",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenters\" : [ {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Virgina Schiller\",\n    \"updateTime\" : \"2022-07-12T08:19:42.673592Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_SMALL\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"xh0wbcek4silh4a69qnoumpwi4zsk4r63b44jjxkyf9g2lubn4n67uchbkw2daygej9xfo4eblnx0cgu0z7rne5lox7fow7qe97sqska5yr\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/274024\",\n      \"entityId\" : \"rk67\",\n      \"userEmail\" : \"mgy4rcsgik1qtw2cknay3wvklc2ykz9u9z485mj6zo0c28oaj2d95rw8r1wvalnv12o2v4bmtaet37gr1\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/352877\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/098513\",\n      \"rootUri\" : \"https://web.example.mocklab.io/011953\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/701580\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Tillman\",\n      \"givenName\" : \"Nery\"\n    },\n    \"createTime\" : \"2022-04-24T06:17:42.674189Z\",\n    \"name\" : \"Ms. Myron Sawayn\",\n    \"userEmail\" : \"yfuxhwpi24chdhkzfq0cxb39phs31zc82zsxc0u0scqjuv2uupevvpbt2qav1l5y41rlit5dkciy377x06j4l1hoooxq7r\",\n    \"state\" : \"STATE_DEPLOYED\",\n    \"customerDomainPrefix\" : \"0trv8z5jtvg76qr24rysmrhqf80zx5iw34mpenkeh05hm31lueuolse2zn7ybuubdftcqqr4dae6jg5kgvsn8v8fgm8lal1fxjjka91a8qwwau1cv6711z8yepbw4asvrwtxkb8fb\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Emmanuel Bashirian\",\n    \"updateTime\" : \"2022-12-26T07:24:42.674361Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"klk114qlx9dxiixt4s82j3wdfvvvqvx2w2zfkwnsjvpy8jhn78itrnffupp27nio73ttl0ya99p78xryzfaup13bgdxywjz9a82uz9v871iwbk5mp8e441icf1fp972xvtn2beumueeeldp6bi8suo9n5kbzrmljsvclx0e08oswtok8vf888a\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/620349\",\n      \"entityId\" : \"f8d0\",\n      \"userEmail\" : \"eirrfrawp5smoj6hgklb5b8v2hcgml0oyjoqgk8e5pbvpf7bkykb5ugtws91eyn4kvq8parto1ngy19zdhxgn930ymhs\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/749545\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/411931\",\n      \"rootUri\" : \"https://web.example.mocklab.io/449180\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/048160\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Larkin\",\n      \"givenName\" : \"Cleo\"\n    },\n    \"createTime\" : \"2023-02-23T05:57:42.674886Z\",\n    \"name\" : \"Lawrence Williamson Sr.\",\n    \"userEmail\" : \"9v6wuwfqc9ntvi776oo51xvozgseixy46gr3ov7b5xks9a50k1vvk7tb9vsvm2reszm0ef1ynsgjxlaonsapa38il4d5ijddu22kxkmajrrmreej1rdke2f4dua23g94gjk38j8zguo1qhdjlrzcm1lisq00mu5kfynh5ngy2d7o4ikvr8lho\",\n    \"state\" : \"STATE_FAILED\",\n    \"customerDomainPrefix\" : \"62sivc3av1h8vion1fq118kostg9ifcp9q2pf8xt4cpt4dj8gu1jx3pn7mtj1nzgppue53h46s4ld0azw77xrnyksxreeta8x9c6flfhaozcf6skc6a7arvc6oamgs3rjkcnwcsi6ejysrhela\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Kurtis Swaniawski\",\n    \"updateTime\" : \"2023-01-08T09:02:42.675046Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_MEDIUM\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"dixjzx6eto2q0csa13qwt4or2c99q0vjxo5nw6kilke0llz9cqryhaqlhmiysv6wv44405t8pjyrrf35vppzmaw5fbx0zzbjtrhx8whasdxkxwuw4oyi96b2yky9puuc9kgzv1cjc3sqc3dcxk8gac6w4zjq2l6zxjyy6eqz4clukvs8ccud8trvvoum9\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/782551\",\n      \"entityId\" : \"79eh\",\n      \"userEmail\" : \"ju0uxgksct2m56f4c48k506\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/540361\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/594338\",\n      \"rootUri\" : \"https://web.example.mocklab.io/915562\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/213993\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Goyette\",\n      \"givenName\" : \"Cherryl\"\n    },\n    \"createTime\" : \"2022-12-01T07:11:42.67557Z\",\n    \"name\" : \"Dave Ebert\",\n    \"userEmail\" : \"v6mhsf0u2f\",\n    \"state\" : \"STATE_TERMINATED\",\n    \"customerDomainPrefix\" : \"uewfjxp6l3mgdkdgpnopd49ywqb7o5b6h4bbq7ck7oa9ec4cpr9dulfo33sbdqe8f318rc2jkvwg\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Sharla Balistreri\",\n    \"updateTime\" : \"2022-10-03T09:02:42.675729Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_SMALL\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"ilkhwo7xd2d78rbap8ieo24lbr31s4t2qfld34swcrbb5q5gvthzowwkvoltp5ltwkqvu8\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/345438\",\n      \"entityId\" : \"pk73\",\n      \"userEmail\" : \"6n3m8c32fcpdcjjpk2wmdrr3m4ep\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/187162\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/807979\",\n      \"rootUri\" : \"https://web.example.mocklab.io/123356\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/913877\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Ryan\",\n      \"givenName\" : \"Shirly\"\n    },\n    \"createTime\" : \"2023-03-12T06:43:42.676258Z\",\n    \"name\" : \"Mr. Gertrude Orn\",\n    \"userEmail\" : \"x54je72fu9bf6p447ob60g7i1nsjwtpbcmmecjgiwb0u3j14jkubutouxj034d2clxfcnahwz8dk5d4gqy3f122flozdi5hwg84lpa0td2vec53ttklxvij1eu5c3mdag94wbsx5anhb10xhv51r6ulcfz2hf8iup05l\",\n    \"state\" : \"STATE_UNSPECIFIED\",\n    \"customerDomainPrefix\" : \"31lwxf5odod0ggf7pxldok9pte7shltjhuylgy0xra7byr2xeu805od52qw7l9h3534w9uolcp7wyk3kio6vjsfir4sf3p1umuir4vik7jcrd4e3dq2s4g191goq9exflhmslip7l2wg76ck9iihu3exk2weg313le2e4ml61s9ckzg\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Ambrose Hintz\",\n    \"updateTime\" : \"2022-07-29T07:26:42.676416Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"8f1cjzfnmbx\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/023667\",\n      \"entityId\" : \"w5y4\",\n      \"userEmail\" : \"kwmyw3mr5tq26760axwqgqurqsh9kza2zpf5gz31f09uhb2mm8nww67154bvoyzfrzxy9p8c7tree2\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/438480\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/628411\",\n      \"rootUri\" : \"https://web.example.mocklab.io/337429\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/679579\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Borer\",\n      \"givenName\" : \"Fumiko\"\n    },\n    \"createTime\" : \"2022-10-13T06:42:42.676943Z\",\n    \"name\" : \"Jenniffer Rempel I\",\n    \"userEmail\" : \"u76o5sdawfph2ag\",\n    \"state\" : \"STATE_TERMINATING_FAILED\",\n    \"customerDomainPrefix\" : \"dmoi15hk5g8hk7n53g7xax5g0e80p153av5qji05ae755ijyae9wy5vmzo52w5lkb29yjkj990babq08nrl1etrky2pvzyxjevii0aujgds4onf1z8nh1zeb0ig82h4nsiqqu5dcisu\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Doreen Bergnaum\",\n    \"updateTime\" : \"2022-04-16T08:31:42.677097Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_2XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"p0bpuj9vyalieo4m1s1vr8guqji\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/700996\",\n      \"entityId\" : \"vf7f\",\n      \"userEmail\" : \"dfm7h2tzhy6nr9wy1c8v5l3yyi4pbvsleg0hhdme9k5qqtriod027kd8v0jew4jt4fzrbunoe4t1mzeo81z06r0cu3xtehblpaausoi4xyqm009fj5w0exdsldnhieadiy688f08sedt3804czfer76aygc7kpetc32zq8tetsps9ezvow8zs4fr73\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/106056\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/321228\",\n      \"rootUri\" : \"https://web.example.mocklab.io/048249\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/419247\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Yost\",\n      \"givenName\" : \"Collin\"\n    },\n    \"createTime\" : \"2022-05-30T08:32:42.677611Z\",\n    \"name\" : \"Chet Champlin\",\n    \"userEmail\" : \"xj1i32y95s8fd4dniucs0iqdoo8y613s22w525o2pdn5pzav7nir144hu9nvixwec2vcf2ey1fbtl6rztjesk7r7pahrf7guqrt57zoedj4bkgyoztctfflx\",\n    \"state\" : \"STATE_TERMINATED\",\n    \"customerDomainPrefix\" : \"kgabla3b9k4baa4i1tooqebgvgd1tvif3yltdkzaprr152fu2qxmy\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Isiah Reilly\",\n    \"updateTime\" : \"2023-03-05T09:12:42.677762Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_2XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"tfzbwk61vvf6fvthl0zsq7orj4qx650pwd9p8z1p2hsqised8j53roewazzaqvqsgezf8l04exyf9galpgx2n78q0s0626x1j4f6c5qaflvbi4w47jpuxyupk1t9pc4ka1w15ghm0vang0dwrsw1dur8j1u80b45sbdtip9yyyapwr8n946ejygxlojy1n0kat4p\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/918642\",\n      \"entityId\" : \"cgei\",\n      \"userEmail\" : \"dfgd7522ig4aetr1v3cjmmaavp9bipzjj9oeeq5tb1tt8gpxdi6e4uafauf3dfod29ezsaasa8yghq93081xff0x5w3xuakicryewwnihd6jewydiy0qew15iv4e\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/004235\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/205939\",\n      \"rootUri\" : \"https://web.example.mocklab.io/195091\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/555233\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Mosciski\",\n      \"givenName\" : \"Tyrone\"\n    },\n    \"createTime\" : \"2023-01-11T05:59:42.678263Z\",\n    \"name\" : \"Rosaura Kub\",\n    \"userEmail\" : \"hnkuh46t3lzvwz8xtobvmpx99u3oeyssl0yyg5aawlhzbqhtoae162rbmmdyppzazvqrveg73kw825ibhw6147us0d9z22ak\",\n    \"state\" : \"STATE_TERMINATED\",\n    \"customerDomainPrefix\" : \"xuagyimzodhbg3z7iub0jgr5\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Lidia Spinka Jr.\",\n    \"updateTime\" : \"2022-10-27T05:31:42.678403Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_MEDIUM\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"qsnafkn9e8c5975d6ma4rau90e9c7gcsu09bdb473ucrns1xs8uwdluknkg3tw33b21qsm00uqvfr2o9paf3fp3dvn8ucljulo3bp4\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/075577\",\n      \"entityId\" : \"289p\",\n      \"userEmail\" : \"ppm4qfk2jb32hvbual3ytefuwt3fg8i40xhdzyx9ojx8fuz7jt3k2save2xz22vc0nbhzk057e7v64rmu\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/707768\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/123563\",\n      \"rootUri\" : \"https://web.example.mocklab.io/571224\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/515379\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Hartmann\",\n      \"givenName\" : \"Alex\"\n    },\n    \"createTime\" : \"2023-02-12T06:49:42.678894Z\",\n    \"name\" : \"Mr. Valrie Tromp\",\n    \"userEmail\" : \"1qvsafbnuox7r\",\n    \"state\" : \"STATE_TERMINATING_FAILED\",\n    \"customerDomainPrefix\" : \"nl6igzez3ekcdrd4bhabg627xvpio5z0u97c3f0aksi4x1pgrgo7iumcbuhj32x0v06vpgqf5xw0h926j3fcccv5ie7e7ixx64lich49spyjr7r6a6a1m924i7mq9iwt73zv235nykk25y9gl9\"\n  } ],\n  \"unreachable\" : [ \"d38hf4gum4c0govynswnhdmr0jfh6nzc6huk7ibw2aknsjtg3sovpyfh7ylv89somsxhq73rj25cdoe3owaewtndlxnmcudf9ysw153ynx4day8zewzic2lw9pw5fifen5wlf3t6ce0h4dt\", \"yqvn6akhw5r\" ],\n  \"nextPageToken\" : \"zyk4s91gswgtkg2hmcvrqzf0dgpolj3uwi3lyx2kiw5s76wjpd7ls0cknmlwajk4mekxdtogr5kgb5wqs1ihd4bmrj6oqj09pzrtkyu16bnxweyjac2mnkh2n477hvk6z4k5kpluo7pqn1t4399lcaxlwhi8grve6uvojs0zd99k6v1vx5oa3ccelh989m99j18g\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b00dacaa-9352-4f77-a3f0-e100692d4120",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:42.679199Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.list",
          "schema" : {
            "description" : "Message for response to listing ContactCenters",
            "properties" : {
              "contactCenters" : {
                "description" : "The list of ContactCenter",
                "items" : {
                  "$ref" : "#/components/schemas/ContactCenter"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A token identifying a page of results the server should return.",
                "type" : "string"
              },
              "unreachable" : {
                "description" : "Locations that could not be reached.",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "d32a8d6b-2f52-48fd-a1d4-67db37692841",
    "name" : "Starts asynchronous cancellation on a long-running operation. The server makes a...",
    "request" : {
      "urlPath" : "/v1alpha1/Hollis+Quitzon:cancel",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d32a8d6b-2f52-48fd-a1d4-67db37692841",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:42.673486Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.cancel",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "7d7f254c-463f-4f60-a112-1d7650edaa03",
    "name" : "Lists operations that match the specified filter in the request. If the server d...",
    "request" : {
      "urlPath" : "/v1alpha1/Chung+Larson/operations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"operations\" : [ {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Mr. Donn Kreiger\",\n    \"error\" : {\n      \"code\" : 482267318,\n      \"details\" : [ { }, { } ],\n      \"message\" : \"Quibusdam corporis doloremque tempore deserunt. Omnis error at. Omnis non illum. Quae ea ut ducimus inventore.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Miss Avery Altenwerth\",\n    \"error\" : {\n      \"code\" : 315681719,\n      \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Dolores mollitia a quo asperiores molestiae. Minima repellat sequi corrupti minus beatae deleniti. Reiciendis eos sed. Ipsa sed rem hic voluptate et debitis eos.\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Bianca Leffler\",\n    \"error\" : {\n      \"code\" : 1312831371,\n      \"details\" : [ { }, { }, { }, { } ],\n      \"message\" : \"Eos suscipit consequatur animi. Tenetur ut non deserunt. Ea et libero est quae maxime minima. Provident consequatur optio.\"\n    },\n    \"done\" : false\n  } ],\n  \"nextPageToken\" : \"y4m2qutwi\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7d7f254c-463f-4f60-a112-1d7650edaa03",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:42.673405Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.list",
          "schema" : {
            "description" : "The response message for Operations.ListOperations.",
            "properties" : {
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              },
              "operations" : {
                "description" : "A list of operations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Operation"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "29484542-511f-462d-bd4a-6e0196c2e47f",
    "name" : "Lists information about the supported locations for this service.",
    "request" : {
      "urlPath" : "/v1alpha1/Wiley+Hodkiewicz/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"t67823xui8tr3esull47fgioifwqejd12v81gwasb6dlemdwi0leziw4c8qydczhqt2y7omvvny96hvgzst2u57mnar9zq21x3cea65qur510c2wkvz77o7bnaojmjkbq2cq7wg9835dcr0y17g2kp1x1697cl\",\n  \"locations\" : [ {\n    \"metadata\" : { },\n    \"displayName\" : \"Stacy Aufderhar\",\n    \"locationId\" : \"yitz\",\n    \"name\" : \"Vance Kilback\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Leo Cruickshank\",\n    \"locationId\" : \"sy4w\",\n    \"name\" : \"Sara Lowe\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Christoper Bashirian\",\n    \"locationId\" : \"p4fk\",\n    \"name\" : \"Mrs. Rogelio Rogahn\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Ivonne Reinger II\",\n    \"locationId\" : \"lvh1\",\n    \"name\" : \"Miss Mckinley Watsica\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Jayson Kertzmann\",\n    \"locationId\" : \"2imx\",\n    \"name\" : \"Emmanuel Schuster\",\n    \"labels\" : { }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "29484542-511f-462d-bd4a-6e0196c2e47f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:42.672917Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.list",
          "schema" : {
            "description" : "The response message for Locations.ListLocations.",
            "properties" : {
              "locations" : {
                "description" : "A list of locations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Location"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "076f942f-9b7e-4fba-98a6-63722246445c",
    "name" : "Updates the parameters of a single ContactCenter.",
    "request" : {
      "urlPath" : "/v1alpha1/Junita+Rolfson",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Elda Monahan\",\n  \"error\" : {\n    \"code\" : 574427176,\n    \"details\" : [ { }, { } ],\n    \"message\" : \"Sint vero commodi delectus delectus suscipit. Quas quo deleniti omnis. Quo animi hic maxime. Temporibus optio illum et.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "076f942f-9b7e-4fba-98a6-63722246445c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:42.671926Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "975a0aaf-a829-4ab7-adaf-389d0ecee095",
    "name" : "Gets the latest state of a long-running operation. Clients can use this method t...",
    "request" : {
      "urlPath" : "/v1alpha1/Darryl+Grimes",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Santos Conroy\",\n  \"error\" : {\n    \"code\" : 656661395,\n    \"details\" : [ { }, { }, { } ],\n    \"message\" : \"Recusandae aspernatur reprehenderit fugit. Consequatur aut assumenda placeat est facere. Omnis molestias sunt ipsa. A voluptatem exercitationem sint.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "975a0aaf-a829-4ab7-adaf-389d0ecee095",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:42.671695Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.get",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 7
  }, {
    "id" : "955c663f-b9dd-4da8-b7eb-583f1ac260bb",
    "name" : "Deletes a long-running operation. This method indicates that the client is no lo...",
    "request" : {
      "urlPath" : "/v1alpha1/Cleveland+Quigley",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "955c663f-b9dd-4da8-b7eb-583f1ac260bb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:42.671396Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 8
  } ]
}