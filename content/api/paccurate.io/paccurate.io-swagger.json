{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "paccurate.io",
    "version" : "0.1.1"
  },
  "servers" : [ {
    "url" : "/"
  } ],
  "paths" : {
    "/" : {
      "post" : {
        "description" : "a pure-JSON endpoint for packing requests.\n",
        "requestBody" : {
          "description" : "complete set of items, boxes, and parameters to pack.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Pack"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Successful pack.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "PackResponse",
                  "type" : "object",
                  "properties" : {
                    "boxes" : {
                      "type" : "array",
                      "description" : "List of boxes, packed, with their contained items.",
                      "items" : {
                        "$ref" : "#/components/schemas/Box"
                      }
                    },
                    "built" : {
                      "type" : "string",
                      "description" : "build timestamp of engine."
                    },
                    "leftovers" : {
                      "type" : "array",
                      "description" : "items left over that could not be packed into any available boxes.",
                      "items" : {
                        "$ref" : "#/components/schemas/Item"
                      }
                    },
                    "lenBoxes" : {
                      "type" : "integer",
                      "description" : "cardinality of all packed boxes"
                    },
                    "lenItems" : {
                      "type" : "integer",
                      "description" : "cardinality of all items"
                    },
                    "lenLeftovers" : {
                      "type" : "integer",
                      "description" : "cardinality of items unabled to be packed"
                    },
                    "packTime" : {
                      "type" : "number",
                      "description" : "seconds spent in packing"
                    },
                    "renderTime" : {
                      "type" : "number",
                      "description" : "seconds spent in rendering and placement instruction creation of packing solution"
                    },
                    "scripts" : {
                      "type" : "string",
                      "description" : "additional javascripts for any image loading."
                    },
                    "styles" : {
                      "type" : "string",
                      "description" : "additional styles for pack images"
                    },
                    "svgs" : {
                      "type" : "string",
                      "description" : "all box SVG images"
                    },
                    "title" : {
                      "type" : "string",
                      "description" : "title of packing result, when applicable."
                    },
                    "totalCost" : {
                      "type" : "integer",
                      "description" : "total estimated cost of all packed boxes, when applicable, in cents."
                    },
                    "totalTime" : {
                      "type" : "number",
                      "description" : "seconds spent generating response, total."
                    },
                    "version" : {
                      "type" : "string",
                      "description" : "version of engine"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request. Malformed or some other problem occurred processing the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid input. The request was well-formed, but the parameters were contradictory, invalid, or otherwise somehow unable to be processed. More information will be contained in the error details.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "Rate limited. Without an API key, only 10 unique requests are allowed per day for testing or demonstration purposes. Note that a randomized pack repeated is only a single unique request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Box" : {
        "description" : "A completed, packed box.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/BoxProperties"
        }, {
          "type" : "object",
          "properties" : {
            "dimensionalWeight" : {
              "type" : "number",
              "description" : "the calculated dimensional weight of this box, if applicable."
            },
            "dimensionalWeightUsed" : {
              "type" : "boolean",
              "description" : "whether or not dimensional weight was used for this box."
            },
            "id" : {
              "type" : "integer"
            },
            "items" : {
              "title" : "items",
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Item"
              }
            },
            "svg" : {
              "type" : "string",
              "description" : "raw svg of visualization."
            },
            "volumeMax" : {
              "minimum" : 0,
              "type" : "number",
              "description" : "total volume of the box."
            },
            "volumeRemaining" : {
              "minimum" : 0,
              "type" : "number",
              "description" : "remaining volume of the box."
            },
            "volumeUsed" : {
              "minimum" : 0,
              "type" : "number",
              "description" : "utilized volume of the box."
            },
            "volumeUtilization" : {
              "maximum" : 1,
              "minimum" : 0,
              "type" : "number",
              "description" : "percentage of volume utilized by packed items."
            },
            "weightNet" : {
              "minimum" : 0,
              "type" : "number",
              "description" : "total weight of box's contents, not including the box's empty (tare) weight."
            },
            "weightRemaining" : {
              "minimum" : 0,
              "type" : "number",
              "description" : "remaining weight of the box."
            },
            "weightUsed" : {
              "minimum" : 0,
              "type" : "number",
              "description" : "utilized weight of the box."
            },
            "weightUtilization" : {
              "maximum" : 1,
              "minimum" : 0,
              "type" : "number",
              "description" : "percentage of weight utilized by packed items."
            }
          }
        } ]
      },
      "BoxProperties" : {
        "required" : [ "dimensions", "weightMax" ],
        "type" : "object",
        "properties" : {
          "dimensions" : {
            "type" : "object",
            "description" : "the [height,length,width] of the box.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Point"
            } ]
          },
          "name" : {
            "type" : "string",
            "description" : "name for the type of box."
          },
          "price" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "Fixed price of the container, in whole units of currency, default USD cents. This can represent the cost of a flat rate carton, the cost of the actual carton materials, or it can include any other flat fees that may need to be added on a <i>per-carton</i> basis, such as handling, accessorial surchages, oversize fees, etc. This value is <i>added</i> to any rate table rates defined for the carton."
          },
          "rateTable" : {
            "type" : "object",
            "description" : "An optional rate table definition for improved carton selection and pricing optimization. Defaults are included using retail rates for FedEx and UPS if carrier and service is provided, but optimization can be improved with more data passed in a carton's specific rate table. Methods are <ol><li>Provide carrier, service, and zone.</li><li>Provide all acceptable weights and prices to use for the carton, similar to actual carrier rate tables.</li><li>Provide the coefficients required for a simple linear weight-dependent pricing model.</li></ol>",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RateTable"
            } ]
          },
          "weightMax" : {
            "minimum" : 0,
            "type" : "number",
            "description" : "maximum allowable gross weight for the box, i.e., all packed item weights plus the weightTare."
          },
          "weightTare" : {
            "minimum" : 0,
            "type" : "number",
            "description" : "weight of the container when empty or otherwise unladen, i.e., of the box itself."
          }
        }
      },
      "BoxType" : {
        "description" : "box types to be used for packing.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/BoxProperties"
        } ]
      },
      "BoxTypeSet" : {
        "type" : "string",
        "description" : "box type sets for useful defaults.",
        "enum" : [ "usps", "fedex", "pallet", "customer" ]
      },
      "Error" : {
        "required" : [ "code", "message" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "maximum" : 600,
            "minimum" : 100,
            "type" : "integer"
          },
          "details" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "Item" : {
        "description" : "a specific, packed item.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ItemProperties"
        }, {
          "type" : "object",
          "properties" : {
            "index" : {
              "type" : "integer",
              "description" : "the sequence at which the item was packed."
            },
            "message" : {
              "type" : "string",
              "description" : "any relevant information or warnings about the packing of the item."
            },
            "origin" : {
              "type" : "object",
              "description" : "the [x,y,z] placement point of the back-bottom corner of the item.",
              "allOf" : [ {
                "$ref" : "#/components/schemas/Point"
              } ]
            }
          }
        } ]
      },
      "ItemProperties" : {
        "required" : [ "dimensions", "weight" ],
        "type" : "object",
        "properties" : {
          "color" : {
            "type" : "string",
            "description" : "designated color name for the item in pack visualizations."
          },
          "dimensions" : {
            "type" : "object",
            "description" : "the length, width, and height of the item.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Point"
            } ]
          },
          "name" : {
            "type" : "string",
            "description" : "name or description of item for your reference."
          },
          "refId" : {
            "type" : "integer",
            "description" : "item type reference identifier passed backed from request."
          },
          "sequence" : {
            "type" : "string",
            "description" : "A sequence value for the item. This is intended for aisle-bin locations, e.g., aisle 11 bin 20 can be '1120'. Combined with maxSequenceDistance, you can restrict cartons to only have contents from within a certain range. This is very helpful for cartonization when picking efficiency is paramount. Sequence can also be used to pre-sort items for efficient packing on any arbitrary number, such as item weight instead of the default item volume."
          },
          "weight" : {
            "type" : "number",
            "description" : "weight of this single packed item."
          }
        },
        "description" : "general properties of an item"
      },
      "ItemSet" : {
        "description" : "set of items sharing a common type.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ItemProperties"
        }, {
          "type" : "object",
          "properties" : {
            "quantity" : {
              "type" : "integer",
              "description" : "quantity of items of this type in this item set"
            }
          }
        } ]
      },
      "Pack" : {
        "type" : "object",
        "properties" : {
          "allowableOverhang" : {
            "type" : "number",
            "description" : "The amount an item can overhang lower items that it is placed upon. The units are whatever units the box and item dimensions are given in. By convention, inches."
          },
          "boxTypeSets" : {
            "type" : "array",
            "description" : "predefined box types to be used, separated by commas. Will be overridden by boxTypes. Acceptable values are <ul><li>\"fedex\"--FedEx OneRate</li><li>\"usps\"--USPS Priority Flat Rate</li><li>\"pallet\"--full-, half-, and quarter-sized 48\"x40\" pallets.",
            "items" : {
              "$ref" : "#/components/schemas/BoxTypeSet"
            }
          },
          "boxTypes" : {
            "type" : "array",
            "description" : "box type definitions for packing, will override boxTypeSets defined.",
            "items" : {
              "$ref" : "#/components/schemas/BoxType"
            }
          },
          "cohortMax" : {
            "type" : "integer",
            "description" : "the maximum number of contiguous cohorts for a given item type within a single container. E.g., if you pack 40 chairs in a single container, a cohortMax of 2 could yield one (all 40 chairs in a single block if space is availabe) or two (say, 25 chairs in one corner and 15 in the other) contiguous cohorts."
          },
          "cohortPacking" : {
            "type" : "boolean",
            "description" : "if selected, will ensure that all like items will be packed together, in no more than [cohortMax] different groups within a single container.",
            "default" : false
          },
          "coordOrder" : {
            "type" : "array",
            "description" : "If placementStyle is set to \"default\", coordOrder sets the placement priority of axes ascendingly. \"0,1,2\" would search for placement points along the Z(length,\"2\"), then Y(width,\"1\"), and finally X(height\"0\"). Keep in mind that in the default rendering the \"up\" direction is X and the other axes follow the right-hand rule.\nThis is useful for different packing methods. E.g., Utilizing \"2,0,1\" would pack a shipping container first in the Y(width) direction, then in the X(height) direction, and finally in the Z(length) direction, replication a floor-to-ceiling, front-to-back loading method.",
            "items" : {
              "type" : "integer"
            }
          },
          "corners" : {
            "type" : "boolean",
            "description" : "only pack items at valid corner points of other items (optimal)",
            "default" : true
          },
          "eye" : {
            "type" : "object",
            "description" : "The x,y,z coordinates of the virtual eye looking at the package for visualization purposes. Default is isometric, \"1,1,1\". To generate a side view, one could use \"0.001,1.0,0.001\".",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Point"
            } ]
          },
          "imgSize" : {
            "type" : "integer",
            "description" : "width of rendered SVGs in pixels."
          },
          "includeImages" : {
            "type" : "boolean",
            "description" : "include inline images, default is always on",
            "default" : true
          },
          "includeScripts" : {
            "type" : "boolean",
            "description" : "include inline javascripts and styles for base template",
            "default" : true
          },
          "interlock" : {
            "type" : "boolean",
            "description" : "alternates layFlat orientation by layer, so as to create an interlocked placement pattern and improve item stability.",
            "default" : false
          },
          "itemSets" : {
            "type" : "array",
            "description" : "item set definitions if not creating random items.",
            "items" : {
              "$ref" : "#/components/schemas/ItemSet"
            }
          },
          "key" : {
            "type" : "string",
            "description" : "issued API key."
          },
          "layFlat" : {
            "type" : "boolean",
            "description" : "aligns all items laying flat. If possible, it may create a \"brick-laying\" pattern to increase stability.",
            "default" : false
          },
          "maxSequenceDistance" : {
            "type" : "integer",
            "description" : "This is the maximum distance allowable between two sequence values of items packed in a common box. E.g., \"Distance\" for an item sequence composed of aisle/bin combinations of \"0401\" and \"1228\" has a sequence distance of \\|1228 - 401\\| = 827"
          },
          "n" : {
            "type" : "integer",
            "description" : "number of random items to generate and the quantity of each if \"random\" is set to true. a value of 5 would create 5 different items with a quantity of 5 each, making the total item quantity equal to n&sup2;"
          },
          "packOrigin" : {
            "type" : "object",
            "description" : "the x,y,z coordinates of an optional packing origin. A packing origin is used to create more balanced packing for situations where load needs to be considered. E.g., for a 40\"x48\" pallet, a packOrigin representing the middle of the pallet, \"0,20,24\", would cause placement to minimize the distance of the packed items from the center of the pallet.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Point"
            } ]
          },
          "placementStyle" : {
            "type" : "string",
            "description" : "How to place items. 'default' will defer to coordOrder, 'corner' minimizes distance to rear, bottom corner, 'wedge' minimizes distance to middle of bottom, back edge, 'mound' minimizes distance to center of carton bottom.",
            "default" : "default",
            "enum" : [ "default", "corner", "wedge", "mound", "orb" ]
          },
          "random" : {
            "type" : "boolean",
            "description" : "create random items",
            "default" : false
          },
          "randomMaxDimension" : {
            "type" : "integer",
            "description" : "maximum item dimension along a single axis for randomly generated items."
          },
          "randomMaxWeight" : {
            "type" : "integer",
            "description" : "maximum item weight for randomly generated items."
          },
          "rules" : {
            "type" : "array",
            "description" : "Array of packing rules.",
            "items" : {
              "$ref" : "#/components/schemas/Rule"
            }
          },
          "seed" : {
            "type" : "boolean",
            "description" : "if random is selected, seed the random number generator to deterministically generate random items to pack.",
            "default" : true
          },
          "sequenceHeatMap" : {
            "type" : "boolean",
            "description" : "Colorize items solely by their sequence value, light when sequence is high, dark when it is low. Useful for indicating item bin location, weight, or other sequence property that may not be apparent from the default visualization.",
            "default" : false
          },
          "sequenceSort" : {
            "type" : "boolean",
            "description" : "Whether or not the items should be initially sorted by their sequence value instead of their volume. This is not always useful, as the default \"biggest-first\" volume sort is very effective for items, and constraining by maxSequenceDistance is applied regardless of this field. That said, for doing custom pre-sorts such as weight-based instead of volume based, this value should be set to true.",
            "default" : false
          },
          "template" : {
            "type" : "string",
            "description" : "template name for markup generation.",
            "enum" : [ "demo.tmpl", "shipapp.tmpl", "boat.tmpl" ]
          },
          "usableSpace" : {
            "maximum" : 1,
            "minimum" : 0,
            "type" : "number",
            "description" : "estimate of percentage space in boxes that is usable, i.e., not packing material."
          },
          "zone" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "<b>[experimental]</b> the shipping zone in order to use basic zone-based price optimization."
          }
        }
      },
      "Point" : {
        "title" : "Point",
        "type" : "object",
        "properties" : {
          "x" : {
            "type" : "number",
            "description" : "x coordinate, used as height."
          },
          "y" : {
            "type" : "number",
            "description" : "y coordinate, used as width."
          },
          "z" : {
            "type" : "number",
            "description" : "z coordinate, used as length."
          }
        },
        "description" : "vector definition used for points, dimensions, and other spacial purposes."
      },
      "RateTable" : {
        "title" : "RateTable",
        "type" : "object",
        "properties" : {
          "basePrice" : {
            "type" : "number",
            "description" : "The basePrice can be found by estimating the lowest weight-based rate available for a given service, in the example above, solving for basePrice for a $10, 1lb package with the already-solved priceIncreaseRate yields <pre>$10 = $5/lb * 1lb + basePrice<br/>$10 = $5 + basePrice<br/>basePrice = $5</pre>"
          },
          "carrier" : {
            "type" : "string",
            "description" : "carrier name for rate table to use"
          },
          "dimFactor" : {
            "type" : "number",
            "description" : "This is the Dimensional Weight divisor. It is given in units of volume per unit weight, e.g., the standard of \"139\" represents 139 cubic inches per pound, and is used to convert the total volume of a carton into a functional minimum weight to be used when rating the carton. E.g., a carton with dimensions 10\" x 10\" x 13.9\" would yield a volume of 1390 cubic inches. This yields <pre>cartonEffectiveMinimumWeight = 1390in&sup3; / 139in&sup3;/lb<br/>cartonEffectiveMinimumWeight = 10lbs</pre>"
          },
          "priceIncreaseRate" : {
            "type" : "number",
            "description" : "Instead of providing the full rate table, you can list a carton \"basePrice\" and a carton \"priceIncreaseRate\". These two values will be used in a simple linear model to guess carton price, i.e., <pre>cartonPrice = priceIncreaseRate * cartonWeight + basePrice</pre> Oftentimes, this will be enough to get accurate carton selections without needing to send complete customer-based rates. It's worth considering, as the prices are only estimates to be used in carton selection, with final rating of cartons happening outside of paccurate. This is the predicted rate of increase for a weight-based pricing model. The simplest way to find a servicable value is to take <pre>priceIncreaseRate = (maximumPrice - minimumPrice)/(maximumWeight - minimumWeight)</pre> In the example above, this would yield <pre>priceIncreaseRate = ($20-$10)/(3lbs-1lb)<br/>priceIncreaseRate = $10/2lbs<br/>priceIncreaseRate = $5/lb</pre>"
          },
          "rates" : {
            "type" : "array",
            "description" : "list of prices to use for the weight that corresponds to its index, e.g., [10, 15, 20] would be $10 for 1lb, $15 for 2lbs, $20 for 3lbs.",
            "items" : {
              "type" : "number"
            }
          },
          "service" : {
            "type" : "string",
            "description" : "service name for rate table to use"
          },
          "weights" : {
            "type" : "array",
            "description" : "list of weights to use for the rate that corresponds to its index, e.g., [1, 2, 3] would mean 1lb for the minimum rate ($10), 2lbs for the second rate ($15), and 3lbs for the highest rate ($20). Note that if the highest value from this list is less than the weightMax of the carton, all carton weights exceeding the maximum from this list up to the carton weightMax will not pro-rate but will be estimated at the maximum value in the rate table.",
            "items" : {
              "type" : "number"
            }
          },
          "zone" : {
            "type" : "string",
            "description" : "zone of rate table to use"
          }
        }
      },
      "Rule" : {
        "required" : [ "operation" ],
        "type" : "object",
        "properties" : {
          "itemRefId" : {
            "type" : "integer",
            "description" : "reference ID for the item the rule applies to."
          },
          "operation" : {
            "type" : "string",
            "description" : "Rule type for this definition. Valid operation values include\n<ul>\n  <li>\n    <h3>exclude</h3>\n    <p><b>itemRefId</b> is excluded from being packed in the same carton with all <b>targetItemRefIds</b></p>\n    <pre>{\n  \"operation\": \"exclude\",\n  \"itemRefId\": 0,\n  \"targetItemRefIds\": [1,2]\n}</pre>\n\n\n  </li>\n  <li>\n    <h3>exclude-all</h3>\n    <p><b>itemRefId</b> is excluded from being packed in the same carton with all items without its refId</p>\n    <pre>{\n  \"operation\": \"exclude-all\",\n  \"itemRefId\": 0\n}</pre>\n\n\n  </li>\n  <li>\n    <h3>pack-as-is</h3>\n    <p>Each individual item with <b>itemRefId</b> is packed in a carton matching its exact dimensions, i.e., it is assumed the item is ship-ready and bypasses being placed in a box. If you have an item quantity of 6, it will place the items in 6 boxes.</p>\n    <pre>{\n  \"operation\": \"pack-as-is\",\n  \"itemRefId\": 0\n}</pre>\n\n\n  </li>\n  <li>\n    <h3>irregular</h3>\n    <p>There are two types of irregular item packings right now, \"nesting\" and \"roll\".</p>\n    <ul>\n      <li>\n        <h4>\"nesting\"</h4> \n        <p>\"nesting\" is where the first item has full dimensions, and subsequent items have diminished dimensions. E.g.,\n        a flower pot may have dimensions of 6\" x 6\" x 6\", but additional flower pots can nest in the first pot, and have\n        effective dimensions of 1\" x 6\" x 6\". These cases are almost always have a single direction that nesting can occur\n        in--two pots must both be right-side up and one on top of the other if they are to nest--so the rule options must\n        reflect these restrictions.<p/>\n        <p><b>\"options\"</b> contents:</p>\n        <table>\n          <tr><th>key</th><th>value</th><th>description</th></tr>\n          <tr><td>type</td><td>\"nesting\"</td></tr>\n          <tr><td>additionalDimensionsX</td><td><i>number</i></td></tr>\n          <tr><td>additionalDimensionsY</td><td><i>number</i></td></tr>\n          <tr><td>additionalDimensionsZ</td><td><i>number</i></td></tr>\n          <tr><td>nestingOrientation</td><td>0, 1, or 2</td><td>axis index of direction of stacking (0 for vertical/X/\"dinner plates\", 1 for shorter-horizontal/Y/\"shopping carts\", 2 for long-horizontal/Z/\"newsstand magazines\")</td></tr>\n          <tr><td>nestingLimit</td><td><i>integer</i></td><td>total number of nested items allowed in a single \"stack\"</td></tr>\n        </table>\n        <pre>{\n  \"operation\": \"irregular\",\n  \"itemRefId\": 0,\n  \"options\": {\n    \"type\": \"nesting\",\n    \"additionalDimensionsX\": 1.0,\n    \"additionalDimensionsY\": 6.0,\n    \"additionalDimensionsZ\": 6.0,\n    \"nestingOrientation\": 0,\n    \"nestingLimit\": 5\n  }\n}</pre>\n      </li>\n      <li>\n        <h4>\"roll\"</h4> \n        <p>A rolled irregular item is simply where the item dimensions X, Y, and Z, represent the thickness, width, and total\n        length of a material meant to be rolled up (possibly on a spool, dowel, etc.) and shipped as such. Marked this way, the bounding box\n        of the roll cylinder will be used as its shipping dimensions. E.g., a roll has a width 60 inches and a diameter of 12 inches,\n        it will be shipped as if it were a 12\" x 12\" x 60\" item. Rolls can have a maximum allowable diameter, and any rolls that must be\n        split will have their weights calculated on a pro-rated basis of the total length and weight in the item contents.<p/>\n        <p><b>\"options\"</b> contents:</p>\n        <table>\n          <tr><th>key</th><th>value</th><th>description</th></tr>\n          <tr><td>type</td><td>\"roll\"</td></tr>\n          <tr><td>innerDiameter</td><td><i>number</i></td><td>the inner diameter of any dowel or tube used that serves as the initial diameter of the roll.</td></tr>\n          <tr><td>spoolWeight</td><td><i>number</i></td><td>the additional weight of each spool or dowel if applicable</td></tr>\n          <tr><td>maxDiameter</td><td><i>number</i></td><td>the maximum acceptable diameter of a resultant roll.</td></tr>\n          <tr><td>maxWeight</td><td><i>number</i></td><td>the maximum acceptable weight of a resultant roll.</td></tr>\n          <tr><td>minRollLength</td><td><i>number</i></td><td>the minimum length above which rolling will occur. E.g., if less than 12\" remain, ship it flat without rolling.</td></tr>\n        </table>\n      <pre>{\n  \"operation\": \"irregular\",\n  \"itemRefId\": 0,\n  \"options\": {\n    \"type\": \"roll\",\n    \"innerDiameter\": 1.0,\n    \"spoolWeight\": 1.0,\n    \"maxDiameter\": 8.0,\n    \"maxWeight\": 150,\n    \"minRollLength\": 12\n  }\n}</pre>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <h3>lock-orientation</h3>\n    <p><b>itemRefId</b> is locked from rotation of its original dimensions, with axes of rotation excepted by <b>freeAxes</b></p>\n    <p><b>\"options\"</b> contents:</p>\n       <table>\n         <tr><th>key</th><th>value</th><th>description</th></tr>\n         <tr><td>freeAxes</td><td>array</td><td>Array of axis indices to be allowed rotational freedom. E.g., [0] for only yaw allowed, [0,1] for yaw and roll.</td></tr>\n       </table>\n    <pre>{\n  \"operation\": \"lock-orientation\",\n  \"itemRefId\": 0,\n  \"options\": {\n    \"freeAxes\": [0,1]\n  }\n}</pre>\n\n\n  </li>\n</ul>\n",
            "enum" : [ "exclude", "exclude-all", "pack-as-is", "irregular", "lock-orientation" ]
          },
          "options" : {
            "type" : "object",
            "description" : "additional key-value options to pass for rule based on operation type."
          },
          "parameters" : {
            "type" : "array",
            "description" : "array of supplementary parameters to pass for rule, mostly deprecated. may be different from options.",
            "items" : {
              "type" : "string"
            }
          },
          "targetItemRefIds" : {
            "type" : "array",
            "description" : "target item reference IDs that the rule applies to.",
            "items" : {
              "type" : "integer"
            }
          }
        },
        "description" : "Rule definition for packing constraints."
      }
    }
  }
}