{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Content Moderator Client",
    "description" : "You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.\r\n\r\nWhen using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB. \r\nText can be at most 1024 characters long. \r\nIf the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.",
    "version" : "1.0"
  },
  "servers" : [ {
    "url" : "https://azure.local/"
  } ],
  "security" : [ {
    "apim_key" : null
  } ],
  "paths" : {
    "/contentmoderator/lists/v1.0/imagelists" : {
      "get" : {
        "tags" : [ "ListManagementImageLists" ],
        "description" : "Gets all the Image Lists.",
        "operationId" : "ListManagementImageLists_GetAllImageLists",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImageLists"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ListManagementImageLists" ],
        "description" : "Creates an image list.",
        "operationId" : "ListManagementImageLists_Create",
        "parameters" : [ {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "The content type.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Schema of the body.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "Description" : {
                    "type" : "string",
                    "description" : "Description of the list."
                  },
                  "Metadata" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Metadata of the list."
                  },
                  "Name" : {
                    "type" : "string",
                    "description" : "Name of the list."
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImageList"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/lists/v1.0/imagelists/{listId}" : {
      "get" : {
        "tags" : [ "ListManagementImageLists" ],
        "description" : "Returns the details of the image list with list Id equal to list Id passed.",
        "operationId" : "ListManagementImageLists_GetDetails",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImageList"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ListManagementImageLists" ],
        "description" : "Updates an image list with list Id equal to list Id passed.",
        "operationId" : "ListManagementImageLists_Update",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "The content type.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Schema of the body.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "Description" : {
                    "type" : "string",
                    "description" : "Description of the list."
                  },
                  "Metadata" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Metadata of the list."
                  },
                  "Name" : {
                    "type" : "string",
                    "description" : "Name of the list."
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImageList"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ListManagementImageLists" ],
        "description" : "Deletes image list with the list Id equal to list Id passed.",
        "operationId" : "ListManagementImageLists_Delete",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/lists/v1.0/imagelists/{listId}/RefreshIndex" : {
      "post" : {
        "tags" : [ "ListManagementImageLists" ],
        "description" : "Refreshes the index of the list with list Id equal to list Id passed.",
        "operationId" : "ListManagementImageLists_RefreshIndex",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RefreshIndex"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/lists/v1.0/imagelists/{listId}/images" : {
      "get" : {
        "tags" : [ "ListManagementImage" ],
        "description" : "Gets all image Ids from the list with list Id equal to list Id passed.",
        "operationId" : "ListManagementImage_GetAllImageIds",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImageIds"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ListManagementImage" ],
        "description" : "Add an image to the list with list Id equal to list Id passed.",
        "operationId" : "ListManagementImage_AddImage",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Tag for the image.",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "label",
          "in" : "query",
          "description" : "The image label.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Image"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ListManagementImage" ],
        "description" : "Deletes all images from the list with list Id equal to list Id passed.",
        "operationId" : "ListManagementImage_DeleteAllImages",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/lists/v1.0/imagelists/{listId}/images/{ImageId}" : {
      "delete" : {
        "tags" : [ "ListManagementImage" ],
        "description" : "Deletes an image from the list with list Id and image Id passed.",
        "operationId" : "ListManagementImage_DeleteImage",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ImageId",
          "in" : "path",
          "description" : "Id of the image.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/lists/v1.0/termlists" : {
      "get" : {
        "tags" : [ "ListManagementTermLists" ],
        "description" : "gets all the Term Lists",
        "operationId" : "ListManagementTermLists_GetAllTermLists",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TermLists"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ListManagementTermLists" ],
        "description" : "Creates a Term List",
        "operationId" : "ListManagementTermLists_Create",
        "parameters" : [ {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "The content type.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Schema of the body.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "Description" : {
                    "type" : "string",
                    "description" : "Description of the list."
                  },
                  "Metadata" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Metadata of the list."
                  },
                  "Name" : {
                    "type" : "string",
                    "description" : "Name of the list."
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TermList"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/lists/v1.0/termlists/{listId}" : {
      "get" : {
        "tags" : [ "ListManagementTermLists" ],
        "description" : "Returns list Id details of the term list with list Id equal to list Id passed.",
        "operationId" : "ListManagementTermLists_GetDetails",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TermList"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ListManagementTermLists" ],
        "description" : "Updates an Term List.",
        "operationId" : "ListManagementTermLists_Update",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "The content type.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Schema of the body.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "Description" : {
                    "type" : "string",
                    "description" : "Description of the list."
                  },
                  "Metadata" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Metadata of the list."
                  },
                  "Name" : {
                    "type" : "string",
                    "description" : "Name of the list."
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TermList"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ListManagementTermLists" ],
        "description" : "Deletes term list with the list Id equal to list Id passed.",
        "operationId" : "ListManagementTermLists_Delete",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/lists/v1.0/termlists/{listId}/RefreshIndex" : {
      "post" : {
        "tags" : [ "ListManagementTermLists" ],
        "description" : "Refreshes the index of the list with list Id equal to list ID passed.",
        "operationId" : "ListManagementTermLists_RefreshIndex",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "language",
          "in" : "query",
          "description" : "Language of the terms.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RefreshIndex"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/lists/v1.0/termlists/{listId}/terms" : {
      "get" : {
        "tags" : [ "ListManagementTerm" ],
        "description" : "Gets all terms from the list with list Id equal to the list Id passed.",
        "operationId" : "ListManagementTerm_GetAllTerms",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "language",
          "in" : "query",
          "description" : "Language of the terms.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The pagination start index.",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The max limit.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Terms"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ListManagementTerm" ],
        "description" : "Deletes all terms from the list with list Id equal to the list Id passed.",
        "operationId" : "ListManagementTerm_DeleteAllTerms",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "language",
          "in" : "query",
          "description" : "Language of the terms.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/lists/v1.0/termlists/{listId}/terms/{term}" : {
      "post" : {
        "tags" : [ "ListManagementTerm" ],
        "description" : "Add a term to the term list with list Id equal to list Id passed.",
        "operationId" : "ListManagementTerm_AddTerm",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "term",
          "in" : "path",
          "description" : "Term to be deleted",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "language",
          "in" : "query",
          "description" : "Language of the terms.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ListManagementTerm" ],
        "description" : "Deletes a term from the list with list Id equal to the list Id passed.",
        "operationId" : "ListManagementTerm_DeleteTerm",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "List Id of the image list.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "term",
          "in" : "path",
          "description" : "Term to be deleted",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "language",
          "in" : "query",
          "description" : "Language of the terms.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessImage/Evaluate" : {
      "post" : {
        "tags" : [ "ImageModeration" ],
        "description" : "Returns probabilities of the image containing racy or adult content.",
        "operationId" : "ImageModeration_Evaluate",
        "parameters" : [ {
          "name" : "CacheImage",
          "in" : "query",
          "description" : "Whether to retain the submitted image for future use; defaults to false if omitted.",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Evaluate"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessImage/FindFaces" : {
      "post" : {
        "tags" : [ "ImageModeration" ],
        "description" : "Returns the list of faces found.",
        "operationId" : "ImageModeration_FindFaces",
        "parameters" : [ {
          "name" : "CacheImage",
          "in" : "query",
          "description" : "Whether to retain the submitted image for future use; defaults to false if omitted.",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of faces found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FoundFaces"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessImage/Match" : {
      "post" : {
        "tags" : [ "ImageModeration" ],
        "description" : "Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using <a href=\"/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe\">this</a> API. \r\n\r\nReturns ID and tags of matching image.<br/>\r\n<br/>\r\nNote: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.",
        "operationId" : "ImageModeration_Match",
        "parameters" : [ {
          "name" : "listId",
          "in" : "query",
          "description" : "The list Id.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "CacheImage",
          "in" : "query",
          "description" : "Whether to retain the submitted image for future use; defaults to false if omitted.",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Supported values for tags are:\r\n<ul>\r\n<li>101: Nudity</li>\r\n<li>102: Sexual Content</li>\r\n<li>201: Alcohol</li>\r\n<li>202: Tobacco</li>\r\n<li>203: Drugs</li>\r\n<li>301: Child Exploitation</li>\r\n<li>401: Violence</li>\r\n<li>402: Weapons</li>\r\n<li>403: Gore</li>\r\n<li>501: Profanity</li>\r\n<li>502: Vulgarity</li>\r\n</ul>.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MatchResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessImage/OCR" : {
      "post" : {
        "tags" : [ "ImageModeration" ],
        "description" : "Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.",
        "operationId" : "ImageModeration_OCR",
        "parameters" : [ {
          "name" : "language",
          "in" : "query",
          "description" : "Language of the terms.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "CacheImage",
          "in" : "query",
          "description" : "Whether to retain the submitted image for future use; defaults to false if omitted.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "enhanced",
          "in" : "query",
          "description" : "When set to True, the image goes through additional processing to come with additional candidates.\n\nimage/tiff is not supported when enhanced is set to true\n\nNote: This impacts the response time.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The text found and list of candidate text details.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OCR"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessText/DetectLanguage" : {
      "post" : {
        "tags" : [ "TextModeration" ],
        "description" : "This operation will detect the language of given input content. Returns the <a href=\"http://www-01.sil.org/iso639-3/codes.asp\">ISO 639-3 code</a> for the predominant language comprising the submitted text. Over 110 languages supported.",
        "operationId" : "TextModeration_DetectLanguage",
        "parameters" : [ {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "The content type.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "text/plain", "text/html", "text/xml", "text/markdown" ]
          }
        } ],
        "requestBody" : {
          "description" : "Content to screen.",
          "content" : {
            "text/plain" : {
              "schema" : {
                "type" : "object",
                "format" : "file"
              }
            },
            "text/html" : {
              "schema" : {
                "type" : "object",
                "format" : "file"
              }
            },
            "text/xml" : {
              "schema" : {
                "type" : "object",
                "format" : "file"
              }
            },
            "text/markdown" : {
              "schema" : {
                "type" : "object",
                "format" : "file"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The detected language result.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DetectedLanguage"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/moderate/v1.0/ProcessText/Screen/" : {
      "post" : {
        "tags" : [ "TextModeration" ],
        "summary" : "Detect profanity and match against custom and shared blacklists",
        "description" : "Detects profanity in more than 100 languages and match against custom and shared blacklists.",
        "operationId" : "TextModeration_ScreenText",
        "parameters" : [ {
          "name" : "language",
          "in" : "query",
          "description" : "Language of the text.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "autocorrect",
          "in" : "query",
          "description" : "Autocorrect text.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "PII",
          "in" : "query",
          "description" : "Detect personal identifiable information.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "listId",
          "in" : "query",
          "description" : "The list Id.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "classify",
          "in" : "query",
          "description" : "Classify input.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "The content type.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "text/plain", "text/html", "text/xml", "text/markdown" ]
          }
        } ],
        "requestBody" : {
          "description" : "Content to screen.",
          "content" : {
            "text/plain" : {
              "schema" : {
                "type" : "object",
                "format" : "file"
              }
            },
            "text/html" : {
              "schema" : {
                "type" : "object",
                "format" : "file"
              }
            },
            "text/xml" : {
              "schema" : {
                "type" : "object",
                "format" : "file"
              }
            },
            "text/markdown" : {
              "schema" : {
                "type" : "object",
                "format" : "file"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Screen"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/jobs" : {
      "post" : {
        "tags" : [ "Reviews" ],
        "description" : "A job Id will be returned for the content posted on this endpoint. \r\n\r\nOnce the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.\r\n\r\n<h3>CallBack Schemas </h3>\r\n\r\n<p>\r\n<h4>Job Completion CallBack Sample</h4><br/>\r\n\r\n{<br/>\r\n  \"JobId\": \"<Job Id>,<br/>\r\n  \"ReviewId\": \"<Review Id, if the Job resulted in a Review to be created>\",<br/>\r\n  \"WorkFlowId\": \"default\",<br/>\r\n  \"Status\": \"<This will be one of Complete, InProgress, Error>\",<br/>\r\n  \"ContentType\": \"Image\",<br/>\r\n  \"ContentId\": \"<This is the ContentId that was specified on input>\",<br/>\r\n  \"CallBackType\": \"Job\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>\r\n<p>\r\n<h4>Review Completion CallBack Sample</h4><br/>\r\n\r\n{\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
        "operationId" : "Reviews_CreateJob",
        "parameters" : [ {
          "name" : "teamName",
          "in" : "path",
          "description" : "Your team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ContentType",
          "in" : "query",
          "description" : "Image, Text or Video.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "Image", "Text", "Video" ]
          }
        }, {
          "name" : "ContentId",
          "in" : "query",
          "description" : "Id/Name to identify the content submitted.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "WorkflowName",
          "in" : "query",
          "description" : "Workflow Name that you want to invoke.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "CallBackEndpoint",
          "in" : "query",
          "description" : "Callback endpoint for posting the create job result.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "The content type.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "application/json", "image/jpeg" ]
          }
        } ],
        "requestBody" : {
          "description" : "Content to evaluate.",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "ContentValue" ],
                "type" : "object",
                "properties" : {
                  "ContentValue" : {
                    "type" : "string",
                    "description" : "Content to evaluate for a job."
                  }
                }
              }
            },
            "image/jpeg" : {
              "schema" : {
                "required" : [ "ContentValue" ],
                "type" : "object",
                "properties" : {
                  "ContentValue" : {
                    "type" : "string",
                    "description" : "Content to evaluate for a job."
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobId"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobId"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/jobs/{JobId}" : {
      "get" : {
        "tags" : [ "Reviews" ],
        "description" : "Get the Job Details for a Job Id.",
        "operationId" : "Reviews_GetJobDetails",
        "parameters" : [ {
          "name" : "teamName",
          "in" : "path",
          "description" : "Your Team Name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "JobId",
          "in" : "path",
          "description" : "Id of the job.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Job"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/reviews" : {
      "post" : {
        "tags" : [ "Reviews" ],
        "description" : "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
        "operationId" : "Reviews_CreateReviews",
        "parameters" : [ {
          "name" : "UrlContentType",
          "in" : "header",
          "description" : "The content type.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "teamName",
          "in" : "path",
          "description" : "Your team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subTeam",
          "in" : "query",
          "description" : "SubTeam of your team, you want to assign the created review to.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Body for create reviews API",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "description" : "Schema of the body.",
                "items" : {
                  "required" : [ "Content", "ContentId", "Type" ],
                  "type" : "object",
                  "properties" : {
                    "CallbackEndpoint" : {
                      "type" : "string",
                      "description" : "Optional CallbackEndpoint."
                    },
                    "Content" : {
                      "type" : "string",
                      "description" : "Content to review."
                    },
                    "ContentId" : {
                      "type" : "string",
                      "description" : "Content Identifier."
                    },
                    "Metadata" : {
                      "type" : "array",
                      "description" : "Optional metadata details.",
                      "items" : {
                        "required" : [ "Key", "Value" ],
                        "type" : "object",
                        "properties" : {
                          "Key" : {
                            "type" : "string",
                            "description" : "Your key parameter."
                          },
                          "Value" : {
                            "type" : "string",
                            "description" : "Your value parameter."
                          }
                        }
                      }
                    },
                    "Type" : {
                      "type" : "string",
                      "description" : "Type of the content.",
                      "enum" : [ "Image", "Text" ]
                    }
                  },
                  "description" : "Schema items of the body."
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewList"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}" : {
      "get" : {
        "tags" : [ "Reviews" ],
        "description" : "Returns review details for the review Id passed.",
        "operationId" : "Reviews_GetReview",
        "parameters" : [ {
          "name" : "teamName",
          "in" : "path",
          "description" : "Your Team Name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reviewId",
          "in" : "path",
          "description" : "Id of the review.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Review"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames" : {
      "get" : {
        "tags" : [ "Reviews" ],
        "description" : "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
        "operationId" : "Reviews_GetVideoFrames",
        "parameters" : [ {
          "name" : "teamName",
          "in" : "path",
          "description" : "Your team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reviewId",
          "in" : "path",
          "description" : "Id of the review.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startSeed",
          "in" : "query",
          "description" : "Time stamp of the frame from where you want to start fetching the frames.",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "noOfRecords",
          "in" : "query",
          "description" : "Number of frames to fetch.",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Get frames filtered by tags.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Frames"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Reviews" ],
        "description" : "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.",
        "operationId" : "Reviews_AddVideoFrame",
        "parameters" : [ {
          "name" : "teamName",
          "in" : "path",
          "description" : "Your team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reviewId",
          "in" : "path",
          "description" : "Id of the review.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "timescale",
          "in" : "query",
          "description" : "Timescale of the video you are adding frames to.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/publish" : {
      "post" : {
        "tags" : [ "Reviews" ],
        "description" : "Publish video review to make it available for review.",
        "operationId" : "Reviews_PublishVideoReview",
        "parameters" : [ {
          "name" : "teamName",
          "in" : "path",
          "description" : "Your team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reviewId",
          "in" : "path",
          "description" : "Id of the review.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcript" : {
      "put" : {
        "tags" : [ "Reviews" ],
        "description" : "This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.",
        "operationId" : "Reviews_AddVideoTranscript",
        "parameters" : [ {
          "name" : "teamName",
          "in" : "path",
          "description" : "Your team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reviewId",
          "in" : "path",
          "description" : "Id of the review.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "The content type.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "text/plain" ]
          }
        } ],
        "requestBody" : {
          "description" : "Transcript file of the video.",
          "content" : {
            "text/plain" : {
              "schema" : {
                "type" : "object",
                "format" : "file"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcriptmoderationresult" : {
      "put" : {
        "tags" : [ "Reviews" ],
        "description" : "This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.",
        "operationId" : "Reviews_AddVideoTranscriptModerationResult",
        "parameters" : [ {
          "name" : "Content-Type",
          "in" : "header",
          "description" : "The content type.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "teamName",
          "in" : "path",
          "description" : "Your team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reviewId",
          "in" : "path",
          "description" : "Id of the review.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Body for add video transcript moderation result API",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "description" : "Schema of the body.",
                "items" : {
                  "required" : [ "Terms", "Timestamp" ],
                  "type" : "object",
                  "properties" : {
                    "Terms" : {
                      "type" : "array",
                      "description" : "Optional metadata details.",
                      "items" : {
                        "required" : [ "Index", "Term" ],
                        "type" : "object",
                        "properties" : {
                          "Index" : {
                            "type" : "integer",
                            "description" : "Index of the word"
                          },
                          "Term" : {
                            "type" : "string",
                            "description" : "Detected word."
                          }
                        }
                      }
                    },
                    "Timestamp" : {
                      "type" : "string",
                      "description" : "Timestamp of the image."
                    }
                  },
                  "description" : "Schema items of the body."
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "description" : "Error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "APIError" : {
        "type" : "object",
        "properties" : {
          "Error" : {
            "$ref" : "#/components/schemas/Error"
          }
        },
        "description" : "Error information returned by the API"
      },
      "Address" : {
        "type" : "object",
        "properties" : {
          "Index" : {
            "type" : "integer",
            "description" : "Index(Location) of the Address in the input text content."
          },
          "Text" : {
            "type" : "string",
            "description" : "Detected Address."
          }
        },
        "description" : "Address details."
      },
      "Candidate" : {
        "type" : "object",
        "properties" : {
          "Confidence" : {
            "type" : "number",
            "description" : "The confidence level."
          },
          "Text" : {
            "type" : "string",
            "description" : "The text found."
          }
        },
        "description" : "OCR candidate text."
      },
      "Classification" : {
        "type" : "object",
        "properties" : {
          "Category1" : {
            "type" : "object",
            "properties" : {
              "Score" : {
                "type" : "number",
                "description" : "The category1 score."
              }
            },
            "description" : "The category1 score details of the text. <a href=\"https://aka.ms/textClassifyCategories\">Click here</a> for more details on category classification."
          },
          "Category2" : {
            "type" : "object",
            "properties" : {
              "Score" : {
                "type" : "number",
                "description" : "The category2 score."
              }
            },
            "description" : "The category2 score details of the text. <a href=\"https://aka.ms/textClassifyCategories\">Click here</a> for more details on category classification."
          },
          "Category3" : {
            "type" : "object",
            "properties" : {
              "Score" : {
                "type" : "number",
                "description" : "The category3 score."
              }
            },
            "description" : "The category3 score details of the text. <a href=\"https://aka.ms/textClassifyCategories\">Click here</a> for more details on category classification."
          },
          "ReviewRecommended" : {
            "type" : "boolean",
            "description" : "The review recommended flag."
          }
        },
        "description" : "The classification details of the text."
      },
      "DetectedLanguage" : {
        "type" : "object",
        "properties" : {
          "DetectedLanguage" : {
            "type" : "string",
            "description" : "The detected language."
          },
          "Status" : {
            "$ref" : "#/components/schemas/Status"
          },
          "TrackingId" : {
            "type" : "string",
            "description" : "The tracking id."
          }
        },
        "description" : "Detect language result."
      },
      "DetectedTerms" : {
        "type" : "object",
        "properties" : {
          "Index" : {
            "type" : "integer",
            "description" : "Index(Location) of the detected profanity term in the input text content."
          },
          "ListId" : {
            "type" : "integer",
            "description" : "Matched Terms list Id."
          },
          "OriginalIndex" : {
            "type" : "integer",
            "description" : "Original Index(Location) of the detected profanity term in the input text content."
          },
          "Term" : {
            "type" : "string",
            "description" : "Detected profanity term."
          }
        },
        "description" : "Detected Terms details."
      },
      "Email" : {
        "type" : "object",
        "properties" : {
          "Detected" : {
            "type" : "string",
            "description" : "Detected Email Address from the input text content."
          },
          "Index" : {
            "type" : "integer",
            "description" : "Index(Location) of the Email address in the input text content."
          },
          "SubType" : {
            "type" : "string",
            "description" : "Subtype of the detected Email Address."
          },
          "Text" : {
            "type" : "string",
            "description" : "Email Address in the input text content."
          }
        },
        "description" : "Email Address details."
      },
      "Error" : {
        "type" : "object",
        "properties" : {
          "Code" : {
            "type" : "string"
          },
          "Message" : {
            "type" : "string"
          }
        },
        "description" : "Error body."
      },
      "Evaluate" : {
        "type" : "object",
        "properties" : {
          "AdultClassificationScore" : {
            "type" : "number",
            "description" : "The adult classification score."
          },
          "AdvancedInfo" : {
            "type" : "array",
            "description" : "The advanced info.",
            "items" : {
              "$ref" : "#/components/schemas/KeyValuePair"
            }
          },
          "CacheID" : {
            "type" : "string",
            "description" : "The cache id."
          },
          "IsImageAdultClassified" : {
            "type" : "boolean",
            "description" : "Indicates if an image is classified as adult."
          },
          "IsImageRacyClassified" : {
            "type" : "boolean",
            "description" : "Indicates if the image is classified as racy."
          },
          "RacyClassificationScore" : {
            "type" : "number",
            "description" : "The racy classification score."
          },
          "Result" : {
            "type" : "boolean",
            "description" : "Evaluate result."
          },
          "Status" : {
            "$ref" : "#/components/schemas/Status"
          },
          "TrackingId" : {
            "type" : "string",
            "description" : "The tracking id."
          }
        },
        "description" : "Evaluate response object."
      },
      "Face" : {
        "type" : "object",
        "properties" : {
          "Bottom" : {
            "type" : "integer",
            "description" : "The bottom coordinate."
          },
          "Left" : {
            "type" : "integer",
            "description" : "The left coordinate."
          },
          "Right" : {
            "type" : "integer",
            "description" : "The right coordinate."
          },
          "Top" : {
            "type" : "integer",
            "description" : "The top coordinate."
          }
        },
        "description" : "Coordinates to the found face."
      },
      "FoundFaces" : {
        "type" : "object",
        "properties" : {
          "AdvancedInfo" : {
            "type" : "array",
            "description" : "The advanced info.",
            "items" : {
              "$ref" : "#/components/schemas/KeyValuePair"
            }
          },
          "CacheId" : {
            "type" : "string",
            "description" : "The cache id."
          },
          "Count" : {
            "type" : "integer",
            "description" : "Number of faces found."
          },
          "Faces" : {
            "type" : "array",
            "description" : "The list of faces.",
            "items" : {
              "$ref" : "#/components/schemas/Face"
            }
          },
          "Result" : {
            "type" : "boolean",
            "description" : "True if result was found."
          },
          "Status" : {
            "$ref" : "#/components/schemas/Status"
          },
          "TrackingId" : {
            "type" : "string",
            "description" : "The tracking id."
          }
        },
        "description" : "Request object the contains found faces."
      },
      "Frame" : {
        "type" : "object",
        "properties" : {
          "FrameImage" : {
            "type" : "string",
            "description" : "Frame image."
          },
          "Metadata" : {
            "type" : "array",
            "description" : "Array of KeyValue.",
            "items" : {
              "$ref" : "#/components/schemas/KeyValuePair"
            }
          },
          "ReviewerResultTags" : {
            "type" : "array",
            "description" : "Reviewer result tags.",
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "Timestamp" : {
            "type" : "string",
            "description" : "Timestamp of the frame."
          }
        },
        "description" : "Video frame property details."
      },
      "Frames" : {
        "type" : "object",
        "properties" : {
          "ReviewId" : {
            "type" : "string",
            "description" : "Id of the review."
          },
          "VideoFrames" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Frame"
            }
          }
        },
        "description" : "The response for a Get Frames request."
      },
      "IPA" : {
        "type" : "object",
        "properties" : {
          "Index" : {
            "type" : "integer",
            "description" : "Index(Location) of the IP Address in the input text content."
          },
          "SubType" : {
            "type" : "string",
            "description" : "Subtype of the detected IP Address."
          },
          "Text" : {
            "type" : "string",
            "description" : "Detected IP Address."
          }
        },
        "description" : "IP Address details."
      },
      "Image" : {
        "type" : "object",
        "properties" : {
          "AdditionalInfo" : {
            "type" : "array",
            "description" : "Advanced info list.",
            "items" : {
              "type" : "object",
              "properties" : {
                "Key" : {
                  "type" : "string",
                  "description" : "Key parameter."
                },
                "Value" : {
                  "type" : "string",
                  "description" : "Value parameter."
                }
              }
            }
          },
          "ContentId" : {
            "type" : "string",
            "description" : "Content Id."
          },
          "Status" : {
            "$ref" : "#/components/schemas/Status"
          },
          "TrackingId" : {
            "type" : "string",
            "description" : "Tracking Id."
          }
        },
        "description" : "Image Properties."
      },
      "ImageIds" : {
        "type" : "object",
        "properties" : {
          "ContentIds" : {
            "type" : "array",
            "description" : "Id of the contents.",
            "items" : {
              "type" : "integer"
            }
          },
          "ContentSource" : {
            "type" : "string",
            "description" : "Source of the content."
          },
          "Status" : {
            "$ref" : "#/components/schemas/Status"
          },
          "TrackingId" : {
            "type" : "string",
            "description" : "Tracking Id."
          }
        },
        "description" : "Image Id properties."
      },
      "ImageList" : {
        "type" : "object",
        "properties" : {
          "Description" : {
            "type" : "string",
            "description" : "Description for image list."
          },
          "Id" : {
            "type" : "integer",
            "description" : "Image List Id."
          },
          "Metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Image List Metadata."
          },
          "Name" : {
            "type" : "string",
            "description" : "Image List Name."
          }
        },
        "description" : "Image List Properties."
      },
      "ImageLists" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ImageList"
        }
      },
      "Job" : {
        "type" : "object",
        "properties" : {
          "CallBackEndpoint" : {
            "type" : "string",
            "description" : "The callback endpoint."
          },
          "Id" : {
            "type" : "string",
            "description" : "The job id."
          },
          "JobExecutionReport" : {
            "type" : "array",
            "description" : "Job execution report- Array of KeyValue pairs object.",
            "items" : {
              "$ref" : "#/components/schemas/JobExecutionReportDetails"
            }
          },
          "ResultMetaData" : {
            "type" : "array",
            "description" : "Array of KeyValue pairs.",
            "items" : {
              "$ref" : "#/components/schemas/KeyValuePair"
            }
          },
          "ReviewId" : {
            "type" : "string",
            "description" : "Review Id if one is created."
          },
          "Status" : {
            "type" : "string",
            "description" : "The status string (<Pending, Failed, Completed>)."
          },
          "TeamName" : {
            "type" : "string",
            "description" : "The team name associated with the job."
          },
          "Type" : {
            "type" : "string",
            "description" : "Type of the content."
          },
          "WorkflowId" : {
            "type" : "string",
            "description" : "The Id of the workflow."
          }
        },
        "description" : "The Job object."
      },
      "JobExecutionReportDetails" : {
        "type" : "object",
        "properties" : {
          "Msg" : {
            "type" : "string",
            "description" : "Message details."
          },
          "Ts" : {
            "type" : "string",
            "description" : "Time details."
          }
        },
        "description" : "Job Execution Report Values."
      },
      "JobId" : {
        "type" : "object",
        "properties" : {
          "JobId" : {
            "type" : "string",
            "description" : "Id of the created job."
          }
        }
      },
      "JobListResult" : {
        "type" : "object",
        "properties" : {
          "Value" : {
            "type" : "array",
            "description" : "The job id.",
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "The list of job ids."
      },
      "KeyValuePair" : {
        "type" : "object",
        "properties" : {
          "Key" : {
            "type" : "string",
            "description" : "The key parameter."
          },
          "Value" : {
            "type" : "string",
            "description" : "The value parameter."
          }
        },
        "description" : "The key value pair object properties."
      },
      "Match" : {
        "type" : "object",
        "properties" : {
          "Label" : {
            "type" : "string",
            "description" : "The label."
          },
          "MatchId" : {
            "type" : "integer",
            "description" : "The match id."
          },
          "Score" : {
            "type" : "number",
            "description" : "Confidence score of the image match."
          },
          "Source" : {
            "type" : "string",
            "description" : "The source."
          },
          "Tags" : {
            "type" : "array",
            "description" : "The tags for match details.",
            "items" : {
              "type" : "integer"
            }
          }
        },
        "description" : "The match details."
      },
      "MatchResponse" : {
        "type" : "object",
        "properties" : {
          "CacheID" : {
            "type" : "string",
            "description" : "The cache id."
          },
          "IsMatch" : {
            "type" : "boolean",
            "description" : "Indicates if there is a match."
          },
          "Matches" : {
            "type" : "array",
            "description" : "The match details.",
            "items" : {
              "$ref" : "#/components/schemas/Match"
            }
          },
          "Status" : {
            "$ref" : "#/components/schemas/Status"
          },
          "TrackingId" : {
            "type" : "string",
            "description" : "The tracking id."
          }
        },
        "description" : "The response for a Match request."
      },
      "OCR" : {
        "type" : "object",
        "properties" : {
          "CacheId" : {
            "type" : "string",
            "description" : "The cache id."
          },
          "Candidates" : {
            "type" : "array",
            "description" : "The list of candidate text.",
            "items" : {
              "$ref" : "#/components/schemas/Candidate"
            }
          },
          "Language" : {
            "type" : "string",
            "description" : "The ISO 639-3 code."
          },
          "Metadata" : {
            "type" : "array",
            "description" : "Array of KeyValue.",
            "items" : {
              "$ref" : "#/components/schemas/KeyValuePair"
            }
          },
          "Status" : {
            "$ref" : "#/components/schemas/Status"
          },
          "Text" : {
            "type" : "string",
            "description" : "The found text."
          },
          "TrackingId" : {
            "type" : "string",
            "description" : "The tracking id."
          }
        },
        "description" : "Contains the text found in image for the language specified."
      },
      "PII" : {
        "type" : "object",
        "properties" : {
          "Address" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Address"
            }
          },
          "Email" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Email"
            }
          },
          "IPA" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IPA"
            }
          },
          "Phone" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Phone"
            }
          },
          "SSN" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SSN"
            }
          }
        },
        "description" : "Personal Identifier Information details."
      },
      "Phone" : {
        "type" : "object",
        "properties" : {
          "CountryCode" : {
            "type" : "string",
            "description" : "CountryCode of the detected Phone number."
          },
          "Index" : {
            "type" : "integer",
            "description" : "Index(Location) of the Phone number in the input text content."
          },
          "Text" : {
            "type" : "string",
            "description" : "Detected Phone number."
          }
        },
        "description" : "Phone Property details."
      },
      "RefreshIndex" : {
        "type" : "object",
        "properties" : {
          "AdvancedInfo" : {
            "type" : "array",
            "description" : "Advanced info list.",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          },
          "ContentSourceId" : {
            "type" : "string",
            "description" : "Content source Id."
          },
          "IsUpdateSuccess" : {
            "type" : "boolean",
            "description" : "Update success status."
          },
          "Status" : {
            "$ref" : "#/components/schemas/Status"
          },
          "TrackingId" : {
            "type" : "string",
            "description" : "Tracking Id."
          }
        },
        "description" : "Refresh Index Response."
      },
      "Review" : {
        "type" : "object",
        "properties" : {
          "CallbackEndpoint" : {
            "type" : "string",
            "description" : "The callback endpoint."
          },
          "Content" : {
            "type" : "string",
            "description" : "The content value."
          },
          "ContentId" : {
            "type" : "string",
            "description" : "Id of the content."
          },
          "CreatedBy" : {
            "type" : "string",
            "description" : "The reviewer name."
          },
          "Metadata" : {
            "type" : "array",
            "description" : "Array of KeyValue.",
            "items" : {
              "$ref" : "#/components/schemas/KeyValuePair"
            }
          },
          "ReviewId" : {
            "type" : "string",
            "description" : "Id of the review."
          },
          "ReviewerResultTags" : {
            "type" : "array",
            "description" : "Array of KeyValue with Reviewer set Tags.",
            "items" : {
              "$ref" : "#/components/schemas/KeyValuePair"
            }
          },
          "Status" : {
            "type" : "string",
            "description" : "The status string (<Pending, Complete>)."
          },
          "SubTeam" : {
            "type" : "string",
            "description" : "Name of the subteam."
          },
          "Type" : {
            "type" : "string",
            "description" : "The type of content."
          }
        },
        "description" : "The Review object."
      },
      "ReviewList" : {
        "type" : "array",
        "description" : "The list of review ids.",
        "items" : {
          "type" : "string"
        }
      },
      "SSN" : {
        "type" : "object",
        "properties" : {
          "Index" : {
            "type" : "integer",
            "description" : "Index(Location) of the SSN in the input text content."
          },
          "Text" : {
            "type" : "string",
            "description" : "Detected SSN in the input text content."
          }
        },
        "description" : "Detected SSN details."
      },
      "Screen" : {
        "type" : "object",
        "properties" : {
          "AutoCorrectedText" : {
            "type" : "string",
            "description" : "The autocorrected text"
          },
          "Classification" : {
            "$ref" : "#/components/schemas/Classification"
          },
          "Language" : {
            "type" : "string",
            "description" : "Language of the input text content."
          },
          "Misrepresentation" : {
            "type" : "array",
            "description" : "The misrepresentation text.",
            "items" : {
              "type" : "string"
            }
          },
          "NormalizedText" : {
            "type" : "string",
            "description" : "The normalized text."
          },
          "OriginalText" : {
            "type" : "string",
            "description" : "The original text."
          },
          "PII" : {
            "$ref" : "#/components/schemas/PII"
          },
          "Status" : {
            "$ref" : "#/components/schemas/Status"
          },
          "Terms" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DetectedTerms"
            }
          },
          "TrackingId" : {
            "type" : "string",
            "description" : "Unique Content Moderator transaction Id."
          }
        },
        "description" : "The response for a Screen text request."
      },
      "Status" : {
        "type" : "object",
        "properties" : {
          "Code" : {
            "type" : "integer",
            "description" : "Status code."
          },
          "Description" : {
            "type" : "string",
            "description" : "Status description."
          },
          "Exception" : {
            "type" : "string",
            "description" : "Exception status."
          }
        },
        "description" : "Status properties."
      },
      "Tag" : {
        "type" : "object",
        "properties" : {
          "Key" : {
            "type" : "string",
            "description" : "The key parameter."
          },
          "Value" : {
            "type" : "string",
            "description" : "The value parameter."
          }
        },
        "description" : "Tag details."
      },
      "TermList" : {
        "type" : "object",
        "properties" : {
          "Description" : {
            "type" : "string",
            "description" : "Description for term list."
          },
          "Id" : {
            "type" : "integer",
            "description" : "Term list Id."
          },
          "Metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Term list metadata."
          },
          "Name" : {
            "type" : "string",
            "description" : "Term list name."
          }
        },
        "description" : "Term List  Properties."
      },
      "TermLists" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/TermList"
        }
      },
      "Terms" : {
        "type" : "object",
        "properties" : {
          "Data" : {
            "$ref" : "#/components/schemas/TermsData"
          },
          "Paging" : {
            "type" : "object",
            "properties" : {
              "Limit" : {
                "type" : "integer",
                "description" : "Limit details."
              },
              "Offset" : {
                "type" : "integer",
                "description" : "Offset details."
              },
              "Returned" : {
                "type" : "integer",
                "description" : "Returned text details."
              },
              "Total" : {
                "type" : "integer",
                "description" : "Total details."
              }
            },
            "description" : "Paging details."
          }
        },
        "description" : "Terms properties."
      },
      "TermsData" : {
        "type" : "object",
        "properties" : {
          "Language" : {
            "type" : "string",
            "description" : "Language of the terms."
          },
          "Status" : {
            "$ref" : "#/components/schemas/Status"
          },
          "Terms" : {
            "type" : "array",
            "description" : "List of terms.",
            "items" : {
              "$ref" : "#/components/schemas/TermsInList"
            }
          },
          "TrackingId" : {
            "type" : "string",
            "description" : "Tracking Id."
          }
        },
        "description" : "All term Id response properties."
      },
      "TermsInList" : {
        "type" : "object",
        "properties" : {
          "Term" : {
            "type" : "string",
            "description" : "Added term details."
          }
        },
        "description" : "Terms in list Id passed."
      }
    },
    "parameters" : {
      "CacheImage" : {
        "name" : "CacheImage",
        "in" : "query",
        "description" : "Whether to retain the submitted image for future use; defaults to false if omitted.",
        "schema" : {
          "type" : "boolean"
        }
      },
      "CallBackEndpoint" : {
        "name" : "CallBackEndpoint",
        "in" : "query",
        "description" : "Callback endpoint for posting the create job result.",
        "schema" : {
          "type" : "string"
        }
      },
      "ContentId" : {
        "name" : "ContentId",
        "in" : "query",
        "description" : "Id/Name to identify the content submitted.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "ContentType" : {
        "name" : "ContentType",
        "in" : "query",
        "description" : "Image, Text or Video.",
        "required" : true,
        "schema" : {
          "type" : "string",
          "enum" : [ "Image", "Text", "Video" ]
        }
      },
      "Endpoint" : {
        "name" : "Endpoint",
        "in" : "path",
        "description" : "Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "ImageId" : {
        "name" : "ImageId",
        "in" : "path",
        "description" : "Id of the image.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "PII" : {
        "name" : "PII",
        "in" : "query",
        "description" : "Detect personal identifiable information.",
        "schema" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "WorkflowName" : {
        "name" : "WorkflowName",
        "in" : "query",
        "description" : "Workflow Name that you want to invoke.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "autocorrect" : {
        "name" : "autocorrect",
        "in" : "query",
        "description" : "Autocorrect text.",
        "schema" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "classify" : {
        "name" : "classify",
        "in" : "query",
        "description" : "Classify input.",
        "schema" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "enhanced" : {
        "name" : "enhanced",
        "in" : "query",
        "description" : "When set to True, the image goes through additional processing to come with additional candidates.\n\nimage/tiff is not supported when enhanced is set to true\n\nNote: This impacts the response time.",
        "schema" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "label" : {
        "name" : "label",
        "in" : "query",
        "description" : "The image label.",
        "schema" : {
          "type" : "string"
        }
      },
      "language" : {
        "name" : "language",
        "in" : "query",
        "description" : "Language of the terms.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "listId" : {
        "name" : "listId",
        "in" : "path",
        "description" : "List Id of the image list.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "listIdQueryParameter" : {
        "name" : "listId",
        "in" : "query",
        "description" : "The list Id.",
        "schema" : {
          "type" : "string"
        }
      },
      "reviewId" : {
        "name" : "reviewId",
        "in" : "path",
        "description" : "Id of the review.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "subTeam" : {
        "name" : "subTeam",
        "in" : "query",
        "description" : "SubTeam of your team, you want to assign the created review to.",
        "schema" : {
          "type" : "string"
        }
      },
      "tag" : {
        "name" : "tag",
        "in" : "query",
        "description" : "Tag for the image.",
        "schema" : {
          "type" : "integer"
        }
      },
      "teamName" : {
        "name" : "teamName",
        "in" : "path",
        "description" : "Your team name.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "term" : {
        "name" : "term",
        "in" : "path",
        "description" : "Term to be deleted",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "textLanguage" : {
        "name" : "language",
        "in" : "query",
        "description" : "Language of the text.",
        "schema" : {
          "type" : "string"
        }
      },
      "timescale" : {
        "name" : "timescale",
        "in" : "query",
        "description" : "Timescale of the video.",
        "schema" : {
          "type" : "integer"
        }
      }
    },
    "requestBodies" : {
      "CreateVideoReviewsBody" : {
        "description" : "Body for create reviews API",
        "content" : {
          "*/*" : {
            "schema" : {
              "type" : "array",
              "description" : "Schema of the body.",
              "items" : {
                "required" : [ "Content", "ContentId", "Status", "Type" ],
                "type" : "object",
                "properties" : {
                  "CallbackEndpoint" : {
                    "type" : "string",
                    "description" : "Optional CallbackEndpoint."
                  },
                  "Content" : {
                    "type" : "string",
                    "description" : "Video content url to review."
                  },
                  "ContentId" : {
                    "type" : "string",
                    "description" : "Content Identifier."
                  },
                  "Metadata" : {
                    "type" : "array",
                    "description" : "Optional metadata details.",
                    "items" : {
                      "required" : [ "Key", "Value" ],
                      "type" : "object",
                      "properties" : {
                        "Key" : {
                          "type" : "string",
                          "description" : "Your key parameter."
                        },
                        "Value" : {
                          "type" : "string",
                          "description" : "Your value parameter."
                        }
                      }
                    }
                  },
                  "Status" : {
                    "type" : "string",
                    "description" : "Status of the video(Complete,Unpublished,Pending)",
                    "enum" : [ "Complete", "Unpublished", "Pending" ]
                  },
                  "Timescale" : {
                    "type" : "integer",
                    "description" : "Timescale of the video."
                  },
                  "Type" : {
                    "type" : "string",
                    "description" : "Type of the content.",
                    "enum" : [ "Video" ]
                  },
                  "VideoFrames" : {
                    "type" : "array",
                    "description" : "Optional metadata details.",
                    "items" : {
                      "required" : [ "FrameImage", "Id", "Timestamp" ],
                      "type" : "object",
                      "properties" : {
                        "FrameImage" : {
                          "type" : "string",
                          "description" : "Frame image Url."
                        },
                        "Id" : {
                          "type" : "string",
                          "description" : "Id of the frame."
                        },
                        "Metadata" : {
                          "type" : "array",
                          "description" : "Optional metadata details.",
                          "items" : {
                            "required" : [ "Key", "Value" ],
                            "type" : "object",
                            "properties" : {
                              "Key" : {
                                "type" : "string",
                                "description" : "Your key parameter."
                              },
                              "Value" : {
                                "type" : "string",
                                "description" : "Your value parameter."
                              }
                            }
                          }
                        },
                        "ReviewerResultTags" : {
                          "type" : "array",
                          "items" : {
                            "required" : [ "Key", "Value" ],
                            "type" : "object",
                            "properties" : {
                              "Key" : {
                                "type" : "string",
                                "description" : "Your key parameter."
                              },
                              "Value" : {
                                "type" : "string",
                                "description" : "Your value parameter."
                              }
                            }
                          }
                        },
                        "Timestamp" : {
                          "type" : "integer",
                          "description" : "Timestamp of the frame."
                        }
                      }
                    }
                  }
                },
                "description" : "Schema items of the body."
              }
            }
          }
        },
        "required" : true
      },
      "ImageStreamParameter" : {
        "description" : "The image file.",
        "content" : {
          "*/*" : {
            "schema" : {
              "type" : "object",
              "format" : "file"
            }
          }
        },
        "required" : true
      },
      "ImageUrlParameter" : {
        "description" : "The image url.",
        "content" : {
          "*/*" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "DataRepresentation" : {
                  "type" : "string",
                  "default" : "URL"
                },
                "Value" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "required" : true
      },
      "body" : {
        "description" : "Schema of the body.",
        "content" : {
          "*/*" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "Description" : {
                  "type" : "string",
                  "description" : "Description of the list."
                },
                "Metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Metadata of the list."
                },
                "Name" : {
                  "type" : "string",
                  "description" : "Name of the list."
                }
              }
            }
          }
        },
        "required" : true
      },
      "textContent" : {
        "description" : "Content to screen.",
        "content" : {
          "*/*" : {
            "schema" : {
              "type" : "object",
              "format" : "file"
            }
          }
        },
        "required" : true
      },
      "transcriptFile" : {
        "description" : "Transcript file of the video.",
        "content" : {
          "*/*" : {
            "schema" : {
              "type" : "object",
              "format" : "file"
            }
          }
        },
        "required" : true
      },
      "transcriptModerationBody" : {
        "description" : "Body for add video transcript moderation result API",
        "content" : {
          "*/*" : {
            "schema" : {
              "type" : "array",
              "description" : "Schema of the body.",
              "items" : {
                "required" : [ "Terms", "Timestamp" ],
                "type" : "object",
                "properties" : {
                  "Terms" : {
                    "type" : "array",
                    "description" : "Optional metadata details.",
                    "items" : {
                      "required" : [ "Index", "Term" ],
                      "type" : "object",
                      "properties" : {
                        "Index" : {
                          "type" : "integer",
                          "description" : "Index of the word"
                        },
                        "Term" : {
                          "type" : "string",
                          "description" : "Detected word."
                        }
                      }
                    }
                  },
                  "Timestamp" : {
                    "type" : "string",
                    "description" : "Timestamp of the image."
                  }
                },
                "description" : "Schema items of the body."
              }
            }
          }
        },
        "required" : true
      },
      "videoFrameBody" : {
        "description" : "Body for add video frames API",
        "content" : {
          "*/*" : {
            "schema" : {
              "type" : "array",
              "description" : "Schema of the body.",
              "items" : {
                "required" : [ "FrameImage", "Timestamp" ],
                "type" : "object",
                "properties" : {
                  "FrameImage" : {
                    "type" : "string",
                    "description" : "Content to review."
                  },
                  "Metadata" : {
                    "type" : "array",
                    "description" : "Optional metadata details.",
                    "items" : {
                      "required" : [ "Key", "Value" ],
                      "type" : "object",
                      "properties" : {
                        "Key" : {
                          "type" : "string",
                          "description" : "Your key parameter."
                        },
                        "Value" : {
                          "type" : "string",
                          "description" : "Your value parameter."
                        }
                      }
                    }
                  },
                  "ReviewerResultTags" : {
                    "type" : "array",
                    "items" : {
                      "required" : [ "Key", "Value" ],
                      "type" : "object",
                      "properties" : {
                        "Key" : {
                          "type" : "string",
                          "description" : "Your key parameter."
                        },
                        "Value" : {
                          "type" : "string",
                          "description" : "Your value parameter."
                        }
                      }
                    }
                  },
                  "Timestamp" : {
                    "type" : "string",
                    "description" : "Timestamp of the frame."
                  }
                },
                "description" : "Schema items of the body."
              }
            }
          }
        },
        "required" : true
      }
    },
    "securitySchemes" : {
      "apim_key" : {
        "type" : "apiKey",
        "name" : "Ocp-Apim-Subscription-Key",
        "in" : "header"
      }
    }
  }
}