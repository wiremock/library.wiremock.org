{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Open Banking - Payments initiation service",
    "description" : "Open Banking - Payments initiation service",
    "contact" : {
      "name" : "Open Banking Connect Support",
      "url" : "https://developer.mastercard.com/product/open-banking-connect-api-product",
      "email" : "apisupport@mastercard.com"
    },
    "version" : "1.16.0"
  },
  "servers" : [ {
    "url" : "/openbanking/sandbox/connect/api"
  } ],
  "tags" : [ {
    "name" : "ASPSPs",
    "description" : "List of account information and payment initiation providers"
  }, {
    "name" : "Domestic Payments Consent",
    "description" : "Domestic Payments operations"
  }, {
    "name" : "Domestic Payments",
    "description" : "Domestic Payments operations"
  }, {
    "name" : "Domestic Payments Status",
    "description" : "Domestic Payments operations"
  }, {
    "name" : "SEPA Payments Consent",
    "description" : "SEPA Payments operations"
  }, {
    "name" : "SEPA Payments",
    "description" : "SEPA Payments operations"
  }, {
    "name" : "SEPA Payments Status",
    "description" : "SEPA Payments operations"
  }, {
    "name" : "Cross border Payments Consent",
    "description" : "Cross border Payments Consent operation"
  }, {
    "name" : "Cross border Payments",
    "description" : "Cross border Payments Redeem operation"
  }, {
    "name" : "Cross border Payments Status",
    "description" : "Cross border Payments get status operation"
  }, {
    "name" : "PI Consents Raw",
    "description" : "PI Consent Original consent given by the bank."
  }, {
    "name" : "Health",
    "description" : "Open banking connect health status"
  } ],
  "paths" : {
    "/payments/aspsps" : {
      "post" : {
        "tags" : [ "ASPSPs" ],
        "summary" : "Get list of ASPSPs",
        "description" : "Get the list of all active ASPSPs supported by the Open Banking Connect platform at this time with possibility to filter by id, name or country. This list is updated regularly as new ASPSPs are connected.",
        "requestBody" : {
          "description" : "Request Body",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/postAspspsParamsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postAspspsOKBody"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "500" : {
            "description" : "Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "504" : {
            "description" : "Server while acting as a gateway or proxy, cannot get a response in time.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payments/consents/raw" : {
      "post" : {
        "tags" : [ "PI Consents Raw" ],
        "summary" : "Extracts the original raw consent given by the aspsp",
        "description" : "Extracts the original raw consent given by the aspsp",
        "requestBody" : {
          "description" : "Request Body",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/postPaymentsConsentsRawParamsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postPaymentsConsentsRawOKBody"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "500" : {
            "description" : "Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "504" : {
            "description" : "Server while acting as a gateway or proxy, cannot get a response in time.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payments/cross-border-credit-transfers" : {
      "post" : {
        "tags" : [ "Cross border Payments" ],
        "summary" : "Redeem the payment",
        "requestBody" : {
          "description" : "Request Body",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersParamsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersOKBody"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "500" : {
            "description" : "Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "504" : {
            "description" : "Server while acting as a gateway or proxy, cannot get a response in time.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payments/cross-border-credit-transfers/consents" : {
      "post" : {
        "tags" : [ "Cross border Payments Consent" ],
        "summary" : "Request consent initiation via redirect",
        "requestBody" : {
          "description" : "Cross border payment consent",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersConsentsParamsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersConsentsOKBody"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "500" : {
            "description" : "Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "504" : {
            "description" : "Server while acting as a gateway or proxy, cannot get a response in time.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payments/cross-border-credit-transfers/payment-status" : {
      "post" : {
        "tags" : [ "Cross border Payments Status" ],
        "summary" : "Get payment status",
        "requestBody" : {
          "description" : "Request Body",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersPaymentStatusParamsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersPaymentStatusOKBody"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "500" : {
            "description" : "Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "504" : {
            "description" : "Server while acting as a gateway or proxy, cannot get a response in time.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payments/domestic-credit-transfers" : {
      "post" : {
        "tags" : [ "Domestic Payments" ],
        "summary" : "Redeem the payment",
        "description" : "Redeem the payment which was previously consented by the PSU.",
        "requestBody" : {
          "description" : "Request Body",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersParamsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersOKBody"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "500" : {
            "description" : "Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "504" : {
            "description" : "Server while acting as a gateway or proxy, cannot get a response in time.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payments/domestic-credit-transfers/consents" : {
      "post" : {
        "tags" : [ "Domestic Payments Consent" ],
        "summary" : "Request consent initiation via redirect",
        "description" : "Request Payment Initiation Consent for a domestic credit transfer on behalf of the PSU.",
        "requestBody" : {
          "description" : "Domestic Payment consent to be wired via Faster Payment System",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersConsentsParamsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersConsentsOKBody"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "500" : {
            "description" : "Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "504" : {
            "description" : "Server while acting as a gateway or proxy, cannot get a response in time.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payments/domestic-credit-transfers/payment-status" : {
      "post" : {
        "tags" : [ "Domestic Payments Status" ],
        "summary" : "Get payment status",
        "description" : "Get the status for an existing domestic credit transfer payment.",
        "requestBody" : {
          "description" : "Request Body",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersPaymentStatusParamsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersPaymentStatusOKBody"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "500" : {
            "description" : "Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "504" : {
            "description" : "Server while acting as a gateway or proxy, cannot get a response in time.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payments/health" : {
      "get" : {
        "tags" : [ "Health" ],
        "summary" : "Returns the status of each connectivity provider",
        "description" : "Returns the status of each connectivity provider",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiHealth"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "500" : {
            "description" : "Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payments/sepa-credit-transfers" : {
      "post" : {
        "tags" : [ "SEPA Payments" ],
        "summary" : "Redeem the payment",
        "description" : "Redeem a SEPA credit transfer previously consented by the PSU.",
        "requestBody" : {
          "description" : "Request Body",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersParamsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersOKBody"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "500" : {
            "description" : "Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "504" : {
            "description" : "Server while acting as a gateway or proxy, cannot get a response in time.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payments/sepa-credit-transfers/consents" : {
      "post" : {
        "tags" : [ "SEPA Payments Consent" ],
        "summary" : "Request consent initiation via redirect",
        "description" : "Request a SEPA credit transfer consent on behalf of the PSU via a URL redirect to the ASPSP.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersConsentsParamsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersConsentsOKBody"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "500" : {
            "description" : "Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "504" : {
            "description" : "Server while acting as a gateway or proxy, cannot get a response in time.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payments/sepa-credit-transfers/payment-status" : {
      "post" : {
        "tags" : [ "SEPA Payments Status" ],
        "summary" : "Get payment status",
        "description" : "Get the status of an existing SEPA credit transfer",
        "requestBody" : {
          "description" : "Request Body",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersPaymentStatusParamsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersPaymentStatusOKBody"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "500" : {
            "description" : "Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "504" : {
            "description" : "Server while acting as a gateway or proxy, cannot get a response in time.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AdditionalDataField" : {
        "type" : "string",
        "description" : "Additional ASPSP field Types to be returned",
        "enum" : [ "capabilities", "logo" ]
      },
      "ApiHealth" : {
        "required" : [ "status" ],
        "type" : "object",
        "properties" : {
          "connectors" : {
            "type" : "array",
            "description" : "Connector availability",
            "items" : {
              "$ref" : "#/components/schemas/ApiHealth_connectors"
            }
          },
          "status" : {
            "type" : "string",
            "description" : "Overall connect platform availability status",
            "example" : "UP",
            "enum" : [ "UP", "DOWN", "DEGRADED" ]
          },
          "statusMessage" : {
            "type" : "string",
            "description" : "Additional informational message",
            "example" : ""
          }
        },
        "description" : "API Healt response object"
      },
      "ApiHealth_connectors" : {
        "required" : [ "name", "status" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Connector name",
            "example" : "Buffalo"
          },
          "status" : {
            "type" : "string",
            "description" : "Overall connect platform availability status",
            "example" : "UP",
            "enum" : [ "UP", "DOWN", "DEGRADED" ]
          },
          "statusMessage" : {
            "type" : "string",
            "description" : "Additional informational message",
            "example" : ""
          }
        }
      },
      "CapabilitiesObject" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "boolean"
        },
        "description" : "Capabilities related to api profile assigned to ASPSP",
        "example" : {
          "delete_ais_consent" : true,
          "obtain_ais_consent" : true,
          "retrieve_accounts" : true
        }
      },
      "Error" : {
        "required" : [ "Errors" ],
        "type" : "object",
        "properties" : {
          "Errors" : {
            "$ref" : "#/components/schemas/Error_Errors"
          }
        }
      },
      "Error_Errors" : {
        "required" : [ "Error" ],
        "type" : "object",
        "properties" : {
          "Error" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Error_Errors_Error"
            }
          }
        }
      },
      "Error_Errors_Error" : {
        "type" : "object",
        "properties" : {
          "Description" : {
            "type" : "string"
          },
          "Details" : {
            "type" : "string"
          },
          "ReasonCode" : {
            "type" : "string"
          },
          "Recoverable" : {
            "type" : "boolean"
          },
          "Source" : {
            "type" : "string"
          }
        }
      },
      "LogoFileType" : {
        "type" : "string",
        "description" : "Type of the uploaded Logo file",
        "enum" : [ "png", "jpg", "svg" ]
      },
      "LogoObject" : {
        "type" : "object",
        "properties" : {
          "binaryContent" : {
            "type" : "string",
            "description" : "This field is deprecated, use logoUrl instead"
          },
          "fileType" : {
            "$ref" : "#/components/schemas/LogoFileType"
          },
          "logoUrl" : {
            "type" : "string",
            "description" : "URL to a logo file",
            "example" : "https://openbanking.mastercard.eu/live/imgs/16f0f635-9d94-4976-b49b-584ca231c232.svg"
          }
        },
        "description" : "Logo metadata and image content"
      },
      "Merchant" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Merchant id",
            "example" : "MerchantId"
          },
          "name" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Merchant name",
            "example" : "MerchantName"
          }
        },
        "description" : "Marchant Object"
      },
      "PaymentConsent" : {
        "required" : [ "consentId", "consentRequestId" ],
        "type" : "object",
        "properties" : {
          "consentId" : {
            "type" : "string",
            "description" : "Consent Id"
          },
          "consentRequestId" : {
            "type" : "string",
            "description" : "Consent Request Id, the same as received from /consent operations."
          },
          "signatureStatus" : {
            "$ref" : "#/components/schemas/SignatureValidationStatus"
          }
        },
        "description" : "Return the consent data exchanged for PSU authorization"
      },
      "RequestPisDomesticSchedule" : {
        "required" : [ "frequency", "startDate" ],
        "type" : "object",
        "properties" : {
          "endDate" : {
            "type" : "string",
            "description" : "End date for the schedule",
            "format" : "date"
          },
          "frequency" : {
            "type" : "string",
            "description" : "Frequency type",
            "enum" : [ "DAIL", "WEEK", "MNTH", "QUTR", "SEMI", "YEAR" ]
          },
          "startDate" : {
            "type" : "string",
            "description" : "Start date for the schedule",
            "format" : "date"
          }
        }
      },
      "RequestPisSepaSchedule" : {
        "required" : [ "frequency", "startDate" ],
        "type" : "object",
        "properties" : {
          "endDate" : {
            "type" : "string",
            "description" : "End date for the schedule",
            "format" : "date"
          },
          "frequency" : {
            "type" : "string",
            "description" : "Frequency type",
            "enum" : [ "DAIL", "WEEK", "MNTH", "QUTR", "SEMI", "YEAR" ]
          },
          "startDate" : {
            "type" : "string",
            "description" : "Start date for the schedule",
            "format" : "date"
          }
        }
      },
      "SepaPaymentConsent" : {
        "required" : [ "consentId", "consentRequestId" ],
        "type" : "object",
        "properties" : {
          "consentId" : {
            "type" : "string",
            "description" : "Consent Id"
          },
          "consentRequestId" : {
            "type" : "string",
            "description" : "Consent Request Id, the same as received from /consent operations."
          }
        },
        "description" : "Return the consent data exchanged for PSU authorization"
      },
      "SignatureValidationStatus" : {
        "type" : "string",
        "description" : "For CMA9 ASPSPs: Status of validation of ASPSP's signature present in authorization code that TPP included in the request for credit transfer",
        "enum" : [ "VALID", "UNKNOWN", "UNSIGNED", "NONCOMPLIANT" ]
      },
      "postAspspsOKBody" : {
        "required" : [ "originalRequestInfo" ],
        "type" : "object",
        "properties" : {
          "aspsps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/postAspspsOKBodyAspspsItems"
            }
          },
          "originalRequestInfo" : {
            "$ref" : "#/components/schemas/postAspspsOKBodyOriginalRequestInfo"
          }
        }
      },
      "postAspspsOKBodyAspspsItems" : {
        "type" : "object",
        "properties" : {
          "aspspServices" : {
            "type" : "array",
            "description" : "Provided services, AIS - account information, PIS - payment initiation",
            "example" : [ "AIS", "PIS", "COF" ],
            "items" : {
              "type" : "string",
              "enum" : [ "AIS", "PIS", "COF" ]
            }
          },
          "capabilities" : {
            "$ref" : "#/components/schemas/CapabilitiesObject"
          },
          "country" : {
            "type" : "string",
            "description" : "Country code",
            "example" : "UK"
          },
          "id" : {
            "type" : "string",
            "description" : "Identification of the ASPSP",
            "example" : "123e4567-e89b-12d3-a456-426655440000"
          },
          "logo" : {
            "$ref" : "#/components/schemas/LogoObject"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the ASPSP",
            "example" : "Wood bank"
          },
          "profile" : {
            "type" : "string",
            "description" : "ASPSP profile",
            "example" : "CMA9"
          }
        }
      },
      "postAspspsOKBodyOriginalRequestInfo" : {
        "required" : [ "xRequestId" ],
        "type" : "object",
        "properties" : {
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Original xRequestId given by the client on request",
            "example" : "444e4567-e55b-12d3-a456-426655448888"
          }
        }
      },
      "postAspspsParamsBody" : {
        "required" : [ "requestInfo" ],
        "type" : "object",
        "properties" : {
          "country" : {
            "pattern" : "^[A-Z]{2}$",
            "type" : "string",
            "description" : "Filter by country code (ISO 3166 Alpha 2), exact match pattern",
            "example" : "GB"
          },
          "id" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Filter by internal id of ASPSP, exact match pattern",
            "example" : ""
          },
          "name" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Filter by name of ASPSP, contains pattern",
            "example" : ""
          },
          "requestInfo" : {
            "$ref" : "#/components/schemas/postAspspsParamsBodyRequestInfo"
          },
          "returnAdditionalData" : {
            "type" : "array",
            "description" : "Specifies what additional fields for ASPSP object should be included in response",
            "items" : {
              "$ref" : "#/components/schemas/AdditionalDataField"
            }
          }
        }
      },
      "postAspspsParamsBodyRequestInfo" : {
        "required" : [ "xRequestId" ],
        "type" : "object",
        "properties" : {
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Request id given by the client",
            "example" : "123e4567-e89b-12d3-a456-426655440000"
          }
        }
      },
      "postPaymentsConsentsRawOKBody" : {
        "required" : [ "originalRequestInfo" ],
        "type" : "object",
        "properties" : {
          "originalRequestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsConsentsRawOKBody_originalRequestInfo"
          },
          "rawConsent" : {
            "type" : "string",
            "description" : "Raw Consent"
          }
        }
      },
      "postPaymentsConsentsRawOKBody_originalRequestInfo" : {
        "required" : [ "xRequestId" ],
        "type" : "object",
        "properties" : {
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Original xRequestId given by the client on request",
            "example" : "444e4567-e55b-12d3-a456-426655448888"
          }
        }
      },
      "postPaymentsConsentsRawParamsBody" : {
        "required" : [ "requestInfo" ],
        "type" : "object",
        "properties" : {
          "requestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsConsentsRawParamsBody_requestInfo"
          }
        }
      },
      "postPaymentsConsentsRawParamsBody_requestInfo" : {
        "required" : [ "aspspId", "consentId", "xRequestId" ],
        "type" : "object",
        "properties" : {
          "aspspId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Identification of ASPSP",
            "example" : "420e5cff-0e2a-4156-991a-f6eeef0478cf"
          },
          "consentId" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Consent identification",
            "example" : "GFiTpF3:EBy5xGqQMatk"
          },
          "merchant" : {
            "$ref" : "#/components/schemas/Merchant"
          },
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Request id given by the client",
            "example" : "123e4567-e89b-12d3-a456-426655440000"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersConsentsOKBody" : {
        "required" : [ "originalRequestInfo" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersConsentsOKBodyLinks"
          },
          "additionalData" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersConsentsOKBody_additionalData"
          },
          "aspspSCAApproach" : {
            "type" : "string",
            "enum" : [ "REDIRECT" ]
          },
          "consentRequestId" : {
            "type" : "string"
          },
          "originalRequestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersConsentsOKBodyOriginalRequestInfo"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersConsentsOKBodyLinks" : {
        "type" : "object",
        "properties" : {
          "scaRedirect" : {
            "type" : "string",
            "description" : "Redirect URL for SCA",
            "example" : "https://bank1.com/sca/login"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersConsentsOKBodyOriginalRequestInfo" : {
        "required" : [ "xRequestId" ],
        "type" : "object",
        "properties" : {
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Original xRequestId given by the client on request",
            "example" : "444e4567-e55b-12d3-a456-426655448888"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersConsentsOKBody_additionalData" : {
        "type" : "object",
        "properties" : {
          "rawConsent" : {
            "type" : "string",
            "description" : "Raw Consent, available only for specific standards and returned only if requestInfo.flag contained 'Return.Raw.Consent'"
          }
        },
        "description" : "Returning additional data related to the consent"
      },
      "postPaymentsCrossBorderCreditTransfersConsentsParamsBody" : {
        "required" : [ "payments", "requestInfo" ],
        "type" : "object",
        "properties" : {
          "payments" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments"
          },
          "requestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersConsentsParamsBodyRequestInfo"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments" : {
        "required" : [ "creditorAccount", "creditorAgent", "creditorName", "debtorAccount", "endToEndIdentification", "instructedAmount", "instructionPriority", "localInstrument" ],
        "type" : "object",
        "properties" : {
          "creditorAccount" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount"
          },
          "creditorAddress" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress"
          },
          "creditorAgent" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent"
          },
          "creditorName" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Bank name",
            "example" : "Wood bank"
          },
          "debtorAccount" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount"
          },
          "debtorAddress" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments_debtorAddress"
          },
          "debtorName" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Debtor legal name",
            "example" : "NordPole PLC"
          },
          "endToEndIdentification" : {
            "maxLength" : 18,
            "minLength" : 1,
            "type" : "string",
            "description" : "Payment end to end identification",
            "example" : "Notification"
          },
          "instructedAmount" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount"
          },
          "instructionIdentification" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. If API profile of ASPSP is CMA9, then field is mandatory.",
            "example" : ""
          },
          "instructionPriority" : {
            "type" : "string",
            "description" : "Indicator of the urgency or order of importance",
            "example" : "Normal",
            "enum" : [ "Normal", "Urgent" ]
          },
          "localInstrument" : {
            "type" : "string",
            "description" : "User community specific instrument.",
            "example" : "Swift",
            "enum" : [ "Swift" ]
          },
          "remittanceInformationReference" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. (future use)",
            "example" : "UniqueRef1"
          },
          "remittanceInformationUnstructured" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Description of the payment",
            "example" : "Payment for fruits"
          },
          "requestedExecutionDate" : {
            "type" : "string",
            "description" : "Scheduled Payment Date",
            "format" : "date"
          },
          "transferCharges" : {
            "type" : "string",
            "description" : "Charge bearer",
            "enum" : [ "SEN", "SHA", "BEN" ]
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount" : {
        "required" : [ "identification", "schemeName" ],
        "type" : "object",
        "properties" : {
          "identification" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Account identification",
            "example" : "PL06884573292356737845125375"
          },
          "schemeName" : {
            "type" : "string",
            "description" : "Scheme for the account identification",
            "example" : "IBAN",
            "enum" : [ "IBAN", "SortCodeAccountNumber" ]
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress" : {
        "type" : "object",
        "properties" : {
          "buildingNumber" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "15"
          },
          "city" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "City"
          },
          "country" : {
            "pattern" : "^[A-Z]{2}$",
            "type" : "string",
            "description" : "ISO 3166 ALPHA2 country code",
            "example" : "AA"
          },
          "countrySubDivision" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "SubDivision"
          },
          "postalCode" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "POSTCODE"
          },
          "street" : {
            "maxLength" : 70,
            "minLength" : 1,
            "type" : "string",
            "example" : "Street"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent" : {
        "required" : [ "identification", "schemeName" ],
        "type" : "object",
        "properties" : {
          "identification" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Agent identification",
            "example" : "BARCGB22XXX"
          },
          "schemeName" : {
            "type" : "string",
            "description" : "Scheme for the agent/bank identification",
            "example" : "BIC",
            "enum" : [ "BIC" ]
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount" : {
        "required" : [ "identification", "schemeName" ],
        "type" : "object",
        "properties" : {
          "identification" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Account identification",
            "example" : "PL06884573292356737845125375"
          },
          "schemeName" : {
            "type" : "string",
            "description" : "Scheme for the account identification",
            "example" : "IBAN",
            "enum" : [ "IBAN", "SortCodeAccountNumber" ]
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount" : {
        "required" : [ "amount", "currency" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "minimum" : 0,
            "exclusiveMinimum" : true,
            "type" : "number",
            "description" : "amount value",
            "format" : "double",
            "example" : 100.23
          },
          "currency" : {
            "pattern" : "^[A-Z]{3}$",
            "type" : "string",
            "description" : "Currency code",
            "example" : "GBP"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments_debtorAddress" : {
        "type" : "object",
        "properties" : {
          "buildingNumber" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "15"
          },
          "city" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "City"
          },
          "country" : {
            "pattern" : "^[A-Z]{2}$",
            "type" : "string",
            "description" : "ISO 3166 ALPHA2 country code",
            "example" : "CC"
          },
          "countrySubDivision" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "Division"
          },
          "postalCode" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "PostCode"
          },
          "street" : {
            "maxLength" : 70,
            "minLength" : 1,
            "type" : "string",
            "example" : "Street"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersConsentsParamsBodyRequestInfo" : {
        "required" : [ "aspspId", "tppRedirectURI", "xRequestId" ],
        "type" : "object",
        "properties" : {
          "aspspId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Identification of ASPSP",
            "example" : "420e5cff-0e2a-4156-991a-f6eeef0478cf"
          },
          "flags" : {
            "type" : "array",
            "description" : "Request information flags which can influence the behaviour or returned data",
            "items" : {
              "type" : "string",
              "enum" : [ "Return.Raw.Consent" ]
            }
          },
          "merchant" : {
            "$ref" : "#/components/schemas/Merchant"
          },
          "tppRedirectURI" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Call back uri",
            "example" : "https://tpp-ob.com/callback"
          },
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Request id given by the client",
            "example" : "123e4567-e89b-12d3-a456-426655440000"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersOKBody" : {
        "required" : [ "consent", "originalRequestInfo" ],
        "type" : "object",
        "properties" : {
          "consent" : {
            "$ref" : "#/components/schemas/PaymentConsent"
          },
          "originalRequestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersOKBodyOriginalRequestInfo"
          },
          "transfer" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersOKBodyTransfer"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersOKBodyOriginalRequestInfo" : {
        "required" : [ "xRequestId" ],
        "type" : "object",
        "properties" : {
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Original xRequestId given by the client on request",
            "example" : "444e4567-e55b-12d3-a456-426655448888"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersOKBodyTransfer" : {
        "type" : "object",
        "properties" : {
          "paymentId" : {
            "type" : "string",
            "description" : "PI / Transfer identification",
            "example" : "trasnferIdentificaion1"
          },
          "statusReasonCode" : {
            "type" : "string",
            "description" : "Rejection reson code",
            "example" : "AM04"
          },
          "transactionStatus" : {
            "type" : "string",
            "description" : "Status of the payment",
            "enum" : [ "ACCP", "ACSC", "ACSP", "ACTC", "ACWC", "ACWP", "PDNG", "RCVD", "RJCT" ]
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersParamsBody" : {
        "required" : [ "requestInfo" ],
        "type" : "object",
        "properties" : {
          "requestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersParamsBodyRequestInfo"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersParamsBodyRequestInfo" : {
        "required" : [ "aspspId", "authorization", "xRequestId" ],
        "type" : "object",
        "properties" : {
          "aspspId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Identification of ASPSP",
            "example" : "420e5cff-0e2a-4156-991a-f6eeef0478cf"
          },
          "authorization" : {
            "maxLength" : 5000,
            "minLength" : 1,
            "type" : "string",
            "description" : "The authorization query / data received after PSU has authorized the consent",
            "example" : "code=UKcrossVsbG8gQ2TP9kZWJleft53serYXV0aUK001&state=38948933-38ae-45af-953e-25a69fefa39e"
          },
          "merchant" : {
            "$ref" : "#/components/schemas/Merchant"
          },
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Request id given by the client",
            "example" : "123e4567-e89b-12d3-a456-426655440000"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersPaymentStatusOKBody" : {
        "required" : [ "originalRequestInfo" ],
        "type" : "object",
        "properties" : {
          "originalRequestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersPaymentStatusOKBodyOriginalRequestInfo"
          },
          "payments" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersPaymentStatusOKBodyPayments"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersPaymentStatusOKBodyOriginalRequestInfo" : {
        "required" : [ "xRequestId" ],
        "type" : "object",
        "properties" : {
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Original xRequestId given by the client on request",
            "example" : "444e4567-e55b-12d3-a456-426655448888"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersPaymentStatusOKBodyPayments" : {
        "required" : [ "transactionStatus" ],
        "type" : "object",
        "properties" : {
          "statusReasonCode" : {
            "type" : "string",
            "description" : "Rejection reson code",
            "example" : "AM04"
          },
          "transactionStatus" : {
            "type" : "string",
            "description" : "Payment transaction status",
            "enum" : [ "ACCP", "ACSC", "ACSP", "ACTC", "ACWC", "ACWP", "PDNG", "RCVD", "RJCT" ]
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersPaymentStatusParamsBody" : {
        "required" : [ "paymentId", "requestInfo" ],
        "type" : "object",
        "properties" : {
          "paymentId" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Payment identification",
            "example" : "258aFR415:22Aa:6asdC"
          },
          "requestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersPaymentStatusParamsBodyRequestInfo"
          }
        }
      },
      "postPaymentsCrossBorderCreditTransfersPaymentStatusParamsBodyRequestInfo" : {
        "required" : [ "aspspId", "consentId", "xRequestId" ],
        "type" : "object",
        "properties" : {
          "aspspId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Identification of ASPSP",
            "example" : "420e5cff-0e2a-4156-991a-f6eeef0478cf"
          },
          "consentId" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Consent identification",
            "example" : "CBgBTpF3:EBy5xGqQMatk"
          },
          "merchant" : {
            "$ref" : "#/components/schemas/Merchant"
          },
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Request id given by the client",
            "example" : "123e4567-e89b-12d3-a456-426655440000"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersConsentsOKBody" : {
        "required" : [ "originalRequestInfo" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersConsentsOKBodyLinks"
          },
          "additionalData" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersConsentsOKBody_additionalData"
          },
          "aspspSCAApproach" : {
            "type" : "string",
            "enum" : [ "REDIRECT" ]
          },
          "consentRequestId" : {
            "type" : "string"
          },
          "originalRequestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersConsentsOKBodyOriginalRequestInfo"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersConsentsOKBodyLinks" : {
        "type" : "object",
        "properties" : {
          "scaRedirect" : {
            "type" : "string",
            "description" : "Redirect URL for SCA",
            "example" : "https://bank1.com/sca/login"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersConsentsOKBodyOriginalRequestInfo" : {
        "required" : [ "xRequestId" ],
        "type" : "object",
        "properties" : {
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Original xRequestId given by the client on request",
            "example" : "444e4567-e55b-12d3-a456-426655448888"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersConsentsParamsBody" : {
        "required" : [ "payments", "requestInfo" ],
        "type" : "object",
        "properties" : {
          "payments" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersConsentsParamsBodyPayments"
          },
          "requestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersConsentsParamsBodyPayments" : {
        "required" : [ "creditorAccount", "creditorName", "endToEndIdentification", "instructedAmount", "localInstrument" ],
        "type" : "object",
        "properties" : {
          "creditorAccount" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAccount"
          },
          "creditorAddress" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAddress"
          },
          "creditorAgent" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent"
          },
          "creditorName" : {
            "maxLength" : 70,
            "minLength" : 1,
            "type" : "string",
            "description" : "Bank name",
            "example" : "Wood bank"
          },
          "debtorAccount" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersConsentsParamsBodyPayments_debtorAccount"
          },
          "debtorAgent" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersConsentsParamsBodyPayments_debtorAgent"
          },
          "endToEndIdentification" : {
            "maxLength" : 18,
            "minLength" : 1,
            "type" : "string",
            "description" : "Payment end to end identification",
            "example" : "Notification"
          },
          "instructedAmount" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount"
          },
          "instructionIdentification" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. If API profile of ASPSP is CMA9, then field is mandatory.",
            "example" : ""
          },
          "instructionPriority" : {
            "type" : "string",
            "description" : "Indicator of the urgency or order of importance",
            "example" : "",
            "enum" : [ "Normal", "Urgent" ]
          },
          "localInstrument" : {
            "type" : "string",
            "description" : "User community specific instrument.",
            "example" : "UK.FasterPayments",
            "enum" : [ "UK.FasterPayments", "PL.Elixir" ]
          },
          "remittanceInformationReference" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. (future use)",
            "example" : "UniqueRef1"
          },
          "remittanceInformationUnstructured" : {
            "maxLength" : 140,
            "minLength" : 1,
            "type" : "string",
            "description" : "Description of the payment",
            "example" : "Payment for fruits"
          },
          "requestedExecutionDate" : {
            "type" : "string",
            "description" : "Scheduled Payment Date",
            "format" : "date"
          },
          "schedule" : {
            "$ref" : "#/components/schemas/RequestPisDomesticSchedule"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAccount" : {
        "required" : [ "identification" ],
        "type" : "object",
        "properties" : {
          "identification" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Account number",
            "example" : "30087236"
          },
          "schemeName" : {
            "type" : "string",
            "description" : "Account scheme name",
            "example" : "UK.AccountNumber",
            "enum" : [ "UK.AccountNumber", "PL.AccountNumber" ]
          }
        }
      },
      "postPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAddress" : {
        "required" : [ "buildingNumber", "city", "country", "postalCode", "street" ],
        "type" : "object",
        "properties" : {
          "buildingNumber" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "15"
          },
          "city" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "City"
          },
          "country" : {
            "pattern" : "^[A-Z]{2}$",
            "type" : "string",
            "description" : "ISO 3166 ALPHA2 country code",
            "example" : "CC"
          },
          "countrySubDivision" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "Division"
          },
          "postalCode" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "PostCode"
          },
          "street" : {
            "maxLength" : 70,
            "minLength" : 1,
            "type" : "string",
            "example" : "Street"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent" : {
        "required" : [ "clearingSystemIdentification", "memberIdentification" ],
        "type" : "object",
        "properties" : {
          "clearingSystemIdentification" : {
            "type" : "string",
            "description" : "System identification:\n  * 'UK.SortCode' - UK FPS\n",
            "example" : "UK.SortCode",
            "enum" : [ "UK.SortCode" ]
          },
          "memberIdentification" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Sort code",
            "example" : "283746"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount" : {
        "required" : [ "amount", "currency" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "minimum" : 0,
            "exclusiveMinimum" : true,
            "type" : "number",
            "description" : "amount value",
            "format" : "double",
            "example" : 100.23
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code",
            "example" : "GBP",
            "enum" : [ "GBP", "PLN" ]
          }
        }
      },
      "postPaymentsDomesticCreditTransfersConsentsParamsBodyPayments_debtorAccount" : {
        "required" : [ "identification" ],
        "type" : "object",
        "properties" : {
          "identification" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Debtor account identification, If localInstrument = 'UK.FasterPayments' and debtorAgent was specified then this needs to be a UK Account number (8 digits)",
            "example" : ""
          }
        }
      },
      "postPaymentsDomesticCreditTransfersConsentsParamsBodyPayments_debtorAgent" : {
        "required" : [ "identification" ],
        "type" : "object",
        "properties" : {
          "identification" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Debtor agent identification, If localInstrument = 'UK.FasterPayments' and debtorAccount was specified then this needs to be a UK Sort code (6 digits)",
            "example" : ""
          }
        }
      },
      "postPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo" : {
        "required" : [ "aspspId", "tppRedirectURI", "xRequestId" ],
        "type" : "object",
        "properties" : {
          "aspspId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Identification of ASPSP",
            "example" : "420e5cff-0e2a-4156-991a-f6eeef0478cf"
          },
          "flags" : {
            "type" : "array",
            "description" : "Request information flags which can influence the behaviour or returned data",
            "items" : {
              "type" : "string",
              "example" : "Return.Raw.Consent",
              "enum" : [ "Return.Raw.Consent" ]
            }
          },
          "merchant" : {
            "$ref" : "#/components/schemas/Merchant"
          },
          "tppRedirectURI" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Call back uri",
            "example" : "https://tpp-ob.com/callback"
          },
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Request id given by the client",
            "example" : "123e4567-e89b-12d3-a456-426655440000"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersOKBody" : {
        "required" : [ "consent", "originalRequestInfo", "transfer" ],
        "type" : "object",
        "properties" : {
          "consent" : {
            "$ref" : "#/components/schemas/PaymentConsent"
          },
          "originalRequestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersOKBodyOriginalRequestInfo"
          },
          "transfer" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersOKBodyTransfer"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersOKBodyOriginalRequestInfo" : {
        "required" : [ "xRequestId" ],
        "type" : "object",
        "properties" : {
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Original xRequestId given by the client on request",
            "example" : "444e4567-e55b-12d3-a456-426655448888"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersOKBodyTransfer" : {
        "required" : [ "paymentId", "transactionStatus" ],
        "type" : "object",
        "properties" : {
          "paymentId" : {
            "type" : "string",
            "description" : "PI / Transfer identification",
            "example" : "trasnferIdentificaion1"
          },
          "statusReasonCode" : {
            "type" : "string",
            "description" : "Rejection reson code",
            "example" : "AM04"
          },
          "transactionStatus" : {
            "type" : "string",
            "description" : "Status of the payment",
            "enum" : [ "ACCP", "ACSC", "ACSP", "ACTC", "ACWC", "ACWP", "PDNG", "RCVD", "RJCT", "CANC" ]
          }
        }
      },
      "postPaymentsDomesticCreditTransfersParamsBody" : {
        "required" : [ "requestInfo" ],
        "type" : "object",
        "properties" : {
          "requestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersParamsBodyRequestInfo"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersParamsBodyRequestInfo" : {
        "required" : [ "aspspId", "authorization", "xRequestId" ],
        "type" : "object",
        "properties" : {
          "aspspId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Identification of ASPSP",
            "example" : "420e5cff-0e2a-4156-991a-f6eeef0478cf"
          },
          "authorization" : {
            "maxLength" : 5000,
            "minLength" : 1,
            "type" : "string",
            "description" : "The authorization query / data received after PSU has authorized the consent",
            "example" : "code=UKdpVsbG8gQ2TP9kZWJleft53serYXV0aUK001&state=38948933-38ae-45af-953e-25a69fefa39e"
          },
          "merchant" : {
            "$ref" : "#/components/schemas/Merchant"
          },
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Request id given by the client",
            "example" : "123e4567-e89b-12d3-a456-426655440000"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersPaymentStatusOKBody" : {
        "required" : [ "originalRequestInfo" ],
        "type" : "object",
        "properties" : {
          "originalRequestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersPaymentStatusOKBodyOriginalRequestInfo"
          },
          "payments" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersPaymentStatusOKBodyPayments"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersPaymentStatusOKBodyOriginalRequestInfo" : {
        "required" : [ "xRequestId" ],
        "type" : "object",
        "properties" : {
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Original xRequestId given by the client on request",
            "example" : "444e4567-e55b-12d3-a456-426655448888"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersPaymentStatusOKBodyPayments" : {
        "required" : [ "transactionStatus" ],
        "type" : "object",
        "properties" : {
          "statusReasonCode" : {
            "type" : "string",
            "description" : "Rejection reson code",
            "example" : "AM04"
          },
          "transactionStatus" : {
            "type" : "string",
            "description" : "Payment transaction status",
            "enum" : [ "ACCP", "ACSC", "ACSP", "ACTC", "ACWC", "ACWP", "PDNG", "RCVD", "RJCT", "CANC" ]
          }
        }
      },
      "postPaymentsDomesticCreditTransfersPaymentStatusParamsBody" : {
        "required" : [ "paymentId", "requestInfo" ],
        "type" : "object",
        "properties" : {
          "paymentId" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Payment identification",
            "example" : "UK8aFR415:22Aa:6asdC"
          },
          "requestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsDomesticCreditTransfersPaymentStatusParamsBodyRequestInfo"
          }
        }
      },
      "postPaymentsDomesticCreditTransfersPaymentStatusParamsBodyRequestInfo" : {
        "required" : [ "aspspId", "consentId", "xRequestId" ],
        "type" : "object",
        "properties" : {
          "aspspId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Identification of ASPSP",
            "example" : "420e5cff-0e2a-4156-991a-f6eeef0478cf"
          },
          "consentId" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Consent identification",
            "example" : "UK8sPNznYtfV:5zKxyC"
          },
          "merchant" : {
            "$ref" : "#/components/schemas/Merchant"
          },
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Request id given by the client",
            "example" : "123e4567-e89b-12d3-a456-426655440000"
          }
        }
      },
      "postPaymentsSepaCreditTransfersConsentsOKBody" : {
        "required" : [ "originalRequestInfo" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersConsentsOKBodyLinks"
          },
          "additionalData" : {
            "$ref" : "#/components/schemas/postPaymentsCrossBorderCreditTransfersConsentsOKBody_additionalData"
          },
          "aspspSCAApproach" : {
            "type" : "string",
            "enum" : [ "REDIRECT" ]
          },
          "consentRequestId" : {
            "type" : "string"
          },
          "originalRequestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersConsentsOKBodyOriginalRequestInfo"
          }
        }
      },
      "postPaymentsSepaCreditTransfersConsentsOKBodyLinks" : {
        "type" : "object",
        "properties" : {
          "scaRedirect" : {
            "type" : "string",
            "description" : "Redirect URL for SCA",
            "example" : "https://bank1.com/sca/login"
          }
        }
      },
      "postPaymentsSepaCreditTransfersConsentsOKBodyOriginalRequestInfo" : {
        "required" : [ "xRequestId" ],
        "type" : "object",
        "properties" : {
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Original xRequestId given by the client on request",
            "example" : "444e4567-e55b-12d3-a456-426655448888"
          }
        }
      },
      "postPaymentsSepaCreditTransfersConsentsParamsBody" : {
        "required" : [ "payments", "requestInfo" ],
        "type" : "object",
        "properties" : {
          "payments" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersConsentsParamsBodyPayments"
          },
          "requestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo"
          }
        }
      },
      "postPaymentsSepaCreditTransfersConsentsParamsBodyPayments" : {
        "required" : [ "creditorAccount", "creditorAddress", "creditorAgent", "creditorName", "debtorName", "endToEndIdentification", "instructedAmount", "instructionPriority", "localInstrument" ],
        "type" : "object",
        "properties" : {
          "categoryPurpose" : {
            "type" : "string",
            "description" : "Purpose of the payment",
            "example" : "CASH",
            "enum" : [ "CASH", "CORT", "DVPM", "INTC", "TREA" ]
          },
          "creditorAccount" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAccount"
          },
          "creditorAddress" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress"
          },
          "creditorAgent" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersConsentsParamsBodyPayments_creditorAgent"
          },
          "creditorName" : {
            "maxLength" : 70,
            "minLength" : 1,
            "type" : "string",
            "description" : "Bank name",
            "example" : "Wood bank"
          },
          "debtorAccount" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount"
          },
          "debtorAddress" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAddress"
          },
          "debtorAgent" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersConsentsParamsBodyPayments_debtorAgent"
          },
          "debtorName" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Debtor legal name",
            "example" : "NordPole PLC"
          },
          "endToEndIdentification" : {
            "maxLength" : 18,
            "minLength" : 1,
            "type" : "string",
            "description" : "Payment end to end identification",
            "example" : "Notification"
          },
          "instructedAmount" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsInstructedAmount"
          },
          "instructionPriority" : {
            "type" : "string",
            "description" : "Indicator of the urgency or order of importance",
            "example" : "Normal",
            "enum" : [ "Normal", "Urgent" ]
          },
          "localInstrument" : {
            "type" : "string",
            "description" : "User community specific instrument.",
            "example" : "SEPA",
            "enum" : [ "SEPA" ]
          },
          "remittanceInformationReference" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. (future use)",
            "example" : "UniqueRef1"
          },
          "remittanceInformationStructured" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Description of the payment",
            "example" : "Payment for fruits from card 543210000023456"
          },
          "remittanceInformationUnstructured" : {
            "maxLength" : 140,
            "minLength" : 1,
            "type" : "string",
            "description" : "Description of the payment",
            "example" : "Payment for fruits"
          },
          "requestedExecutionDate" : {
            "type" : "string",
            "description" : "Scheduled Payment Date",
            "format" : "date"
          },
          "schedule" : {
            "$ref" : "#/components/schemas/RequestPisSepaSchedule"
          }
        }
      },
      "postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAccount" : {
        "required" : [ "iban" ],
        "type" : "object",
        "properties" : {
          "iban" : {
            "pattern" : "^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$",
            "type" : "string",
            "description" : "Account IBAN",
            "example" : "PL45222222222222222222222222"
          }
        }
      },
      "postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress" : {
        "required" : [ "country" ],
        "type" : "object",
        "properties" : {
          "buildingNumber" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "15"
          },
          "city" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "City"
          },
          "country" : {
            "pattern" : "^[A-Z]{2}$",
            "type" : "string",
            "description" : "ISO 3166 ALPHA2 country code",
            "example" : "CC"
          },
          "countrySubDivision" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "Division"
          },
          "postalCode" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "PostCode"
          },
          "street" : {
            "maxLength" : 70,
            "minLength" : 1,
            "type" : "string",
            "example" : "Street"
          }
        }
      },
      "postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount" : {
        "required" : [ "iban" ],
        "type" : "object",
        "properties" : {
          "iban" : {
            "pattern" : "^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$",
            "type" : "string",
            "description" : "Account IBAN",
            "example" : "PL45222222222222222222222222"
          }
        }
      },
      "postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAddress" : {
        "type" : "object",
        "properties" : {
          "buildingNumber" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "15"
          },
          "city" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "City"
          },
          "country" : {
            "pattern" : "^[A-Z]{2}$",
            "type" : "string",
            "description" : "ISO 3166 ALPHA2 country code",
            "example" : "CC"
          },
          "countrySubDivision" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "Division"
          },
          "postalCode" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "example" : "PostCode"
          },
          "street" : {
            "maxLength" : 70,
            "minLength" : 1,
            "type" : "string",
            "example" : "Street"
          }
        }
      },
      "postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsInstructedAmount" : {
        "required" : [ "amount", "currency" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "minimum" : 0,
            "exclusiveMinimum" : true,
            "type" : "number",
            "description" : "amount value",
            "format" : "double",
            "example" : 200.0
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code",
            "example" : "EUR",
            "enum" : [ "EUR" ]
          }
        }
      },
      "postPaymentsSepaCreditTransfersConsentsParamsBodyPayments_creditorAgent" : {
        "required" : [ "bicfi" ],
        "type" : "object",
        "properties" : {
          "bicfi" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Creditor FI",
            "example" : "BARCGB22XXX"
          }
        }
      },
      "postPaymentsSepaCreditTransfersConsentsParamsBodyPayments_debtorAgent" : {
        "required" : [ "bicfi" ],
        "type" : "object",
        "properties" : {
          "bicfi" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Debtor FI",
            "example" : "BARCGB22XXX"
          }
        }
      },
      "postPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo" : {
        "required" : [ "aspspId", "tppRedirectURI", "xRequestId" ],
        "type" : "object",
        "properties" : {
          "aspspId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Identification of ASPSP",
            "example" : "b806ae68-a45b-49d6-b25a-69fdb81dede6"
          },
          "flags" : {
            "type" : "array",
            "description" : "Request information flags which can influence the behaviour or returned data",
            "items" : {
              "type" : "string",
              "enum" : [ "Return.Raw.Consent" ]
            }
          },
          "merchant" : {
            "$ref" : "#/components/schemas/Merchant"
          },
          "tppRedirectURI" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Call back uri",
            "example" : "https://tpp-ob.com/callback"
          },
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Request id given by the client",
            "example" : "123e4567-e89b-12d3-a456-426655440000"
          }
        }
      },
      "postPaymentsSepaCreditTransfersOKBody" : {
        "required" : [ "consent", "originalRequestInfo", "transfer" ],
        "type" : "object",
        "properties" : {
          "consent" : {
            "$ref" : "#/components/schemas/SepaPaymentConsent"
          },
          "originalRequestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersOKBodyOriginalRequestInfo"
          },
          "transfer" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersOKBodyTransfer"
          }
        }
      },
      "postPaymentsSepaCreditTransfersOKBodyOriginalRequestInfo" : {
        "required" : [ "xRequestId" ],
        "type" : "object",
        "properties" : {
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Original xRequestId given by the client on request",
            "example" : "444e4567-e55b-12d3-a456-426655448888"
          }
        }
      },
      "postPaymentsSepaCreditTransfersOKBodyTransfer" : {
        "required" : [ "paymentId", "transactionStatus" ],
        "type" : "object",
        "properties" : {
          "paymentId" : {
            "type" : "string",
            "description" : "PI / Transfer identification",
            "example" : "trasnferIdentificaion1"
          },
          "statusReasonCode" : {
            "type" : "string",
            "description" : "Rejection reson code",
            "example" : "AM04"
          },
          "transactionStatus" : {
            "type" : "string",
            "description" : "Status of the payment",
            "enum" : [ "ACCP", "ACSC", "ACSP", "ACTC", "ACWC", "ACWP", "PDNG", "RCVD", "RJCT", "CANC" ]
          }
        }
      },
      "postPaymentsSepaCreditTransfersParamsBody" : {
        "required" : [ "requestInfo" ],
        "type" : "object",
        "properties" : {
          "requestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersParamsBodyRequestInfo"
          }
        }
      },
      "postPaymentsSepaCreditTransfersParamsBodyRequestInfo" : {
        "required" : [ "aspspId", "authorization", "xRequestId" ],
        "type" : "object",
        "properties" : {
          "aspspId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Identification of ASPSP",
            "example" : "b806ae68-a45b-49d6-b25a-69fdb81dede6"
          },
          "authorization" : {
            "maxLength" : 5000,
            "minLength" : 1,
            "type" : "string",
            "description" : "The authorization query / data received after PSU has authorized the consent",
            "example" : "code=PLsepaVsbG8gQ2TP9kZWJleft53serYXV0aPL003&state=38948933-38ae-45af-953e-25a69fefa39e"
          },
          "merchant" : {
            "$ref" : "#/components/schemas/Merchant"
          },
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Request id given by the client",
            "example" : "123e4567-e89b-12d3-a456-426655440000"
          }
        }
      },
      "postPaymentsSepaCreditTransfersPaymentStatusOKBody" : {
        "required" : [ "originalRequestInfo" ],
        "type" : "object",
        "properties" : {
          "originalRequestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersPaymentStatusOKBodyOriginalRequestInfo"
          },
          "payments" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersPaymentStatusOKBodyPayments"
          }
        }
      },
      "postPaymentsSepaCreditTransfersPaymentStatusOKBodyOriginalRequestInfo" : {
        "required" : [ "xRequestId" ],
        "type" : "object",
        "properties" : {
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Original xRequestId given by the client on request",
            "example" : "444e4567-e55b-12d3-a456-426655448888"
          }
        }
      },
      "postPaymentsSepaCreditTransfersPaymentStatusOKBodyPayments" : {
        "required" : [ "transactionStatus" ],
        "type" : "object",
        "properties" : {
          "statusReasonCode" : {
            "type" : "string",
            "description" : "Rejection reson code",
            "example" : "AM04"
          },
          "transactionStatus" : {
            "type" : "string",
            "description" : "Payment transaction status",
            "enum" : [ "ACCP", "ACSC", "ACSP", "ACTC", "ACWC", "ACWP", "PDNG", "RCVD", "RJCT", "CANC" ]
          }
        }
      },
      "postPaymentsSepaCreditTransfersPaymentStatusParamsBody" : {
        "required" : [ "paymentId", "requestInfo" ],
        "type" : "object",
        "properties" : {
          "paymentId" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Payment identification",
            "example" : "wAa:665hs5:r5544dhhKM"
          },
          "requestInfo" : {
            "$ref" : "#/components/schemas/postPaymentsSepaCreditTransfersPaymentStatusParamsBodyRequestInfo"
          }
        }
      },
      "postPaymentsSepaCreditTransfersPaymentStatusParamsBodyRequestInfo" : {
        "required" : [ "aspspId", "consentId", "xRequestId" ],
        "type" : "object",
        "properties" : {
          "aspspId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Identification of ASPSP",
            "example" : "b806ae68-a45b-49d6-b25a-69fdb81dede6"
          },
          "consentId" : {
            "maxLength" : 256,
            "minLength" : 1,
            "type" : "string",
            "description" : "Consent identification",
            "example" : "SEPABJbqtZ8sPNznYtfV:5"
          },
          "merchant" : {
            "$ref" : "#/components/schemas/Merchant"
          },
          "xRequestId" : {
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type" : "string",
            "description" : "Request id given by the client",
            "example" : "123e4567-e89b-12d3-a456-426655440000"
          }
        }
      }
    }
  }
}