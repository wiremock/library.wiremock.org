{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "LaunchDarkly REST API",
    "description" : "Build custom integrations with the LaunchDarkly REST API",
    "termsOfService" : "https://launchdarkly.com/terms",
    "contact" : {
      "name" : "LaunchDarkly Support",
      "url" : "https://support.launchdarkly.com",
      "email" : "support@launchdarkly.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "5.3.0"
  },
  "servers" : [ {
    "url" : "https://app.launchdarkly.com/api/v2"
  } ],
  "security" : [ {
    "Token" : null
  } ],
  "paths" : {
    "/" : {
      "get" : {
        "tags" : [ "Root" ],
        "description" : "You can issue a GET request to the root resource to find all of the resource categories supported by the API.",
        "operationId" : "getRoot",
        "responses" : {
          "200" : {
            "description" : "A list of links to available resources in the API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Links"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      }
    },
    "/account/relay-auto-configs" : {
      "get" : {
        "tags" : [ "Relay proxy configurations" ],
        "summary" : "Returns a list of relay proxy configurations in the account.",
        "operationId" : "getRelayProxyConfigs",
        "responses" : {
          "200" : {
            "description" : "Relay proxy configs response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RelayProxyConfigs"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Relay proxy configurations" ],
        "summary" : "Create a new relay proxy config.",
        "operationId" : "postRelayAutoConfig",
        "requestBody" : {
          "description" : "Create a new relay proxy configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "A human-friendly name for the relay proxy configuration",
                    "example" : "My relay proxy config"
                  },
                  "policy" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Policy"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Relay proxy config response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RelayProxyConfig"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "403" : {
            "description" : "Access to the requested resource was denied."
          }
        }
      }
    },
    "/account/relay-auto-configs/{id}" : {
      "get" : {
        "tags" : [ "Relay proxy configurations" ],
        "summary" : "Get a single relay proxy configuration by ID.",
        "operationId" : "getRelayProxyConfig",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The relay proxy configuration ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Relay proxy config response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RelayProxyConfig"
                }
              }
            }
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "delete" : {
        "tags" : [ "Relay proxy configurations" ],
        "summary" : "Delete a relay proxy configuration by ID.",
        "operationId" : "deleteRelayProxyConfig",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The relay proxy configuration ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "patch" : {
        "tags" : [ "Relay proxy configurations" ],
        "summary" : "Modify a relay proxy configuration by ID.",
        "operationId" : "patchRelayProxyConfig",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The relay proxy configuration ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/'",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PatchOperation"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Relay proxy config response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RelayProxyConfig"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/account/relay-auto-configs/{id}/reset" : {
      "post" : {
        "tags" : [ "Relay proxy configurations" ],
        "summary" : "Reset a relay proxy configuration's secret key with an optional expiry time for the old key.",
        "operationId" : "resetRelayProxyConfig",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The relay proxy configuration ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expiry",
          "in" : "query",
          "description" : "An expiration time for the old relay proxy configuration key, expressed as a Unix epoch time in milliseconds. By default, the relay proxy configuration will expire immediately",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Relay proxy config response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RelayProxyConfig"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      }
    },
    "/auditlog" : {
      "get" : {
        "tags" : [ "Audit log" ],
        "summary" : "Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query.",
        "operationId" : "getAuditLogEntries",
        "parameters" : [ {
          "name" : "before",
          "in" : "query",
          "description" : "A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp.",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occurred after this timestamp.",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Text to search for. You can search for the full or partial name of the resource involved or full or partial email address of the member who made the change.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of audit log entries to be returned, between 1 and 20.",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "spec",
          "in" : "query",
          "description" : "A resource specifier, allowing you to filter audit log listings by resource.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Audit log entries response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLogEntries"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      }
    },
    "/auditlog/{resourceId}" : {
      "get" : {
        "tags" : [ "Audit log" ],
        "summary" : "Use this endpoint to fetch a single audit log entry by its resouce ID.",
        "operationId" : "getAuditLogEntry",
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "The resource ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Audit log entry response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLogEntry"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      }
    },
    "/destinations" : {
      "get" : {
        "tags" : [ "Data export destinations" ],
        "summary" : "Returns a list of all data export destinations.",
        "operationId" : "getDestinations",
        "responses" : {
          "200" : {
            "description" : "Destinations response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Destinations"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      }
    },
    "/destinations/{projectKey}/{environmentKey}" : {
      "post" : {
        "tags" : [ "Data export destinations" ],
        "summary" : "Create a new data export destination",
        "operationId" : "postDestination",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Create a new data export destination.",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "config", "kind", "name" ],
                "type" : "object",
                "properties" : {
                  "config" : {
                    "type" : "object",
                    "description" : "destination-specific configuration.",
                    "example" : {
                      "project" : "cool-project",
                      "topic" : "test"
                    }
                  },
                  "kind" : {
                    "type" : "string",
                    "description" : "The data export destination type. Available choices are kinesis, google-pubsub, mparticle, or segment.",
                    "example" : "google-pubsub",
                    "enum" : [ "google-pubsub", "kinesis", "mparticle", "segment" ]
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "A human-readable name for your data export destination.",
                    "example" : "Example Google Pub/Sub Destination"
                  },
                  "on" : {
                    "type" : "boolean",
                    "description" : "Whether the data export destination is on or not.",
                    "example" : true
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Destination response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Destination"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/destinations/{projectKey}/{environmentKey}/{destinationId}" : {
      "get" : {
        "tags" : [ "Data export destinations" ],
        "summary" : "Get a single data export destination by ID",
        "operationId" : "getDestination",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "destinationId",
          "in" : "path",
          "description" : "The data export destination ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Destination response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Destination"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "delete" : {
        "tags" : [ "Data export destinations" ],
        "summary" : "Get a single data export destination by ID",
        "operationId" : "deleteDestination",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "destinationId",
          "in" : "path",
          "description" : "The data export destination ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "patch" : {
        "tags" : [ "Data export destinations" ],
        "summary" : "Perform a partial update to a data export destination.",
        "operationId" : "patchDestination",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "destinationId",
          "in" : "path",
          "description" : "The data export destination ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments is also supported.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PatchOperation"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Destination response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Destination"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/flag-status/{projectKey}/{featureFlagKey}" : {
      "get" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Get the status for a particular feature flag across environments",
        "operationId" : "getFeatureFlagStatusAcrossEnvironments",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status of the requested feature flag across environments",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureFlagStatusAcrossEnvironments"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          }
        }
      }
    },
    "/flag-statuses/{projectKey}/{environmentKey}" : {
      "get" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag.",
        "operationId" : "getFeatureFlagStatuses",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of feature flag statuses.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureFlagStatuses"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      }
    },
    "/flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}" : {
      "get" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Get the status for a particular feature flag.",
        "operationId" : "getFeatureFlagStatus",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status of the requested feature flag.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureFlagStatus"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      }
    },
    "/flags/{projectKey}" : {
      "get" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Get a list of all features in the given project.",
        "operationId" : "getFeatureFlags",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "env",
          "in" : "query",
          "description" : "By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env=[\"production\"] will restrict the returned configurations to just your production environment.",
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "summary",
          "in" : "query",
          "description" : "By default in api version >= 1, flags will _not_ include their list of prerequisites, targets or rules.  Set summary=0 to include these fields for each flag returned.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "archived",
          "in" : "query",
          "description" : "When set to 1, only archived flags will be included in the list of flags returned.  By default, archived flags are not included in the list of flags.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of objects to return. Defaults to -1, which returns everything.",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A comma-separated list of filters. Each filter is of the form field:value.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Filter by tag. A tag can be used to group flags across projects.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Flags response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureFlags"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      },
      "post" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Creates a new feature flag.",
        "operationId" : "postFeatureFlag",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "clone",
          "in" : "query",
          "description" : "The key of the feature flag to be cloned. The key identifies the flag in your code.  For example, setting clone=flagKey will copy the full targeting configuration for all environments (including on/off state) from the original flag to the new flag.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Create a new feature flag.",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "key", "name", "variations" ],
                "type" : "object",
                "properties" : {
                  "clientSideAvailability" : {
                    "$ref" : "#/components/schemas/ClientSideAvailability"
                  },
                  "defaults" : {
                    "$ref" : "#/components/schemas/Defaults"
                  },
                  "description" : {
                    "type" : "string",
                    "description" : "A description of the feature flag.",
                    "example" : "This flag controls whether test feature is turned on or not."
                  },
                  "includeInSnippet" : {
                    "type" : "boolean",
                    "description" : "Whether or not this flag should be made available to the client-side JavaScript SDK."
                  },
                  "key" : {
                    "type" : "string",
                    "description" : "A unique key that will be used to reference the flag in your code.",
                    "example" : "new-test-flag"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "A human-friendly name for the feature flag. Remember to note if this flag is intended to be temporary or permanent.",
                    "example" : "new test flag"
                  },
                  "tags" : {
                    "type" : "array",
                    "description" : "Tags for the feature flag.",
                    "items" : {
                      "type" : "string",
                      "example" : ""
                    }
                  },
                  "temporary" : {
                    "type" : "boolean",
                    "description" : "Whether or not the flag is a temporary flag."
                  },
                  "variations" : {
                    "type" : "array",
                    "description" : "An array of possible variations for the flag.",
                    "items" : {
                      "$ref" : "#/components/schemas/Variation"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Flag response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureFlag"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/flags/{projectKey}/{environmentKey}/{featureFlagKey}/dependent-flags" : {
      "get" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Get dependent flags for the flag in the environment specified in path parameters",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dependent flags in a single envrionemnt response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DependentFlagsByEnvironment"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      }
    },
    "/flags/{projectKey}/{featureFlagKey}" : {
      "get" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Get a single feature flag by key.",
        "operationId" : "getFeatureFlag",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "env",
          "in" : "query",
          "description" : "By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env=[\"production\"] will restrict the returned configurations to just your production environment.",
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Flag response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureFlag"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "delete" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Delete a feature flag in all environments. Be careful-- only delete feature flags that are no longer being used by your application.",
        "operationId" : "deleteFeatureFlag",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "patch" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Perform a partial update to a feature.",
        "operationId" : "patchFeatureFlag",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requires a JSON Patch representation of the desired changes to the project, and an optional comment. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments is also supported.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "comment" : {
                    "type" : "string",
                    "example" : "This is a comment string"
                  },
                  "patch" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/PatchOperation"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Feature flag response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureFlag"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/flags/{projectKey}/{featureFlagKey}/copy" : {
      "post" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Copies the feature flag configuration from one environment to the same feature flag in another environment.",
        "operationId" : "copyFeatureFlag",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Copy feature flag configurations between environments.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "comment" : {
                    "type" : "string",
                    "description" : "comment will be included in audit log item for change.",
                    "example" : "This is a comment string"
                  },
                  "excludedActions" : {
                    "type" : "array",
                    "description" : "Define the parts of the flag configuration that will not be copied.",
                    "items" : {
                      "$ref" : "#/components/schemas/CopyActions"
                    }
                  },
                  "includedActions" : {
                    "type" : "array",
                    "description" : "Define the parts of the flag configuration that will be copied.",
                    "items" : {
                      "$ref" : "#/components/schemas/CopyActions"
                    }
                  },
                  "source" : {
                    "$ref" : "#/components/schemas/FeatureFlagCopyObject"
                  },
                  "target" : {
                    "$ref" : "#/components/schemas/FeatureFlagCopyObject"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Flag configuration copy response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureFlag"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/flags/{projectKey}/{featureFlagKey}/dependent-flags" : {
      "get" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Get dependent flags across all environments for the flag specified in the path parameters",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dependent flags accross all environemnts in the project response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MultiEnvironmentDependentFlags"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      }
    },
    "/flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}" : {
      "get" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Get expiring user targets for feature flag",
        "operationId" : "getExpiringUserTargets",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User targets of the requested feature flag.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserTargetingExpirationForFlags"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      },
      "patch" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Update, add, or delete expiring user targets on feature flag",
        "operationId" : "patchExpiringUserTargets",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requires a Semantic Patch representation of the desired changes to the resource. 'https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches'. The addition of comments is also supported.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SemanticPatchOperation"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User targeting expirations on feature flag response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserTargetingExpirationForFlags"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/integrations" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "Get a list of all configured audit log event integrations associated with this account.",
        "operationId" : "getIntegrations",
        "responses" : {
          "200" : {
            "description" : "Integrations response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integrations"
                }
              }
            }
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          }
        }
      }
    },
    "/integrations/{integrationKey}" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "Get a list of all configured integrations of a given kind.",
        "operationId" : "getIntegrationSubscriptions",
        "parameters" : [ {
          "name" : "integrationKey",
          "in" : "path",
          "description" : "The key used to specify the integration kind.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Integrations response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Integration"
                }
              }
            }
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "post" : {
        "tags" : [ "Integrations" ],
        "summary" : "Create a new integration subscription of a given kind.",
        "operationId" : "postIntegrationSubscription",
        "parameters" : [ {
          "name" : "integrationKey",
          "in" : "path",
          "description" : "The key used to specify the integration kind.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Create a new integration subscription.",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "config", "name" ],
                "type" : "object",
                "properties" : {
                  "config" : {
                    "type" : "object",
                    "description" : "Integration-specific configuration fields.",
                    "example" : {
                      "apiKey" : "582**************************116",
                      "hostURL" : "https://api.datadoghq.com"
                    }
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "A human-readable name for your subscription configuration.",
                    "example" : "Example Datadog Integration"
                  },
                  "on" : {
                    "type" : "boolean",
                    "description" : "Whether the integration subscription is active or not.",
                    "example" : true
                  },
                  "statements" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Statement"
                    }
                  },
                  "tags" : {
                    "type" : "array",
                    "description" : "Tags for the integration subscription.",
                    "example" : [ ],
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Integrations response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IntegrationSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/integrations/{integrationKey}/{integrationId}" : {
      "get" : {
        "tags" : [ "Integrations" ],
        "summary" : "Get a single integration subscription by ID.",
        "operationId" : "getIntegrationSubscription",
        "parameters" : [ {
          "name" : "integrationKey",
          "in" : "path",
          "description" : "The key used to specify the integration kind.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The integration ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Integrations response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IntegrationSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "delete" : {
        "tags" : [ "Integrations" ],
        "summary" : "Delete an integration subscription by ID.",
        "operationId" : "deleteIntegrationSubscription",
        "parameters" : [ {
          "name" : "integrationKey",
          "in" : "path",
          "description" : "The key used to specify the integration kind.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The integration ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "patch" : {
        "tags" : [ "Integrations" ],
        "summary" : "Modify an integration subscription by ID.",
        "operationId" : "patchIntegrationSubscription",
        "parameters" : [ {
          "name" : "integrationKey",
          "in" : "path",
          "description" : "The key used to specify the integration kind.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "integrationId",
          "in" : "path",
          "description" : "The integration ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/'",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PatchOperation"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Integrations response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IntegrationSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      }
    },
    "/members" : {
      "get" : {
        "tags" : [ "Team members" ],
        "summary" : "Returns a list of all members in the account.",
        "operationId" : "getMembers",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of objects to return. Defaults to -1, which returns everything.",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A comma-separated list of filters. Each filter is of the form field:value.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Members response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Members"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      },
      "post" : {
        "tags" : [ "Team members" ],
        "summary" : "Invite new members.",
        "operationId" : "postMembers",
        "requestBody" : {
          "description" : "New members to invite.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "required" : [ "email" ],
                  "type" : "object",
                  "properties" : {
                    "customRoles" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string",
                        "description" : "The 20-hexdigit id or the key for a custom role.",
                        "example" : "revenue-team"
                      }
                    },
                    "email" : {
                      "type" : "string",
                      "example" : "exampleuser@email.com"
                    },
                    "firstName" : {
                      "type" : "string",
                      "example" : "Bob"
                    },
                    "inlineRole" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Statement"
                      }
                    },
                    "lastName" : {
                      "type" : "string",
                      "example" : "Loblaw"
                    },
                    "role" : {
                      "$ref" : "#/components/schemas/Role"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Members response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Members"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/members/me" : {
      "get" : {
        "tags" : [ "Team members" ],
        "summary" : "Get the current team member associated with the token",
        "operationId" : "getMe",
        "responses" : {
          "200" : {
            "description" : "Member response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      }
    },
    "/members/{memberId}" : {
      "get" : {
        "tags" : [ "Team members" ],
        "summary" : "Get a single team member by ID.",
        "operationId" : "getMember",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "description" : "The member ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Member response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      },
      "delete" : {
        "tags" : [ "Team members" ],
        "summary" : "Delete a team member by ID.",
        "operationId" : "deleteMember",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "description" : "The member ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "patch" : {
        "tags" : [ "Team members" ],
        "summary" : "Modify a team member by ID.",
        "operationId" : "patchMember",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "description" : "The member ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/'",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PatchOperation"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Member response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/projects" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "Returns a list of all projects in the account.",
        "operationId" : "getProjects",
        "responses" : {
          "200" : {
            "description" : "Projects response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Projects"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      },
      "post" : {
        "tags" : [ "Projects" ],
        "summary" : "Create a new project with the given key and name.",
        "operationId" : "postProject",
        "requestBody" : {
          "description" : "Project keys must be unique within an account.",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "key", "name" ],
                "type" : "object",
                "properties" : {
                  "defaultClientSideAvailability" : {
                    "$ref" : "#/components/schemas/ClientSideAvailability"
                  },
                  "environments" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/EnvironmentPost"
                    }
                  },
                  "includeInSnippetByDefault" : {
                    "type" : "boolean",
                    "example" : false
                  },
                  "key" : {
                    "type" : "string",
                    "example" : "new-project"
                  },
                  "name" : {
                    "type" : "string",
                    "example" : "New Project"
                  },
                  "tags" : {
                    "type" : "array",
                    "example" : [ "ops", "dev" ],
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successful Project response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/projects/{projectKey}" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "Fetch a single project by key.",
        "operationId" : "getProject",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Project response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "delete" : {
        "tags" : [ "Projects" ],
        "summary" : "Delete a project by key. Caution-- deleting a project will delete all associated environments and feature flags. You cannot delete the last project in an account.",
        "operationId" : "deleteProject",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "patch" : {
        "tags" : [ "Projects" ],
        "summary" : "Modify a project by ID.",
        "operationId" : "patchProject",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/'",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PatchOperation"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful Project response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/projects/{projectKey}/environments" : {
      "post" : {
        "tags" : [ "Environments" ],
        "summary" : "Create a new environment in a specified project with a given name, key, and swatch color.",
        "operationId" : "postEnvironment",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "New environment.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EnvironmentPost"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Environment response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Environment"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/projects/{projectKey}/environments/{environmentKey}" : {
      "get" : {
        "tags" : [ "Environments" ],
        "summary" : "Get an environment given a project and key.",
        "operationId" : "getEnvironment",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Environment response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Environment"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "delete" : {
        "tags" : [ "Environments" ],
        "summary" : "Delete an environment in a specific project.",
        "operationId" : "deleteEnvironment",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "patch" : {
        "tags" : [ "Environments" ],
        "summary" : "Modify an environment by ID. If you try to patch the environment by setting both required and requiredApprovalTags, it will result in an error. Users can specify either required approvals for all flags in an environment or those with specific tags, but not both. Only customers on an Enterprise plan can require approval for flag updates with either mechanism.",
        "operationId" : "patchEnvironment",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/'",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PatchOperation"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Environment response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Environment"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/projects/{projectKey}/environments/{environmentKey}/apiKey" : {
      "post" : {
        "tags" : [ "Environments" ],
        "summary" : "Reset an environment's SDK key with an optional expiry time for the old key.",
        "operationId" : "resetEnvironmentSDKKey",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expiry",
          "in" : "query",
          "description" : "An expiration time for the old environment SDK key, expressed as a Unix epoch time in milliseconds. By default, the key will expire immediately.",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Environment response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Environment"
                }
              }
            }
          },
          "404" : {
            "description" : "Invalid resource specifier."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/projects/{projectKey}/environments/{environmentKey}/mobileKey" : {
      "post" : {
        "tags" : [ "Environments" ],
        "summary" : "Reset an environment's mobile key. The optional expiry for the old key is deprecated for this endpoint, so the old key will always expire immediately.",
        "operationId" : "resetEnvironmentMobileKey",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expiry",
          "in" : "query",
          "description" : "The expiry parameter is deprecated for this endpoint, so the old mobile key will always expire immediately. This parameter will be removed in an upcoming major API client version.",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Environment response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Environment"
                }
              }
            }
          },
          "404" : {
            "description" : "Invalid resource specifier."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests" : {
      "get" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Get all approval requests for a feature flag config",
        "operationId" : "getApprovalRequests",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Approval requests response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApprovalRequests"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      }
    },
    "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}" : {
      "get" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Get a single approval request for a feature flag config",
        "operationId" : "getApprovalRequest",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "approvalRequestId",
          "in" : "path",
          "description" : "The approval request ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Approval request response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApprovalRequests"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "post" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Create an approval request for a feature flag config",
        "operationId" : "postApprovalRequest",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "approvalRequestId",
          "in" : "path",
          "description" : "The approval request ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Create a new approval request",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "description", "instructions", "notifyMemberIds" ],
                "type" : "object",
                "properties" : {
                  "comment" : {
                    "type" : "string",
                    "description" : "comment will be included in audit log item for change."
                  },
                  "description" : {
                    "type" : "string",
                    "description" : "A name that describes the changes you would like to apply to a feature flag configuration"
                  },
                  "executionDate" : {
                    "type" : "integer",
                    "description" : "Timestamp for when instructions will be executed",
                    "format" : "int64"
                  },
                  "instructions" : {
                    "$ref" : "#/components/schemas/SemanticPatchInstruction"
                  },
                  "notifyMemberIds" : {
                    "type" : "array",
                    "example" : [ "memberId", "memberId2" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "operatingOnId" : {
                    "type" : "string",
                    "description" : "ID of scheduled change to edit or delete"
                  }
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Approval request response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApprovalRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "delete" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Delete an approval request for a feature flag config",
        "operationId" : "deleteApprovalRequest",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "approvalRequestId",
          "in" : "path",
          "description" : "The approval request ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Create a new approval request",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "description", "instructions", "notifyMemberIds" ],
                "type" : "object",
                "properties" : {
                  "comment" : {
                    "type" : "string",
                    "description" : "comment will be included in audit log item for change."
                  },
                  "description" : {
                    "type" : "string",
                    "description" : "A name that describes the changes you would like to apply to a feature flag configuration"
                  },
                  "executionDate" : {
                    "type" : "integer",
                    "description" : "Timestamp for when instructions will be executed",
                    "format" : "int64"
                  },
                  "instructions" : {
                    "$ref" : "#/components/schemas/SemanticPatchInstruction"
                  },
                  "notifyMemberIds" : {
                    "type" : "array",
                    "example" : [ "memberId", "memberId2" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "operatingOnId" : {
                    "type" : "string",
                    "description" : "ID of scheduled change to edit or delete"
                  }
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      }
    },
    "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/apply" : {
      "post" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Apply approval request for a feature flag config",
        "operationId" : "postApplyApprovalRequest",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "approvalRequestId",
          "in" : "path",
          "description" : "The approval request ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Apply an approval request",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "comment" : {
                    "type" : "string",
                    "description" : "comment will be included in audit log item for change.",
                    "example" : "Applying approved changes"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Approval request applied response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApprovalRequests"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      }
    },
    "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/review" : {
      "post" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Review approval request for a feature flag config",
        "operationId" : "postReviewApprovalRequest",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "approvalRequestId",
          "in" : "path",
          "description" : "The approval request ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Review an approval request",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "kind" ],
                "type" : "object",
                "properties" : {
                  "comment" : {
                    "type" : "string",
                    "description" : "comment will be included in audit log item for change.",
                    "example" : "This is a comment string"
                  },
                  "kind" : {
                    "type" : "string",
                    "description" : "One of approve, decline, or comment.",
                    "example" : "approve",
                    "enum" : [ "approve", "decline", "comment" ]
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Approval request reviewed response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApprovalRequests"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      }
    },
    "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes" : {
      "get" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Get all scheduled workflows for a feature flag by key.",
        "operationId" : "getFlagConfigScheduledChanges",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of scheduled changes for feature flag response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureFlagScheduledChanges"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "post" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Creates a new scheduled change for a feature flag.",
        "operationId" : "postFlagConfigScheduledChanges",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Create scheduled changes on a feature flag.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "comment" : {
                    "type" : "string",
                    "description" : "Used to describe the scheduled changes."
                  },
                  "executionDate" : {
                    "type" : "integer",
                    "description" : "A unix epoch time in milliseconds specifying the date the scheduled changes will be applied"
                  },
                  "instructions" : {
                    "$ref" : "#/components/schemas/SemanticPatchInstruction"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "A scheduled change for feature flag response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureFlagScheduledChange"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes-conflicts" : {
      "post" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Lists conflicts between the given instructions and any existing scheduled changes for the feature flag. The actual HTTP verb should be REPORT, not POST.",
        "operationId" : "getFlagConfigScheduledChangesConflicts",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Used to determine if a semantic patch will result in conflicts with scheduled changes on a feature flag.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "executionDate" : {
                    "type" : "integer",
                    "description" : "A unix epoch time in milliseconds specifying the date the scheduled changes will be applied"
                  },
                  "instructions" : {
                    "$ref" : "#/components/schemas/SemanticPatchInstruction"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Scheduled changes conflict response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureFlagScheduledChangesConflicts"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      }
    },
    "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}" : {
      "get" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Get a scheduled change on a feature flag by id.",
        "operationId" : "getFlagConfigScheduledChange",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scheduledChangeId",
          "in" : "path",
          "description" : "The id of the scheduled change",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A scheduled change for feature flag response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureFlagScheduledChange"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "delete" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Delete a scheduled change on a feature flag in an environment.",
        "operationId" : "deleteFlagConfigScheduledChanges",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scheduledChangeId",
          "in" : "path",
          "description" : "The id of the scheduled change",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "patch" : {
        "tags" : [ "Feature flags" ],
        "summary" : "Updates an existing scheduled-change on a feature flag in an environment.",
        "operationId" : "patchFlagConfigScheduledChange",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scheduledChangeId",
          "in" : "path",
          "description" : "The id of the scheduled change",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Update scheduled changes on a feature flag.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "comment" : {
                    "type" : "string",
                    "description" : "Used to describe the scheduled changes."
                  },
                  "instructions" : {
                    "$ref" : "#/components/schemas/SemanticPatchInstruction"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "A Scheduled change for feature flag response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureFlagScheduledChange"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/roles" : {
      "get" : {
        "tags" : [ "Custom roles" ],
        "summary" : "Return a complete list of custom roles.",
        "operationId" : "getCustomRoles",
        "responses" : {
          "200" : {
            "description" : "Custom roles response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomRoles"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      },
      "post" : {
        "tags" : [ "Custom roles" ],
        "summary" : "Create a new custom role.",
        "operationId" : "postCustomRole",
        "requestBody" : {
          "description" : "New role or roles to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "key", "name", "policy" ],
                "type" : "object",
                "properties" : {
                  "description" : {
                    "type" : "string",
                    "description" : "Description of the custom role.",
                    "example" : "Description of revenue team role here"
                  },
                  "key" : {
                    "type" : "string",
                    "description" : "The 20-hexdigit id or the key for a custom role.",
                    "example" : "revenue-team"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "Name of the custom role.",
                    "example" : "revenue team"
                  },
                  "policy" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Policy"
                    }
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Custom role response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomRole"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/roles/{customRoleKey}" : {
      "get" : {
        "tags" : [ "Custom roles" ],
        "summary" : "Get one custom role by key.",
        "operationId" : "getCustomRole",
        "parameters" : [ {
          "name" : "customRoleKey",
          "in" : "path",
          "description" : "The custom role key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Custom role response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomRole"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      },
      "delete" : {
        "tags" : [ "Custom roles" ],
        "summary" : "Delete a custom role by key.",
        "operationId" : "deleteCustomRole",
        "parameters" : [ {
          "name" : "customRoleKey",
          "in" : "path",
          "description" : "The custom role key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "patch" : {
        "tags" : [ "Custom roles" ],
        "summary" : "Modify a custom role by key.",
        "operationId" : "patchCustomRole",
        "parameters" : [ {
          "name" : "customRoleKey",
          "in" : "path",
          "description" : "The custom role key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/'",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PatchOperation"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Custom role response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomRole"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/segments/{projectKey}/{environmentKey}" : {
      "get" : {
        "tags" : [ "User segments" ],
        "summary" : "Get a list of all user segments in the given project.",
        "operationId" : "getUserSegments",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Filter by tag. A tag can be used to group flags across projects.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Segments response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserSegments"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      },
      "post" : {
        "tags" : [ "User segments" ],
        "summary" : "Creates a new user segment.",
        "operationId" : "postUserSegment",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Create a new user segment.",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "key", "name" ],
                "type" : "object",
                "properties" : {
                  "description" : {
                    "type" : "string",
                    "description" : "A description for the user segment.",
                    "example" : "Users in this segment will have access to beta features."
                  },
                  "key" : {
                    "type" : "string",
                    "description" : "A unique key that will be used to reference the user segment in feature flags.",
                    "example" : "new-segment"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "A human-friendly name for the user segment.",
                    "example" : "new segment"
                  },
                  "tags" : {
                    "type" : "array",
                    "description" : "Tags for the user segment.",
                    "items" : {
                      "type" : "string",
                      "example" : ""
                    }
                  },
                  "unbounded" : {
                    "type" : "boolean",
                    "description" : "Controls whether this is considered a \"big segment\" which can support an unlimited numbers of users. Include/exclude lists sent with this payload are not used in big segments. Contact your account manager for early access to this feature.",
                    "example" : false
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "User segment response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserSegment"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/segments/{projectKey}/{environmentKey}/{userSegmentKey}" : {
      "get" : {
        "tags" : [ "User segments" ],
        "summary" : "Get a single user segment by key.",
        "operationId" : "getUserSegment",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userSegmentKey",
          "in" : "path",
          "description" : "The user segment's key. The key identifies the user segment in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User segment response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserSegment"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "delete" : {
        "tags" : [ "User segments" ],
        "summary" : "Delete a user segment.",
        "operationId" : "deleteUserSegment",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userSegmentKey",
          "in" : "path",
          "description" : "The user segment's key. The key identifies the user segment in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "patch" : {
        "tags" : [ "User segments" ],
        "summary" : "Perform a partial update to a user segment.",
        "operationId" : "patchUserSegment",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userSegmentKey",
          "in" : "path",
          "description" : "The user segment's key. The key identifies the user segment in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments is also supported.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PatchOperation"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User segment response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserSegment"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/segments/{projectKey}/{environmentKey}/{userSegmentKey}/users" : {
      "post" : {
        "tags" : [ "User segments" ],
        "summary" : "Update targets included or excluded in a big segment",
        "operationId" : "updateBigSegmentTargets",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userSegmentKey",
          "in" : "path",
          "description" : "The user segment's key. The key identifies the user segment in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Add or remove user targets to the included or excluded lists on a big segment. Contact your account manager for early access to this feature.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "excluded" : {
                    "$ref" : "#/components/schemas/BigSegmentTargetChanges"
                  },
                  "included" : {
                    "$ref" : "#/components/schemas/BigSegmentTargetChanges"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      }
    },
    "/segments/{projectKey}/{userSegmentKey}/expiring-user-targets/{environmentKey}" : {
      "get" : {
        "tags" : [ "User segments" ],
        "summary" : "Get expiring user targets for user segment",
        "operationId" : "getExpiringUserTargetsOnSegment",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userSegmentKey",
          "in" : "path",
          "description" : "The user segment's key. The key identifies the user segment in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User targeting expirations on user segment response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserTargetingExpirationForSegment"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "patch" : {
        "tags" : [ "User segments" ],
        "summary" : "Update, add, or delete expiring user targets on user segment",
        "operationId" : "patchExpiringUserTargetsOnSegment",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userSegmentKey",
          "in" : "path",
          "description" : "The user segment's key. The key identifies the user segment in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requires a Semantic Patch representation of the desired changes to the resource. 'https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches'. The addition of comments is also supported.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SemanticPatchOperation"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User targeting expirations on user segment response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserTargetingExpirationForSegment"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/tokens" : {
      "get" : {
        "tags" : [ "Access tokens" ],
        "summary" : "Returns a list of tokens in the account.",
        "operationId" : "getTokens",
        "parameters" : [ {
          "name" : "showAll",
          "in" : "query",
          "description" : "If set to true, and the authentication access token has the \"Admin\" role, personal access tokens for all members will be retrieved.",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Tokens response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tokens"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      },
      "post" : {
        "tags" : [ "Access tokens" ],
        "summary" : "Create a new token.",
        "operationId" : "postToken",
        "requestBody" : {
          "description" : "Create a new access token.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "customRoleIds" : {
                    "type" : "array",
                    "description" : "A list of custom role IDs to use as access limits for the access token",
                    "items" : {
                      "type" : "string",
                      "example" : ""
                    }
                  },
                  "defaultApiVersion" : {
                    "type" : "integer",
                    "description" : "The default API version for this token"
                  },
                  "inlineRole" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Statement"
                    }
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "A human-friendly name for the access token",
                    "example" : "My access token"
                  },
                  "role" : {
                    "type" : "string",
                    "description" : "The name of a built-in role for the token",
                    "example" : "writer"
                  },
                  "serviceToken" : {
                    "type" : "boolean",
                    "description" : "Whether the token will be a service token https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Token response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/tokens/{tokenId}" : {
      "get" : {
        "tags" : [ "Access tokens" ],
        "summary" : "Get a single access token by ID.",
        "operationId" : "getToken",
        "parameters" : [ {
          "name" : "tokenId",
          "in" : "path",
          "description" : "The access token ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Token response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      },
      "delete" : {
        "tags" : [ "Access tokens" ],
        "summary" : "Delete an access token by ID.",
        "operationId" : "deleteToken",
        "parameters" : [ {
          "name" : "tokenId",
          "in" : "path",
          "description" : "The access token ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "patch" : {
        "tags" : [ "Access tokens" ],
        "summary" : "Modify an access token by ID.",
        "operationId" : "patchToken",
        "parameters" : [ {
          "name" : "tokenId",
          "in" : "path",
          "description" : "The access token ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/'",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PatchOperation"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Token response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/tokens/{tokenId}/reset" : {
      "post" : {
        "tags" : [ "Access tokens" ],
        "summary" : "Reset an access token's secret key with an optional expiry time for the old key.",
        "operationId" : "resetToken",
        "parameters" : [ {
          "name" : "tokenId",
          "in" : "path",
          "description" : "The access token ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expiry",
          "in" : "query",
          "description" : "An expiration time for the old token key, expressed as a Unix epoch time in milliseconds. By default, the token will expire immediately.",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Token response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      }
    },
    "/usage" : {
      "get" : {
        "tags" : [ "Customer Metrics" ],
        "summary" : "Returns of the usage endpoints available.",
        "operationId" : "getUsage",
        "responses" : {
          "200" : {
            "description" : "Usage endpoints",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Usage"
                }
              }
            }
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          }
        }
      }
    },
    "/usage/evaluations/{envId}/{flagKey}" : {
      "get" : {
        "tags" : [ "Customer Metrics" ],
        "summary" : "Get events usage by event id and the feature flag key.",
        "operationId" : "getEvaluations",
        "parameters" : [ {
          "name" : "envId",
          "in" : "path",
          "description" : "The environment id for the flag evaluations in question.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "flagKey",
          "in" : "path",
          "description" : "The key of the flag we want metrics for.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns timeseries data and all sdk versions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StreamSDKVersion"
                }
              }
            }
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          },
          "404" : {
            "description" : "The environment or flag you requested could not be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EvaluationUsageError"
                }
              }
            }
          }
        }
      }
    },
    "/usage/events" : {
      "get" : {
        "tags" : [ "Customer Metrics" ],
        "summary" : "Get events usage endpoints.",
        "operationId" : "getEvents",
        "responses" : {
          "200" : {
            "description" : "Returns timeseries data and all sdk versions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Events"
                }
              }
            }
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          }
        }
      }
    },
    "/usage/events/{type}" : {
      "get" : {
        "tags" : [ "Customer Metrics" ],
        "summary" : "Get events usage by event type.",
        "operationId" : "getEvent",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "The type of event we would like to track.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns timeseries data and all sdk versions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StreamSDKVersion"
                }
              }
            }
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          },
          "404" : {
            "description" : "The stream source you requested could not be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StreamUsageError"
                }
              }
            }
          }
        }
      }
    },
    "/usage/mau" : {
      "get" : {
        "tags" : [ "Customer Metrics" ],
        "summary" : "Get monthly active user data.",
        "operationId" : "getMAU",
        "responses" : {
          "200" : {
            "description" : "Returns timeseries data and all sdk versions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MAU"
                }
              }
            }
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          }
        }
      }
    },
    "/usage/mau/bycategory" : {
      "get" : {
        "tags" : [ "Customer Metrics" ],
        "summary" : "Get monthly active user data by category.",
        "operationId" : "getMAUByCategory",
        "responses" : {
          "200" : {
            "description" : "Returns timeseries data and all sdk versions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MAUbyCategory"
                }
              }
            }
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          }
        }
      }
    },
    "/usage/streams" : {
      "get" : {
        "tags" : [ "Customer Metrics" ],
        "summary" : "Returns a list of all streams.",
        "operationId" : "getStreams",
        "responses" : {
          "200" : {
            "description" : "Stream usage endpoints",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Streams"
                }
              }
            }
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          }
        }
      }
    },
    "/usage/streams/{source}" : {
      "get" : {
        "tags" : [ "Customer Metrics" ],
        "summary" : "Get a stream endpoint and return timeseries data.",
        "operationId" : "getStream",
        "parameters" : [ {
          "name" : "source",
          "in" : "path",
          "description" : "The source of where the stream comes from.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Responds with time series data on stream usage.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Stream"
                }
              }
            }
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          },
          "404" : {
            "description" : "The stream source you requested could not be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StreamUsageError"
                }
              }
            }
          }
        }
      }
    },
    "/usage/streams/{source}/bysdkversion" : {
      "get" : {
        "tags" : [ "Customer Metrics" ],
        "summary" : "Get a stream timeseries data by source show sdk version metadata.",
        "operationId" : "getStreamBySDK",
        "parameters" : [ {
          "name" : "source",
          "in" : "path",
          "description" : "The source of where the stream comes from.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns timeseries data and metadata on sdk version.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StreamBySDK"
                }
              }
            }
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          },
          "404" : {
            "description" : "The stream source you requested could not be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StreamUsageError"
                }
              }
            }
          }
        }
      }
    },
    "/usage/streams/{source}/sdkversions" : {
      "get" : {
        "tags" : [ "Customer Metrics" ],
        "summary" : "Get a stream timeseries data by source and show all sdk version associated.",
        "operationId" : "getStreamSDKVersion",
        "parameters" : [ {
          "name" : "source",
          "in" : "path",
          "description" : "The source of where the stream comes from.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns timeseries data and all sdk versions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StreamSDKVersion"
                }
              }
            }
          },
          "403" : {
            "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsageError"
                }
              }
            }
          },
          "404" : {
            "description" : "The stream source you requested could not be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StreamUsageError"
                }
              }
            }
          }
        }
      }
    },
    "/user-search/{projectKey}/{environmentKey}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly-- use the List users API resource.",
        "operationId" : "getSearchUsers",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search query.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Pagination limit.",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Specifies the first item to return in the collection.",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occurred after this timestamp.",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Users response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Users"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      }
    },
    "/users/{projectKey}/{environmentKey}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "List all users in the environment. Includes the total count of users. In each page, there will be up to 'limit' users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection.",
        "operationId" : "getUsers",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Pagination limit.",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "h",
          "in" : "query",
          "description" : "This parameter is required when following \"next\" links.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scrollId",
          "in" : "query",
          "description" : "This parameter is required when following \"next\" links.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Users response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Users"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      }
    },
    "/users/{projectKey}/{environmentKey}/{userKey}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get a user by key.",
        "operationId" : "getUser",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userKey",
          "in" : "path",
          "description" : "The user's key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserRecord"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Delete a user by ID.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userKey",
          "in" : "path",
          "description" : "The user's key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      }
    },
    "/users/{projectKey}/{environmentKey}/{userKey}/flags" : {
      "get" : {
        "tags" : [ "User settings" ],
        "summary" : "Fetch a single flag setting for a user by key.",
        "operationId" : "getUserFlagSettings",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userKey",
          "in" : "path",
          "description" : "The user's key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User flags settings response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserFlagSettings"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      }
    },
    "/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}" : {
      "get" : {
        "tags" : [ "User settings" ],
        "summary" : "Fetch a single flag setting for a user by key.",
        "operationId" : "getUserFlagSetting",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userKey",
          "in" : "path",
          "description" : "The user's key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User flag setting response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserFlagSetting"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "put" : {
        "tags" : [ "User settings" ],
        "summary" : "Specifically enable or disable a feature flag for a user based on their key.",
        "operationId" : "putFlagSetting",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userKey",
          "in" : "path",
          "description" : "The user's key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureFlagKey",
          "in" : "path",
          "description" : "The feature flag's key. The key identifies the flag in your code.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "setting" : {
                    "type" : "boolean",
                    "description" : "The variation value to set for the user. Must match the variation type of the flag.\n"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      }
    },
    "/users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey}" : {
      "get" : {
        "tags" : [ "User settings" ],
        "summary" : "Get expiring dates on flags for user",
        "operationId" : "getExpiringUserTargetsForUser",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userKey",
          "in" : "path",
          "description" : "The user's key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User targets of the requested feature flag.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserTargetingExpirationOnFlagsForUser"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      },
      "patch" : {
        "tags" : [ "User settings" ],
        "summary" : "Update, add, or delete expiring user targets for a single user on all flags",
        "operationId" : "patchExpiringUserTargetsForFlags",
        "parameters" : [ {
          "name" : "projectKey",
          "in" : "path",
          "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "environmentKey",
          "in" : "path",
          "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userKey",
          "in" : "path",
          "description" : "The user's key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requires a Semantic Patch representation of the desired changes to the resource. 'https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches'. The addition of comments is also supported.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SemanticPatchOperation"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User Targeting expiration for single user on all flags response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserTargetingExpirationOnFlagsForUser"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    },
    "/webhooks" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "summary" : "Fetch a list of all webhooks.",
        "operationId" : "getWebhooks",
        "responses" : {
          "200" : {
            "description" : "Webhooks response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhooks"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      },
      "post" : {
        "tags" : [ "Webhooks" ],
        "summary" : "Create a webhook.",
        "operationId" : "postWebhook",
        "requestBody" : {
          "description" : "New webhook.",
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "on", "sign", "url" ],
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "The name of the webhook.",
                    "example" : "Example hook"
                  },
                  "on" : {
                    "type" : "boolean",
                    "description" : "Whether this webhook is enabled or not.",
                    "example" : true
                  },
                  "secret" : {
                    "type" : "string",
                    "description" : "If sign is true, and the secret attribute is omitted, LaunchDarkly will automatically generate a secret for you.",
                    "example" : "<password>"
                  },
                  "sign" : {
                    "type" : "boolean",
                    "description" : "If sign is false, the webhook will not include a signature header, and the secret can be omitted."
                  },
                  "statements" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Statement"
                    }
                  },
                  "tags" : {
                    "type" : "array",
                    "description" : "Tags for the webhook.",
                    "example" : [ ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "url" : {
                    "type" : "string",
                    "description" : "The URL of the remote webhook.",
                    "example" : "https://example.com/example"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Webhook response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          }
        }
      }
    },
    "/webhooks/{resourceId}" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "summary" : "Get a webhook by ID.",
        "operationId" : "getWebhook",
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "The resource ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Webhook response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhook"
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "delete" : {
        "tags" : [ "Webhooks" ],
        "summary" : "Delete a webhook by ID.",
        "operationId" : "deleteWebhook",
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "The resource ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Action completed successfully."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          }
        }
      },
      "patch" : {
        "tags" : [ "Webhooks" ],
        "summary" : "Modify a webhook by ID.",
        "operationId" : "patchWebhook",
        "parameters" : [ {
          "name" : "resourceId",
          "in" : "path",
          "description" : "The resource ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/'",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PatchOperation"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Webhook response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request body."
          },
          "401" : {
            "description" : "Invalid access token."
          },
          "404" : {
            "description" : "Invalid resource specifier."
          },
          "409" : {
            "description" : "Status conflict."
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ApprovalRequest" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "$ref" : "#/components/schemas/Id"
          },
          "_version" : {
            "type" : "integer"
          },
          "allReviews" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ApprovalRequestReview"
            }
          },
          "appliedByMemberID" : {
            "type" : "string",
            "description" : "The id of the member that applied the approval request"
          },
          "appliedDate" : {
            "type" : "integer",
            "description" : "A unix epoch time in milliseconds specifying the date the approval request was applied"
          },
          "creationDate" : {
            "type" : "integer",
            "description" : "A unix epoch time in milliseconds specifying the date the approval request was requested"
          },
          "executionDate" : {
            "type" : "integer",
            "description" : "Timestamp for when instructions will be executed",
            "format" : "int64"
          },
          "instructions" : {
            "$ref" : "#/components/schemas/SemanticPatchInstruction"
          },
          "notifyMemberIds" : {
            "type" : "array",
            "example" : [ "memberId", "memberId2" ],
            "items" : {
              "type" : "string"
            }
          },
          "operatingOnId" : {
            "type" : "string",
            "description" : "ID of scheduled change to edit or delete"
          },
          "requestorId" : {
            "type" : "string",
            "description" : "The id of the member that requested the change"
          },
          "reviewStatus" : {
            "$ref" : "#/components/schemas/ApprovalRequestReviewStatus"
          },
          "status" : {
            "type" : "string",
            "description" : "| Name      | Description |\n| ---------:| ----------- |\n| pending   | the approval request has not been applied yet |\n| completed | the approval request has been applied successfully |\n| scheduled | the approval request for a scheduled change has been applied successfully |\n| failed    | the approval request has been applied but the changes were not applied successfully |\n",
            "enum" : [ "pending", "completed", "scheduled", "failed" ]
          }
        }
      },
      "ApprovalRequestReview" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "$ref" : "#/components/schemas/Id"
          },
          "creationDate" : {
            "type" : "integer",
            "description" : "A unix epoch time in milliseconds specifying the date the approval request was reviewed"
          },
          "kind" : {
            "$ref" : "#/components/schemas/ApprovalRequestReviewStatus"
          },
          "memberId" : {
            "$ref" : "#/components/schemas/Id"
          }
        }
      },
      "ApprovalRequestReviewStatus" : {
        "type" : "string",
        "description" : "| Name     | Description |\n| --------:| ----------- |\n| pending  | the approval request has not been reviewed yet |\n| approved | the approval request has been approved and can now be applied |\n| declined | the approval request has been declined and cannot be applied |\n",
        "enum" : [ "pending", "approved", "declined" ]
      },
      "ApprovalRequests" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ApprovalRequest"
            }
          }
        }
      },
      "AuditLogEntries" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AuditLogEntry"
            }
          }
        }
      },
      "AuditLogEntry" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "$ref" : "#/components/schemas/Id"
          },
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "comment" : {
            "type" : "string",
            "example" : "This is a comment string"
          },
          "date" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 1472243938774
          },
          "description" : {
            "type" : "string",
            "example" : "Changed the name from Test to Testing"
          },
          "kind" : {
            "type" : "string",
            "example" : "environment"
          },
          "member" : {
            "$ref" : "#/components/schemas/Member"
          },
          "name" : {
            "type" : "string",
            "example" : "Testing"
          },
          "shortDescription" : {
            "type" : "string",
            "example" : "\"\""
          },
          "target" : {
            "type" : "object",
            "properties" : {
              "_links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "name" : {
                "type" : "string",
                "example" : "Testing"
              },
              "resources" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "example" : "proj/alexis:env/test"
                }
              }
            }
          },
          "title" : {
            "type" : "string",
            "example" : "[Reese Applebaum](mailto:refapp@launchdarkly.com) changed the name of [Testing](https://app.launchdarkly.com/settings#/projects)"
          },
          "titleVerb" : {
            "type" : "string",
            "example" : "changed the name of"
          }
        }
      },
      "BigSegmentTargetChanges" : {
        "type" : "object",
        "properties" : {
          "add" : {
            "type" : "array",
            "description" : "Users to add to this list of targets",
            "example" : [ "user@launchdarkly.com" ],
            "items" : {
              "type" : "string"
            }
          },
          "remove" : {
            "type" : "array",
            "description" : "Users to remove from this list of targets",
            "example" : [ ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Clause" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string"
          },
          "attribute" : {
            "type" : "string",
            "example" : "groups"
          },
          "negate" : {
            "type" : "boolean"
          },
          "op" : {
            "type" : "string",
            "example" : "in"
          },
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "example" : "Top Customers"
            }
          }
        }
      },
      "ClientSideAvailability" : {
        "type" : "object",
        "properties" : {
          "usingEnvironmentId" : {
            "type" : "boolean",
            "description" : "When set to true, this flag will be available to SDKs using the client-side id."
          },
          "usingMobileKey" : {
            "type" : "boolean",
            "description" : "When set to true, this flag will be available to SDKS using a mobile key."
          }
        }
      },
      "CopyActions" : {
        "type" : "string",
        "example" : "[]",
        "enum" : [ "updateOn", "updatePrerequisites", "updateTargets", "updateRules", "updateFallthrough", "updateOffVariation" ]
      },
      "CustomProperty" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the property.",
            "example" : "My property"
          },
          "value" : {
            "type" : "array",
            "description" : "Values for this property.",
            "items" : {
              "type" : "string",
              "example" : ""
            }
          }
        },
        "description" : "A name and value describing a custom property."
      },
      "CustomPropertyValues" : {
        "type" : "array",
        "description" : "Values for this property.",
        "example" : [ "Value 1", "Value 2" ],
        "items" : {
          "type" : "string"
        }
      },
      "CustomRole" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "$ref" : "#/components/schemas/Id"
          },
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the custom role.",
            "example" : "Description of revenue team role here"
          },
          "key" : {
            "type" : "string",
            "description" : "The 20-hexdigit id or the key for a custom role.",
            "example" : "revenue-team"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the custom role.",
            "example" : "revenue team"
          },
          "policy" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Policy"
            }
          }
        }
      },
      "CustomRoles" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomRole"
            }
          }
        }
      },
      "Defaults" : {
        "required" : [ "offVariation", "onVariation" ],
        "type" : "object",
        "properties" : {
          "offVariation" : {
            "type" : "integer",
            "description" : "The index of the variation to be served when a flag is off."
          },
          "onVariation" : {
            "type" : "integer",
            "description" : "The index of the variation to be served when a flag's targeting is on (default variation)."
          }
        },
        "description" : "Default values to be used when a new environment is created."
      },
      "DependentFlag" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "type" : "object",
            "properties" : {
              "self" : {
                "$ref" : "#/components/schemas/Link"
              }
            }
          },
          "_site" : {
            "$ref" : "#/components/schemas/Site"
          },
          "key" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "DependentFlagEnvironment" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "type" : "object",
            "properties" : {
              "flagLink" : {
                "$ref" : "#/components/schemas/Link"
              },
              "self" : {
                "$ref" : "#/components/schemas/Link"
              }
            }
          },
          "_site" : {
            "$ref" : "#/components/schemas/Site"
          },
          "key" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "DependentFlagsByEnvironment" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/DependentFlagsLinks"
          },
          "_site" : {
            "$ref" : "#/components/schemas/Site"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DependentFlag"
            }
          }
        }
      },
      "DependentFlagsLinks" : {
        "type" : "object",
        "properties" : {
          "parent" : {
            "$ref" : "#/components/schemas/Link"
          },
          "self" : {
            "$ref" : "#/components/schemas/Link"
          }
        }
      },
      "Destination" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string",
            "description" : "Unique destination ID.",
            "example" : "37ed9aad-de0a-4665-932e-41c35587aeea"
          },
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "config" : {
            "type" : "object",
            "description" : "destination-specific configuration.",
            "example" : {
              "project" : "cool-project",
              "topic" : "test"
            }
          },
          "kind" : {
            "type" : "string",
            "description" : "Destination type (\"google-pubsub\", \"kinesis\", \"mparticle\", or \"segment\")",
            "example" : "google-pubsub",
            "enum" : [ "google-pubsub", "kinesis", "mparticle", "segment" ]
          },
          "name" : {
            "type" : "string",
            "description" : "The destination name",
            "example" : "Example Google Pub/Sub Destination"
          },
          "on" : {
            "type" : "boolean",
            "description" : "Whether the data export destination is on or not.",
            "example" : true
          },
          "version" : {
            "type" : "integer",
            "example" : 2
          }
        }
      },
      "DestinationAmazonKinesis" : {
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "string",
            "example" : "us-east-1"
          },
          "roleArn" : {
            "type" : "string",
            "example" : "arn:aws:iam::123456789012:role/marketingadmin"
          },
          "streamName" : {
            "type" : "string",
            "example" : "cat-stream"
          }
        }
      },
      "DestinationGooglePubSub" : {
        "type" : "object",
        "properties" : {
          "project" : {
            "type" : "string",
            "example" : "cool-project"
          },
          "topic" : {
            "type" : "string",
            "example" : "test"
          }
        }
      },
      "DestinationMParticle" : {
        "type" : "object",
        "properties" : {
          "apiKey" : {
            "type" : "string",
            "example" : "apiKeyfromMParticle"
          },
          "environment" : {
            "type" : "string",
            "example" : "production"
          },
          "secret" : {
            "type" : "string",
            "example" : "mParticleSecret"
          },
          "userIdentity" : {
            "type" : "string",
            "example" : "customer_id"
          }
        }
      },
      "DestinationSegment" : {
        "type" : "object",
        "properties" : {
          "writeKey" : {
            "type" : "string",
            "example" : "segmentWriteKey"
          }
        }
      },
      "Destinations" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Destination"
            }
          }
        }
      },
      "Environment" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "$ref" : "#/components/schemas/Id"
          },
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "apiKey" : {
            "type" : "string",
            "description" : "The SDK key for backend LaunchDarkly SDKs.",
            "example" : "XXX"
          },
          "approvalSettings" : {
            "type" : "object",
            "properties" : {
              "canApplyDeclinedChanges" : {
                "type" : "boolean",
                "description" : "Whether changes can be applied as long as minNumApprovals is met, regardless of if any reviewers have declined a request."
              },
              "canReviewOwnRequest" : {
                "type" : "boolean",
                "description" : "Whether requesters can approve or decline their own request. They may always comment."
              },
              "minNumApprovals" : {
                "type" : "integer",
                "description" : "The number of approvals required before an approval request can be applied.",
                "format" : "int64",
                "example" : 2
              },
              "required" : {
                "type" : "boolean",
                "description" : "Whether any changes to flags in this environment will require approval. You may only set required or requiredApprovalTags, not both."
              },
              "requiredApprovalTags" : {
                "type" : "array",
                "description" : "An array of tags used to specify which flags with those tags require approval. You may only set requiredApprovalTags or required, not both.",
                "items" : {
                  "type" : "string"
                }
              },
              "serviceKind" : {
                "type" : "string",
                "description" : "The approvals system used.",
                "enum" : [ "launchdarkly", "service-now" ]
              }
            },
            "description" : "Approval settings for an environment. Only appears if the approvals feature is enabled."
          },
          "color" : {
            "type" : "string",
            "description" : "The swatch color for the environment.",
            "example" : "417505"
          },
          "confirmChanges" : {
            "type" : "boolean",
            "description" : "Determines if this environment requires confirmation for flag and segment changes.",
            "example" : false
          },
          "defaultTrackEvents" : {
            "type" : "boolean",
            "description" : "Set to true to send detailed event information for new flags.",
            "example" : false
          },
          "defaultTtl" : {
            "type" : "number",
            "description" : "The default TTL.",
            "example" : 0.0
          },
          "key" : {
            "type" : "string",
            "description" : "The key for the environment.",
            "example" : "production"
          },
          "mobileKey" : {
            "type" : "string",
            "description" : "The SDK key for mobile LaunchDarkly SDKs.",
            "example" : "XXX"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the environment.",
            "example" : "Production"
          },
          "requireComments" : {
            "type" : "boolean",
            "description" : "Determines if this environment requires comments for flag and segment changes.",
            "example" : false
          },
          "secureMode" : {
            "type" : "boolean",
            "description" : "Determines if this environment is in safe mode.",
            "example" : false
          },
          "tags" : {
            "type" : "array",
            "description" : "An array of tags for this environment.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "EnvironmentPost" : {
        "required" : [ "color", "key", "name" ],
        "type" : "object",
        "properties" : {
          "color" : {
            "type" : "string",
            "description" : "A color swatch (as an RGB hex value with no leading '#', e.g. C8C8C8).",
            "example" : "417505"
          },
          "confirmChanges" : {
            "type" : "boolean",
            "description" : "Determines if this environment requires confirmation for flag and segment changes.",
            "example" : false
          },
          "defaultTrackEvents" : {
            "type" : "boolean",
            "description" : "Set to true to send detailed event information for newly created flags.",
            "example" : false
          },
          "defaultTtl" : {
            "type" : "number",
            "description" : "The default TTL for the new environment.",
            "example" : 0.0
          },
          "key" : {
            "type" : "string",
            "description" : "A project-unique key for the new environment.",
            "example" : "dev"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the new environment.",
            "example" : "Development"
          },
          "requireComments" : {
            "type" : "boolean",
            "description" : "Determines if this environment requires comments for flag and segment changes.",
            "example" : false
          },
          "secureMode" : {
            "type" : "boolean",
            "description" : "Determines whether the environment is in secure mode.",
            "example" : false
          },
          "tags" : {
            "type" : "array",
            "description" : "An array of tags for this environment.",
            "example" : [ "tag1", "tag2" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "EvaluationUsageError" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "example" : "not_found"
          },
          "message" : {
            "type" : "string",
            "example" : "unknown environment"
          }
        }
      },
      "Events" : {
        "type" : "object",
        "properties" : {
          "links" : {
            "$ref" : "#/components/schemas/UsageLinks"
          }
        }
      },
      "Fallthrough" : {
        "type" : "object",
        "properties" : {
          "rollout" : {
            "$ref" : "#/components/schemas/Rollout"
          },
          "variation" : {
            "type" : "integer"
          }
        }
      },
      "FeatureFlag" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "_maintainer" : {
            "$ref" : "#/components/schemas/Member"
          },
          "_version" : {
            "type" : "integer",
            "example" : 23
          },
          "archived" : {
            "type" : "boolean",
            "description" : "Whether or not this flag is archived.",
            "example" : false
          },
          "archivedDate" : {
            "type" : "integer",
            "description" : "A unix epoch time in milliseconds specifying the archived time of this flag.",
            "format" : "int64",
            "example" : 1443652232590
          },
          "clientSideAvailability" : {
            "$ref" : "#/components/schemas/ClientSideAvailability"
          },
          "creationDate" : {
            "type" : "integer",
            "description" : "A unix epoch time in milliseconds specifying the creation time of this flag.",
            "format" : "int64",
            "example" : 1443652232590
          },
          "customProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomProperty"
            },
            "description" : "A mapping of keys to CustomProperty entries.",
            "example" : {
              "bugs" : {
                "name" : "Issue tracker ids",
                "value" : [ "123", "456" ]
              },
              "deprecated" : {
                "name" : "Deprecated Date",
                "value" : [ ]
              }
            }
          },
          "defaults" : {
            "$ref" : "#/components/schemas/Defaults"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the feature flag.",
            "example" : "This flag controls whether test feature is turned on or not."
          },
          "environments" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/FeatureFlagConfig"
            }
          },
          "goalIds" : {
            "type" : "array",
            "description" : "An array goals from all environments associated with this feature flag",
            "example" : [ "d7239405bd89c930e885aa76", "405bc930e88d7239d895aa76" ],
            "items" : {
              "type" : "string"
            }
          },
          "includeInSnippet" : {
            "type" : "boolean",
            "example" : false
          },
          "key" : {
            "type" : "string",
            "example" : "test-feature"
          },
          "kind" : {
            "type" : "string",
            "description" : "Whether the feature flag is a boolean flag or multivariate.",
            "example" : "boolean"
          },
          "maintainerId" : {
            "type" : "string",
            "description" : "The ID of the member that should maintain this flag.",
            "example" : "561c579cd8fd5c2704000001"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the feature flag.",
            "example" : "Test Feature"
          },
          "tags" : {
            "type" : "array",
            "description" : "An array of tags for this feature flag.",
            "example" : [ ],
            "items" : {
              "type" : "string"
            }
          },
          "temporary" : {
            "type" : "boolean",
            "description" : "Whether or not this flag is temporary.",
            "example" : false
          },
          "variations" : {
            "type" : "array",
            "description" : "The variations for this feature flag.",
            "example" : [ {
              "value" : "a"
            }, {
              "value" : "b"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/Variation"
            }
          }
        }
      },
      "FeatureFlagConfig" : {
        "type" : "object",
        "properties" : {
          "_environmentName" : {
            "type" : "string"
          },
          "_site" : {
            "$ref" : "#/components/schemas/Site"
          },
          "archived" : {
            "type" : "boolean"
          },
          "fallthrough" : {
            "$ref" : "#/components/schemas/Fallthrough"
          },
          "lastModified" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 1469326565348
          },
          "offVariation" : {
            "type" : "integer"
          },
          "on" : {
            "type" : "boolean"
          },
          "prerequisites" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Prerequisite"
            }
          },
          "rules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Rule"
            }
          },
          "salt" : {
            "type" : "string",
            "example" : "YWx0ZXJuYXRlLnBhZ2U="
          },
          "sel" : {
            "type" : "string",
            "example" : "45501b9314dc4641841af774cb038b96"
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Target"
            }
          },
          "trackEvents" : {
            "type" : "boolean",
            "description" : "Set to true to send detailed event information for this flag.",
            "example" : false
          },
          "trackEventsFallthrough" : {
            "type" : "boolean",
            "description" : "Set to true to send detailed event information when targeting is enabled but no individual targeting rule is matched.",
            "example" : true
          },
          "version" : {
            "type" : "integer",
            "example" : 65
          }
        }
      },
      "FeatureFlagCopyObject" : {
        "required" : [ "key" ],
        "type" : "object",
        "properties" : {
          "currentVersion" : {
            "type" : "integer",
            "description" : "If the latest version of the flag matches provided version it will copy, otherwise it will return a conflict.",
            "example" : 65
          },
          "key" : {
            "type" : "string",
            "description" : "The environment key to be used.",
            "example" : "staging"
          }
        }
      },
      "FeatureFlagScheduledChange" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string"
          },
          "_version" : {
            "type" : "integer"
          },
          "executionDate" : {
            "type" : "integer",
            "description" : "A unix epoch time in milliseconds specifying the date the scheduled changes will be applied"
          },
          "instructions" : {
            "$ref" : "#/components/schemas/SemanticPatchInstruction"
          }
        }
      },
      "FeatureFlagScheduledChanges" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FeatureFlagScheduledChange"
            }
          }
        }
      },
      "FeatureFlagScheduledChangesConflicts" : {
        "type" : "object",
        "properties" : {
          "instructions" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "conflicts" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ScheduledChangesFeatureFlagConflict"
                  }
                },
                "kind" : {
                  "type" : "string",
                  "description" : "The name of the modification you would like to perform on a resource.",
                  "example" : "removeUserTargets"
                }
              }
            }
          }
        }
      },
      "FeatureFlagStatus" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/FeatureFlagStatusLinks"
          },
          "default" : {
            "type" : "object"
          },
          "lastRequested" : {
            "type" : "string",
            "example" : "2016-08-16T21:10:11.886Z"
          },
          "name" : {
            "type" : "string",
            "description" : "| Name     | Description |\n| --------:| ----------- |\n| new      | the feature flag was created within the last 7 days, and has not been requested yet |\n| active   | the feature flag was requested by your servers or clients within the last 7 days |\n| inactive | the feature flag was created more than 7 days ago, and hasn't been requested by your servers or clients within the past 7 days |\n| launched | one variation of the feature flag has been rolled out to all your users for at least 7 days |\n",
            "enum" : [ "new", "active", "inactive", "launched" ]
          }
        }
      },
      "FeatureFlagStatusAcrossEnvironments" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/FeatureFlagStatusLinks"
          },
          "environments" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/FeatureFlagStatusForQueriedEnvironment"
            }
          },
          "key" : {
            "type" : "string"
          }
        }
      },
      "FeatureFlagStatusForQueriedEnvironment" : {
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "object"
          },
          "lastRequested" : {
            "type" : "string",
            "example" : "2016-08-16T21:10:11.886Z"
          },
          "name" : {
            "type" : "string",
            "description" : "| Name     | Description |\n| --------:| ----------- |\n| new      | the feature flag was created within the last 7 days, and has not been requested yet |\n| active   | the feature flag was requested by your servers or clients within the last 7 days |\n| inactive | the feature flag was created more than 7 days ago, and hasn't been requested by your servers or clients within the past 7 days |\n| launched | one variation of the feature flag has been rolled out to all your users for at least 7 days |\n",
            "enum" : [ "new", "active", "inactive", "launched" ]
          }
        }
      },
      "FeatureFlagStatusLinks" : {
        "type" : "object",
        "properties" : {
          "parent" : {
            "$ref" : "#/components/schemas/Link"
          },
          "self" : {
            "$ref" : "#/components/schemas/Link"
          }
        }
      },
      "FeatureFlagStatuses" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/FeatureFlagStatusLinks"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FeatureFlagStatus"
            }
          }
        }
      },
      "FeatureFlags" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FeatureFlag"
            }
          },
          "totalCount" : {
            "type" : "number"
          }
        }
      },
      "FlagListItem" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "_site" : {
            "$ref" : "#/components/schemas/Site"
          },
          "key" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "HierarchicalLinks" : {
        "type" : "object",
        "properties" : {
          "parent" : {
            "$ref" : "#/components/schemas/Link"
          },
          "self" : {
            "$ref" : "#/components/schemas/Link"
          }
        }
      },
      "Id" : {
        "type" : "string",
        "description" : "The unique resource id.",
        "example" : "5a580a01b4ff89217bdf9dc1"
      },
      "Integration" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "type" : "object",
            "properties" : {
              "self" : {
                "$ref" : "#/components/schemas/Link"
              }
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IntegrationSubscription"
            }
          }
        }
      },
      "IntegrationSubscription" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "$ref" : "#/components/schemas/Id"
          },
          "_links" : {
            "$ref" : "#/components/schemas/HierarchicalLinks"
          },
          "_status" : {
            "type" : "object",
            "properties" : {
              "errorCount" : {
                "type" : "integer",
                "example" : 2
              },
              "lastSuccess" : {
                "type" : "integer",
                "description" : "A unix epoch time in milliseconds specifying the last time this integration was successfully used.",
                "format" : "int64",
                "example" : 1443652232590
              },
              "successCount" : {
                "type" : "integer",
                "example" : 6
              }
            }
          },
          "config" : {
            "type" : "object",
            "description" : "A key-value mapping of configuration fields.",
            "example" : {
              "apiKey" : "582**************************116",
              "hostURL" : "https://api.datadoghq.com"
            }
          },
          "kind" : {
            "type" : "string",
            "description" : "The type of integration associated with this configuration.",
            "example" : "datadog"
          },
          "name" : {
            "type" : "string",
            "description" : "The user-defined name associated with this configuration.",
            "example" : "V2"
          },
          "on" : {
            "type" : "boolean",
            "description" : "Whether or not the integration is currently active.",
            "example" : true
          },
          "statements" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Statement"
            }
          },
          "tags" : {
            "type" : "array",
            "description" : "An array of tags for this integration configuration.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Integrations" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "type" : "object",
            "description" : "A mapping of integration types to their respective API endpoints.",
            "example" : {
              "appdynamics" : {
                "href" : "/api/v2/integrations/appdynamics",
                "type" : "application/json"
              },
              "splunk" : {
                "href" : "/api/v2/integrations/splunk",
                "type" : "application/json"
              }
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IntegrationSubscription"
            }
          }
        }
      },
      "Link" : {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string",
            "example" : "/api/v2/endpoint"
          },
          "type" : {
            "type" : "string",
            "example" : "application/json"
          }
        }
      },
      "Links" : {
        "type" : "object",
        "properties" : {
          "next" : {
            "$ref" : "#/components/schemas/Link"
          },
          "self" : {
            "$ref" : "#/components/schemas/Link"
          }
        }
      },
      "MAU" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/UsageLinks"
          },
          "metadata" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StreamBySDKLinksMetadata"
            }
          },
          "series" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StreamUsageSeries"
            }
          }
        }
      },
      "MAUMetadata" : {
        "type" : "object"
      },
      "MAUbyCategory" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/StreamBySDKLinks"
          },
          "metadata" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MAUMetadata"
            }
          },
          "series" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StreamUsageSeries"
            }
          }
        }
      },
      "Member" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "$ref" : "#/components/schemas/Id"
          },
          "_lastSeen" : {
            "type" : "integer",
            "description" : "A unix epoch time in milliseconds specifying the last time this member was active in LaunchDarkly.",
            "format" : "int64",
            "example" : 1469326565348
          },
          "_lastSeenMetadata" : {
            "type" : "object",
            "properties" : {
              "tokenId" : {
                "type" : "string",
                "description" : "If the last time this member accessed LaunchDarkly was using the REST API, this value will be set to the ID of the personal access token used.",
                "example" : "5fd2a1ee05600316d5cb3e96"
              }
            }
          },
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "_pendingInvite" : {
            "type" : "boolean"
          },
          "_verified" : {
            "type" : "boolean"
          },
          "customRoles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Id"
            }
          },
          "email" : {
            "type" : "string",
            "example" : "user@launchdarkly.com"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Alan"
          },
          "isBeta" : {
            "type" : "boolean"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Turing"
          },
          "role" : {
            "$ref" : "#/components/schemas/Role"
          }
        }
      },
      "Members" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Member"
            }
          },
          "totalCount" : {
            "type" : "number"
          }
        }
      },
      "MultiEnvironmentDependentFlag" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/DependentFlagsLinks"
          },
          "_site" : {
            "$ref" : "#/components/schemas/Site"
          },
          "environments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DependentFlagEnvironment"
            }
          },
          "key" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "MultiEnvironmentDependentFlags" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/DependentFlagsLinks"
          },
          "_site" : {
            "$ref" : "#/components/schemas/Site"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MultiEnvironmentDependentFlag"
            }
          }
        }
      },
      "PatchOperation" : {
        "required" : [ "op", "path", "value" ],
        "type" : "object",
        "properties" : {
          "op" : {
            "type" : "string",
            "example" : "replace"
          },
          "path" : {
            "type" : "string",
            "example" : "/name"
          },
          "value" : {
            "type" : "object",
            "example" : "My resource name"
          }
        }
      },
      "Policy" : {
        "type" : "object",
        "properties" : {
          "actions" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "An action to perform on a resource.",
              "example" : "updateOn"
            }
          },
          "effect" : {
            "type" : "string",
            "description" : "Effect of the policy - allow or deny.",
            "example" : "deny"
          },
          "notActions" : {
            "type" : "array",
            "description" : "Targeted actions will be those actions NOT in this list. The \"actions\" field must be empty to use this field.",
            "items" : {
              "type" : "string",
              "description" : "An action to perform on a resource.",
              "example" : "updateOn"
            }
          },
          "notResources" : {
            "type" : "array",
            "description" : "Targeted resource will be those resources NOT in this list. The \"resources`\" field must be empty to use this field.",
            "items" : {
              "type" : "string",
              "description" : "A resource specifier string",
              "example" : "proj/*:env/*:flag/my-flag"
            }
          },
          "resources" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "A resource specifier string",
              "example" : "proj/*:env/*:flag/my-flag"
            }
          }
        }
      },
      "Prerequisite" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "variation" : {
            "type" : "integer"
          }
        }
      },
      "Project" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "$ref" : "#/components/schemas/Id"
          },
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "defaultClientSideAvailability" : {
            "$ref" : "#/components/schemas/ClientSideAvailability"
          },
          "environments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Environment"
            }
          },
          "includeInSnippetByDefault" : {
            "type" : "boolean",
            "example" : true
          },
          "key" : {
            "type" : "string",
            "example" : "zentasks"
          },
          "name" : {
            "type" : "string",
            "example" : "Zentasks"
          },
          "tags" : {
            "type" : "array",
            "description" : "An array of tags for this project.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Projects" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Project"
            }
          }
        }
      },
      "RelayProxyConfig" : {
        "required" : [ "_creator", "_id", "creationDate", "displayKey", "lastModified", "name", "policy" ],
        "type" : "object",
        "properties" : {
          "_creator" : {
            "$ref" : "#/components/schemas/Member"
          },
          "_id" : {
            "$ref" : "#/components/schemas/Id"
          },
          "creationDate" : {
            "type" : "integer",
            "description" : "A unix epoch time in milliseconds specifying the creation time of this relay proxy configuration",
            "format" : "int64",
            "example" : 1443652232590
          },
          "displayKey" : {
            "type" : "string",
            "description" : "The last 4 digits of the unique secret key for this relay proxy configuration",
            "example" : "66eo"
          },
          "fullKey" : {
            "type" : "string",
            "description" : "Full secret key. Only included if creating or resetting the relay proxy configuration",
            "example" : "rel-8a3a773d-b75e-48eb-a850-492cda9266eo"
          },
          "lastModified" : {
            "type" : "integer",
            "description" : "A unix epoch time in milliseconds specifying the last time this relay proxy configuration was modified",
            "format" : "int64",
            "example" : 1469326565348
          },
          "name" : {
            "type" : "string",
            "description" : "A human-friendly name for the relay proxy configuration",
            "example" : "My relay proxy config"
          },
          "policy" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Policy"
            }
          }
        }
      },
      "RelayProxyConfigs" : {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RelayProxyConfig"
            }
          }
        }
      },
      "Role" : {
        "type" : "string",
        "enum" : [ "writer", "reader", "admin", "owner" ]
      },
      "Rollout" : {
        "type" : "object",
        "properties" : {
          "bucketBy" : {
            "type" : "string"
          },
          "variations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WeightedVariation"
            }
          }
        }
      },
      "Rule" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string"
          },
          "clauses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Clause"
            }
          },
          "description" : {
            "type" : "string"
          },
          "rollout" : {
            "$ref" : "#/components/schemas/Rollout"
          },
          "trackEvents" : {
            "type" : "boolean"
          },
          "variation" : {
            "type" : "integer"
          }
        }
      },
      "ScheduledChangesFeatureFlagConflict" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string",
            "description" : "Feature flag scheduled change id this change will conflict with"
          },
          "reason" : {
            "type" : "string",
            "description" : "Feature flag scheduled change conflict reason"
          }
        }
      },
      "SemanticPatchInstruction" : {
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "kind" : {
              "type" : "string",
              "description" : "The name of the modification you would like to perform on a resource.",
              "example" : "removeUserTargets"
            }
          }
        }
      },
      "SemanticPatchOperation" : {
        "required" : [ "instructions" ],
        "type" : "object",
        "properties" : {
          "comment" : {
            "type" : "string",
            "example" : "This is a comment string"
          },
          "instructions" : {
            "$ref" : "#/components/schemas/SemanticPatchInstruction"
          }
        }
      },
      "Site" : {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string",
            "example" : "/features/sort.order"
          },
          "type" : {
            "type" : "string",
            "example" : "text/html"
          }
        }
      },
      "Statement" : {
        "type" : "object",
        "properties" : {
          "actions" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "An action to perform on a resource.",
              "example" : "updateOn"
            }
          },
          "effect" : {
            "type" : "string",
            "enum" : [ "allow", "deny" ]
          },
          "notActions" : {
            "type" : "array",
            "description" : "Targeted actions will be those actions NOT in this list. The \"actions\" field must be empty to use this field.",
            "items" : {
              "type" : "string",
              "description" : "An action to perform on a resource.",
              "example" : "updateOn"
            }
          },
          "notResources" : {
            "type" : "array",
            "description" : "Targeted resource will be those resources NOT in this list. The \"resources`\" field must be empty to use this field.",
            "items" : {
              "type" : "string",
              "description" : "A resource specifier string",
              "example" : "proj/*:env/*:flag/my-flag"
            }
          },
          "resources" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "A resource specifier string",
              "example" : "proj/*:env/*:flag/my-flag"
            }
          }
        }
      },
      "Stream" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/StreamUsageLinks"
          },
          "metadata" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StreamUsageMetadata"
            }
          },
          "series" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StreamUsageSeries"
            }
          }
        }
      },
      "StreamBySDK" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/StreamBySDKLinks"
          },
          "metadata" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StreamBySDKLinksMetadata"
            }
          },
          "series" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StreamUsageSeries"
            }
          }
        }
      },
      "StreamBySDKLinks" : {
        "type" : "object",
        "properties" : {
          "parent" : {
            "$ref" : "#/components/schemas/Link"
          },
          "self" : {
            "$ref" : "#/components/schemas/Link"
          }
        }
      },
      "StreamBySDKLinksMetadata" : {
        "type" : "object",
        "properties" : {
          "sdk" : {
            "type" : "string",
            "example" : "ruby"
          },
          "source" : {
            "type" : "string",
            "example" : "server"
          },
          "version" : {
            "type" : "string",
            "example" : "5.4.3"
          }
        }
      },
      "StreamLinks" : {
        "type" : "object",
        "properties" : {
          "parent" : {
            "$ref" : "#/components/schemas/Link"
          },
          "self" : {
            "$ref" : "#/components/schemas/Link"
          },
          "subseries" : {
            "type" : "array",
            "description" : "Links to endpoints that are in the request path.",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "StreamSDKVersion" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/StreamBySDKLinks"
          },
          "sdkVersions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StreamSDKVersionData"
            }
          }
        }
      },
      "StreamSDKVersionData" : {
        "type" : "object",
        "properties" : {
          "sdk" : {
            "type" : "string",
            "description" : "The language of the sdk",
            "example" : "ruby"
          },
          "version" : {
            "type" : "string",
            "description" : "The version of the sdk",
            "example" : "5.4.3"
          }
        }
      },
      "StreamUsageError" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "example" : "not_found"
          },
          "message" : {
            "type" : "string",
            "example" : "Stream source not found"
          }
        }
      },
      "StreamUsageLinks" : {
        "type" : "object",
        "properties" : {
          "parent" : {
            "$ref" : "#/components/schemas/Link"
          },
          "self" : {
            "$ref" : "#/components/schemas/Link"
          },
          "subseries" : {
            "type" : "array",
            "description" : "The following links that are in the response.",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "StreamUsageMetadata" : {
        "type" : "object",
        "properties" : {
          "sdk" : {
            "type" : "string",
            "description" : "The language of the sdk",
            "example" : "ruby"
          },
          "source" : {
            "type" : "string",
            "example" : "server"
          },
          "version" : {
            "type" : "string",
            "description" : "The version of the SDK",
            "example" : "5.4.3"
          }
        }
      },
      "StreamUsageSeries" : {
        "type" : "object",
        "properties" : {
          "0" : {
            "type" : "integer",
            "description" : "A key corresponding to a time series data point.",
            "format" : "int64",
            "example" : 0
          },
          "time" : {
            "type" : "integer",
            "description" : "A unix epoch time in milliseconds specifying the creation time of this flag.",
            "format" : "int64",
            "example" : 1551740400000
          }
        }
      },
      "Streams" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/StreamUsageLinks"
          }
        }
      },
      "Target" : {
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "example" : "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
            }
          },
          "variation" : {
            "type" : "integer"
          }
        }
      },
      "Token" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "$ref" : "#/components/schemas/Id"
          },
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "_member" : {
            "$ref" : "#/components/schemas/Member"
          },
          "creationDate" : {
            "type" : "integer",
            "description" : "A unix epoch time in milliseconds specifying the creation time of this access token.",
            "format" : "int64",
            "example" : 1443652232590
          },
          "customRoleIds" : {
            "type" : "array",
            "description" : "A list of custom role IDs to use as access limits for the access token",
            "items" : {
              "type" : "string"
            }
          },
          "defaultApiVersion" : {
            "type" : "integer",
            "description" : "The default API version for this token"
          },
          "inlineRole" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Statement"
            }
          },
          "lastModified" : {
            "type" : "integer",
            "description" : "A unix epoch time in milliseconds specifying the last time this access token was modified.",
            "format" : "int64",
            "example" : 1469326565348
          },
          "lastUsed" : {
            "type" : "integer",
            "description" : "A unix epoch time in milliseconds specifying the last time this access token was used to authorize access to the LaunchDarkly REST API.",
            "format" : "int64",
            "example" : 1469326565348
          },
          "memberId" : {
            "$ref" : "#/components/schemas/Id"
          },
          "name" : {
            "type" : "string",
            "description" : "A human-friendly name for the access token",
            "example" : "My access token"
          },
          "ownerId" : {
            "$ref" : "#/components/schemas/Id"
          },
          "role" : {
            "type" : "string",
            "description" : "The name of a built-in role for the token",
            "example" : "writer"
          },
          "serviceToken" : {
            "type" : "boolean",
            "description" : "Whether the token will be a service token https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens"
          },
          "token" : {
            "type" : "string",
            "description" : "The last 4 digits of the unique secret key for this access token. If creating or resetting the token, this will be the full token secret.",
            "example" : "3243"
          }
        }
      },
      "Tokens" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Token"
            }
          }
        }
      },
      "Usage" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/UsageLinks"
          },
          "series" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StreamUsageSeries"
            }
          }
        }
      },
      "UsageError" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "example" : "This is a beta API, you must pass beta in the LD-API-Version header to use it."
          }
        }
      },
      "UsageLinks" : {
        "type" : "object",
        "properties" : {
          "parent" : {
            "$ref" : "#/components/schemas/Link"
          },
          "self" : {
            "$ref" : "#/components/schemas/Link"
          },
          "subseries" : {
            "type" : "array",
            "description" : "The following links that are in the response.",
            "items" : {
              "$ref" : "#/components/schemas/Link"
            }
          }
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "anonymous" : {
            "type" : "boolean"
          },
          "avatar" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "custom" : {
            "type" : "object",
            "example" : {
              "company" : "example.com"
            }
          },
          "email" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "ip" : {
            "type" : "string"
          },
          "key" : {
            "type" : "string",
            "example" : "a00bea"
          },
          "lastName" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string",
            "example" : "Bob Loblaw"
          },
          "secondary" : {
            "type" : "string"
          }
        }
      },
      "UserFlagSetting" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "_value" : {
            "type" : "boolean",
            "description" : "The most important attribute in the response. The _value is the current setting for the user. For a boolean feature toggle, this will be true, false, or null if there is no defined fallthrough value.",
            "example" : true
          },
          "setting" : {
            "type" : "boolean",
            "description" : "The setting attribute indicates whether you've explicitly targeted this user to receive a particular variation. For example, if you have explicitly turned off a feature toggle for a user, setting will be false. A setting of null means that you haven't assigned that user to a specific variation.",
            "example" : false
          }
        }
      },
      "UserFlagSettings" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "items" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/UserFlagSetting"
            },
            "example" : {
              "alternate.page" : {
                "_links" : {
                  "self" : {
                    "href" : "/api/v2/users/lacuna/production/Abbie_Braun/flags/alternate.page",
                    "type" : "application/json"
                  }
                },
                "_value" : "false,",
                "setting" : null
              },
              "sort.order" : {
                "_links" : {
                  "_value" : true,
                  "self" : {
                    "href" : "/api/v2/users/lacuna/production/Abbie_Braun/flags/sort.order",
                    "type" : "application/json"
                  },
                  "setting" : null
                }
              }
            }
          }
        }
      },
      "UserRecord" : {
        "type" : "object",
        "properties" : {
          "avatar" : {
            "type" : "string",
            "example" : "https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg"
          },
          "environmentId" : {
            "type" : "string",
            "example" : "54ac2d97de674204ddd61096"
          },
          "lastPing" : {
            "type" : "string",
            "example" : "2015-03-03T02:37:22.492Z"
          },
          "ownerId" : {
            "$ref" : "#/components/schemas/Id"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          }
        }
      },
      "UserSegment" : {
        "required" : [ "creationDate", "key", "name" ],
        "type" : "object",
        "properties" : {
          "_flags" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/FlagListItem"
            }
          },
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "creationDate" : {
            "type" : "integer",
            "description" : "A unix epoch time in milliseconds specifying the creation time of this flag.",
            "format" : "int64",
            "example" : 1443652232590
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the user segment.",
            "example" : "Users in this segment can access beta features."
          },
          "excluded" : {
            "type" : "array",
            "description" : "An array of user keys that should not be included in this segment, unless they are also listed in \"included\".",
            "items" : {
              "type" : "string"
            }
          },
          "included" : {
            "type" : "array",
            "description" : "An array of user keys that are included in this segment.",
            "items" : {
              "type" : "string"
            }
          },
          "key" : {
            "type" : "string",
            "description" : "Unique identifier for the user segment.",
            "example" : "beta-testers"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the user segment.",
            "example" : "Beta Testers"
          },
          "rules" : {
            "type" : "array",
            "description" : "An array of rules that can cause a user to be included in this segment.",
            "items" : {
              "$ref" : "#/components/schemas/UserSegmentRule"
            }
          },
          "tags" : {
            "type" : "array",
            "description" : "An array of tags for this user segment.",
            "example" : [ "dev", "ops" ],
            "items" : {
              "type" : "string"
            }
          },
          "unbounded" : {
            "type" : "boolean",
            "description" : "Controls whether this is considered a \"big segment\" which can support an unlimited numbers of users. Include/exclude lists sent with this payload are not used in big segments. Contact your account manager for early access to this feature.",
            "example" : false
          },
          "version" : {
            "type" : "integer"
          }
        }
      },
      "UserSegmentRule" : {
        "type" : "object",
        "properties" : {
          "bucketBy" : {
            "type" : "string"
          },
          "clauses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Clause"
            }
          },
          "weight" : {
            "type" : "integer"
          }
        }
      },
      "UserSegments" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserSegment"
            }
          }
        }
      },
      "UserTargetingExpirationForFlag" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string"
          },
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "_resourceId" : {
            "$ref" : "#/components/schemas/UserTargetingExpirationResourceIdForFlag"
          },
          "_version" : {
            "type" : "integer"
          },
          "expirationDate" : {
            "type" : "integer",
            "description" : "Unix epoch time in milliseconds specifying the expiration date",
            "format" : "int64",
            "example" : 1735689600000
          },
          "userKey" : {
            "type" : "string",
            "description" : "Unique identifier for the user"
          },
          "variationId" : {
            "type" : "string",
            "description" : "the ID of the variation that the user is targeted on a flag"
          }
        }
      },
      "UserTargetingExpirationForFlags" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserTargetingExpirationForFlag"
            }
          }
        }
      },
      "UserTargetingExpirationForSegment" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string"
          },
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "_resourceId" : {
            "$ref" : "#/components/schemas/UserTargetingExpirationResourceIdForFlag"
          },
          "_version" : {
            "type" : "integer"
          },
          "expirationDate" : {
            "type" : "integer",
            "description" : "Unix epoch time in milliseconds specifying the expiration date",
            "format" : "int64",
            "example" : 1735689600000
          },
          "targetType" : {
            "type" : "string",
            "description" : "either the included or excluded variation that the user is targeted on a segment"
          },
          "userKey" : {
            "type" : "string",
            "description" : "Unique identifier for the user"
          }
        }
      },
      "UserTargetingExpirationOnFlagsForUser" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserTargetingExpirationForFlag"
            }
          }
        }
      },
      "UserTargetingExpirationResourceIdForFlag" : {
        "type" : "object",
        "properties" : {
          "environmentKey" : {
            "type" : "string"
          },
          "flagKey" : {
            "type" : "string"
          },
          "key" : {
            "type" : "string"
          },
          "kind" : {
            "type" : "string"
          },
          "projectKey" : {
            "type" : "string"
          }
        }
      },
      "Users" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserRecord"
            }
          },
          "totalCount" : {
            "type" : "number",
            "example" : 3.0
          }
        }
      },
      "Variation" : {
        "required" : [ "value" ],
        "type" : "object",
        "properties" : {
          "_id" : {
            "type" : "string",
            "example" : "24b32dd3-0ba6-46ee-86af-230eebf3c7cb"
          },
          "description" : {
            "type" : "string",
            "example" : "The true variation"
          },
          "name" : {
            "type" : "string",
            "example" : "True"
          },
          "value" : {
            "type" : "object"
          }
        }
      },
      "Webhook" : {
        "type" : "object",
        "properties" : {
          "_id" : {
            "$ref" : "#/components/schemas/Id"
          },
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the webhook.",
            "example" : "Example hook"
          },
          "on" : {
            "type" : "boolean",
            "description" : "Whether this webhook is enabled or not.",
            "example" : true
          },
          "secret" : {
            "type" : "string",
            "description" : "If defined, the webhooks post request will include a X-LD-Signature header whose value will contain an HMAC SHA256 hex digest of the webhook payload, using the secret as the key.",
            "example" : "frobozz"
          },
          "statements" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Statement"
            }
          },
          "tags" : {
            "type" : "array",
            "description" : "Tags assigned to this webhook.",
            "items" : {
              "type" : "string",
              "example" : ""
            }
          },
          "url" : {
            "type" : "string",
            "description" : "The URL of the remote webhook.",
            "example" : "https://example.com/example"
          }
        }
      },
      "Webhooks" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Webhook"
            }
          }
        }
      },
      "WeightedVariation" : {
        "type" : "object",
        "properties" : {
          "variation" : {
            "type" : "integer"
          },
          "weight" : {
            "type" : "integer"
          }
        }
      }
    },
    "responses" : {
      "BetaApi403" : {
        "description" : "This is a beta API, you must pass beta in the LD-API-Version header to use it.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/UsageError"
            }
          }
        }
      },
      "CustomRole2xx" : {
        "description" : "Custom role response.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/CustomRole"
            }
          }
        }
      },
      "Destination2xx" : {
        "description" : "Destination response.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Destination"
            }
          }
        }
      },
      "Environment2xx" : {
        "description" : "Environment response.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Environment"
            }
          }
        }
      },
      "EvaluationUsage404" : {
        "description" : "The environment or flag you requested could not be found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/EvaluationUsageError"
            }
          }
        }
      },
      "Member2xx" : {
        "description" : "Member response.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Member"
            }
          }
        }
      },
      "Project2xx" : {
        "description" : "Successful Project response.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Project"
            }
          }
        }
      },
      "RelayProxyConfig2xx" : {
        "description" : "Relay proxy config response.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/RelayProxyConfig"
            }
          }
        }
      },
      "Root200" : {
        "description" : "A list of links to available resources in the API.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Links"
            }
          }
        }
      },
      "Standard201" : {
        "description" : "Resource created."
      },
      "Standard204" : {
        "description" : "Action completed successfully."
      },
      "Standard400" : {
        "description" : "Invalid request body."
      },
      "Standard401" : {
        "description" : "Invalid access token."
      },
      "Standard403" : {
        "description" : "Access to the requested resource was denied."
      },
      "Standard404" : {
        "description" : "Invalid resource specifier."
      },
      "Standard409" : {
        "description" : "Status conflict."
      },
      "StreamUsage404" : {
        "description" : "The stream source you requested could not be found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/StreamUsageError"
            }
          }
        }
      },
      "Token2xx" : {
        "description" : "Token response.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Token"
            }
          }
        }
      },
      "UserSegment2xx" : {
        "description" : "User segment response.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/UserSegment"
            }
          }
        }
      },
      "Webhook2xx" : {
        "description" : "Webhook response.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Webhook"
            }
          }
        }
      }
    },
    "parameters" : {
      "After" : {
        "name" : "after",
        "in" : "query",
        "description" : "A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occurred after this timestamp.",
        "schema" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "ApprovalRequestId" : {
        "name" : "approvalRequestId",
        "in" : "path",
        "description" : "The approval request ID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "ArchivedQuery" : {
        "name" : "archived",
        "in" : "query",
        "description" : "When set to 1, only archived flags will be included in the list of flags returned.  By default, archived flags are not included in the list of flags.",
        "schema" : {
          "type" : "boolean"
        }
      },
      "AuditLimit" : {
        "name" : "limit",
        "in" : "query",
        "description" : "A limit on the number of audit log entries to be returned, between 1 and 20.",
        "schema" : {
          "type" : "number"
        }
      },
      "Before" : {
        "name" : "before",
        "in" : "query",
        "description" : "A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp.",
        "schema" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "CloneFlagKeyQuery" : {
        "name" : "clone",
        "in" : "query",
        "description" : "The key of the feature flag to be cloned. The key identifies the flag in your code.  For example, setting clone=flagKey will copy the full targeting configuration for all environments (including on/off state) from the original flag to the new flag.",
        "schema" : {
          "type" : "string"
        }
      },
      "CustomRoleKey" : {
        "name" : "customRoleKey",
        "in" : "path",
        "description" : "The custom role key.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "DestinationId" : {
        "name" : "destinationId",
        "in" : "path",
        "description" : "The data export destination ID.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "EnvironmentKey" : {
        "name" : "environmentKey",
        "in" : "path",
        "description" : "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "EnvironmentKeyQuery" : {
        "name" : "env",
        "in" : "query",
        "description" : "By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env=[\"production\"] will restrict the returned configurations to just your production environment.",
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "EnvironmentMobileKeyExpiry" : {
        "name" : "expiry",
        "in" : "query",
        "description" : "The expiry parameter is deprecated for this endpoint, so the old mobile key will always expire immediately. This parameter will be removed in an upcoming major API client version.",
        "schema" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "EnvironmentSDKKeyExpiry" : {
        "name" : "expiry",
        "in" : "query",
        "description" : "An expiration time for the old environment SDK key, expressed as a Unix epoch time in milliseconds. By default, the key will expire immediately.",
        "schema" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "EvaluationEnvId" : {
        "name" : "envId",
        "in" : "path",
        "description" : "The environment id for the flag evaluations in question.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "EvaluationFlagKey" : {
        "name" : "flagKey",
        "in" : "path",
        "description" : "The key of the flag we want metrics for.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "EventType" : {
        "name" : "type",
        "in" : "path",
        "description" : "The type of event we would like to track.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "FeatureFlagKey" : {
        "name" : "featureFlagKey",
        "in" : "path",
        "description" : "The feature flag's key. The key identifies the flag in your code.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "FilterQuery" : {
        "name" : "filter",
        "in" : "query",
        "description" : "A comma-separated list of filters. Each filter is of the form field:value.",
        "schema" : {
          "type" : "string"
        }
      },
      "HMAC" : {
        "name" : "h",
        "in" : "query",
        "description" : "This parameter is required when following \"next\" links.",
        "schema" : {
          "type" : "string"
        }
      },
      "IntegrationId" : {
        "name" : "integrationId",
        "in" : "path",
        "description" : "The integration ID.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "IntegrationKey" : {
        "name" : "integrationKey",
        "in" : "path",
        "description" : "The key used to specify the integration kind.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "Limit" : {
        "name" : "limit",
        "in" : "query",
        "description" : "Pagination limit.",
        "schema" : {
          "type" : "integer"
        }
      },
      "LimitQuery" : {
        "name" : "limit",
        "in" : "query",
        "description" : "The number of objects to return. Defaults to -1, which returns everything.",
        "schema" : {
          "type" : "number"
        }
      },
      "MemberId" : {
        "name" : "memberId",
        "in" : "path",
        "description" : "The member ID.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "Offset" : {
        "name" : "offset",
        "in" : "query",
        "description" : "Specifies the first item to return in the collection.",
        "schema" : {
          "type" : "integer"
        }
      },
      "OffsetQuery" : {
        "name" : "offset",
        "in" : "query",
        "description" : "Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.",
        "schema" : {
          "type" : "number"
        }
      },
      "ProjectKey" : {
        "name" : "projectKey",
        "in" : "path",
        "description" : "The project key, used to tie the flags together under one project so they can be managed together.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "Q" : {
        "name" : "q",
        "in" : "query",
        "description" : "Text to search for. You can search for the full or partial name of the resource involved or full or partial email address of the member who made the change.",
        "schema" : {
          "type" : "string"
        }
      },
      "Query" : {
        "name" : "q",
        "in" : "query",
        "description" : "Search query.",
        "schema" : {
          "type" : "string"
        }
      },
      "RelayProxyConfigId" : {
        "name" : "id",
        "in" : "path",
        "description" : "The relay proxy configuration ID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "RelayProxyConfigsExpiry" : {
        "name" : "expiry",
        "in" : "query",
        "description" : "An expiration time for the old relay proxy configuration key, expressed as a Unix epoch time in milliseconds. By default, the relay proxy configuration will expire immediately",
        "schema" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "ResourceId" : {
        "name" : "resourceId",
        "in" : "path",
        "description" : "The resource ID.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "ScheduledChangeId" : {
        "name" : "scheduledChangeId",
        "in" : "path",
        "description" : "The id of the scheduled change",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "ScrollId" : {
        "name" : "scrollId",
        "in" : "query",
        "description" : "This parameter is required when following \"next\" links.",
        "schema" : {
          "type" : "string"
        }
      },
      "SortQuery" : {
        "name" : "sort",
        "in" : "query",
        "description" : "A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.",
        "schema" : {
          "type" : "string"
        }
      },
      "Spec" : {
        "name" : "spec",
        "in" : "query",
        "description" : "A resource specifier, allowing you to filter audit log listings by resource.",
        "schema" : {
          "type" : "string"
        }
      },
      "StreamSource" : {
        "name" : "source",
        "in" : "path",
        "description" : "The source of where the stream comes from.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "SummaryQuery" : {
        "name" : "summary",
        "in" : "query",
        "description" : "By default in api version >= 1, flags will _not_ include their list of prerequisites, targets or rules.  Set summary=0 to include these fields for each flag returned.",
        "schema" : {
          "type" : "boolean"
        }
      },
      "Tag" : {
        "name" : "tag",
        "in" : "query",
        "description" : "Filter by tag. A tag can be used to group flags across projects.",
        "schema" : {
          "type" : "string"
        }
      },
      "TokenExpiry" : {
        "name" : "expiry",
        "in" : "query",
        "description" : "An expiration time for the old token key, expressed as a Unix epoch time in milliseconds. By default, the token will expire immediately.",
        "schema" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "TokenId" : {
        "name" : "tokenId",
        "in" : "path",
        "description" : "The access token ID.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "TokenShowAllQuery" : {
        "name" : "showAll",
        "in" : "query",
        "description" : "If set to true, and the authentication access token has the \"Admin\" role, personal access tokens for all members will be retrieved.",
        "schema" : {
          "type" : "boolean"
        }
      },
      "UserKey" : {
        "name" : "userKey",
        "in" : "path",
        "description" : "The user's key.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "UserSegmentKey" : {
        "name" : "userSegmentKey",
        "in" : "path",
        "description" : "The user segment's key. The key identifies the user segment in your code.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      }
    },
    "requestBodies" : {
      "ApprovalRequestApplyPostRequest" : {
        "description" : "Apply an approval request",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "comment" : {
                  "type" : "string",
                  "description" : "comment will be included in audit log item for change.",
                  "example" : "Applying approved changes"
                }
              }
            }
          }
        },
        "required" : true
      },
      "ApprovalRequestPostRequest" : {
        "description" : "Create a new approval request",
        "content" : {
          "application/json" : {
            "schema" : {
              "required" : [ "description", "instructions", "notifyMemberIds" ],
              "type" : "object",
              "properties" : {
                "comment" : {
                  "type" : "string",
                  "description" : "comment will be included in audit log item for change."
                },
                "description" : {
                  "type" : "string",
                  "description" : "A name that describes the changes you would like to apply to a feature flag configuration"
                },
                "executionDate" : {
                  "type" : "integer",
                  "description" : "Timestamp for when instructions will be executed",
                  "format" : "int64"
                },
                "instructions" : {
                  "$ref" : "#/components/schemas/SemanticPatchInstruction"
                },
                "notifyMemberIds" : {
                  "type" : "array",
                  "example" : [ "memberId", "memberId2" ],
                  "items" : {
                    "type" : "string"
                  }
                },
                "operatingOnId" : {
                  "type" : "string",
                  "description" : "ID of scheduled change to edit or delete"
                }
              }
            }
          }
        },
        "required" : false
      },
      "ApprovalRequestReviewPostRequest" : {
        "description" : "Review an approval request",
        "content" : {
          "application/json" : {
            "schema" : {
              "required" : [ "kind" ],
              "type" : "object",
              "properties" : {
                "comment" : {
                  "type" : "string",
                  "description" : "comment will be included in audit log item for change.",
                  "example" : "This is a comment string"
                },
                "kind" : {
                  "type" : "string",
                  "description" : "One of approve, decline, or comment.",
                  "example" : "approve",
                  "enum" : [ "approve", "decline", "comment" ]
                }
              }
            }
          }
        },
        "required" : true
      },
      "BigSegmentTargetsPostRequest" : {
        "description" : "Add or remove user targets to the included or excluded lists on a big segment. Contact your account manager for early access to this feature.",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "excluded" : {
                  "$ref" : "#/components/schemas/BigSegmentTargetChanges"
                },
                "included" : {
                  "$ref" : "#/components/schemas/BigSegmentTargetChanges"
                }
              }
            }
          }
        },
        "required" : true
      },
      "CustomRolePostRequest" : {
        "description" : "New role or roles to create.",
        "content" : {
          "application/json" : {
            "schema" : {
              "required" : [ "key", "name", "policy" ],
              "type" : "object",
              "properties" : {
                "description" : {
                  "type" : "string",
                  "description" : "Description of the custom role.",
                  "example" : "Description of revenue team role here"
                },
                "key" : {
                  "type" : "string",
                  "description" : "The 20-hexdigit id or the key for a custom role.",
                  "example" : "revenue-team"
                },
                "name" : {
                  "type" : "string",
                  "description" : "Name of the custom role.",
                  "example" : "revenue team"
                },
                "policy" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Policy"
                  }
                }
              }
            }
          }
        },
        "required" : true
      },
      "DestinationPostRequest" : {
        "description" : "Create a new data export destination.",
        "content" : {
          "application/json" : {
            "schema" : {
              "required" : [ "config", "kind", "name" ],
              "type" : "object",
              "properties" : {
                "config" : {
                  "type" : "object",
                  "description" : "destination-specific configuration.",
                  "example" : {
                    "project" : "cool-project",
                    "topic" : "test"
                  }
                },
                "kind" : {
                  "type" : "string",
                  "description" : "The data export destination type. Available choices are kinesis, google-pubsub, mparticle, or segment.",
                  "example" : "google-pubsub",
                  "enum" : [ "google-pubsub", "kinesis", "mparticle", "segment" ]
                },
                "name" : {
                  "type" : "string",
                  "description" : "A human-readable name for your data export destination.",
                  "example" : "Example Google Pub/Sub Destination"
                },
                "on" : {
                  "type" : "boolean",
                  "description" : "Whether the data export destination is on or not.",
                  "example" : true
                }
              }
            }
          }
        },
        "required" : true
      },
      "EnvironmentPostRequest" : {
        "description" : "New environment.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/EnvironmentPost"
            }
          }
        },
        "required" : true
      },
      "FeatureFlagCopyBody" : {
        "description" : "Copy feature flag configurations between environments.",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "comment" : {
                  "type" : "string",
                  "description" : "comment will be included in audit log item for change.",
                  "example" : "This is a comment string"
                },
                "excludedActions" : {
                  "type" : "array",
                  "description" : "Define the parts of the flag configuration that will not be copied.",
                  "items" : {
                    "$ref" : "#/components/schemas/CopyActions"
                  }
                },
                "includedActions" : {
                  "type" : "array",
                  "description" : "Define the parts of the flag configuration that will be copied.",
                  "items" : {
                    "$ref" : "#/components/schemas/CopyActions"
                  }
                },
                "source" : {
                  "$ref" : "#/components/schemas/FeatureFlagCopyObject"
                },
                "target" : {
                  "$ref" : "#/components/schemas/FeatureFlagCopyObject"
                }
              }
            }
          }
        },
        "required" : true
      },
      "FeatureFlagPostRequest" : {
        "description" : "Create a new feature flag.",
        "content" : {
          "application/json" : {
            "schema" : {
              "required" : [ "key", "name", "variations" ],
              "type" : "object",
              "properties" : {
                "clientSideAvailability" : {
                  "$ref" : "#/components/schemas/ClientSideAvailability"
                },
                "defaults" : {
                  "$ref" : "#/components/schemas/Defaults"
                },
                "description" : {
                  "type" : "string",
                  "description" : "A description of the feature flag.",
                  "example" : "This flag controls whether test feature is turned on or not."
                },
                "includeInSnippet" : {
                  "type" : "boolean",
                  "description" : "Whether or not this flag should be made available to the client-side JavaScript SDK."
                },
                "key" : {
                  "type" : "string",
                  "description" : "A unique key that will be used to reference the flag in your code.",
                  "example" : "new-test-flag"
                },
                "name" : {
                  "type" : "string",
                  "description" : "A human-friendly name for the feature flag. Remember to note if this flag is intended to be temporary or permanent.",
                  "example" : "new test flag"
                },
                "tags" : {
                  "type" : "array",
                  "description" : "Tags for the feature flag.",
                  "items" : {
                    "type" : "string",
                    "example" : ""
                  }
                },
                "temporary" : {
                  "type" : "boolean",
                  "description" : "Whether or not the flag is a temporary flag."
                },
                "variations" : {
                  "type" : "array",
                  "description" : "An array of possible variations for the flag.",
                  "items" : {
                    "$ref" : "#/components/schemas/Variation"
                  }
                }
              }
            }
          }
        },
        "required" : true
      },
      "FlagConfigScheduledChangesConflictsBody" : {
        "description" : "Used to determine if a semantic patch will result in conflicts with scheduled changes on a feature flag.",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "executionDate" : {
                  "type" : "integer",
                  "description" : "A unix epoch time in milliseconds specifying the date the scheduled changes will be applied"
                },
                "instructions" : {
                  "$ref" : "#/components/schemas/SemanticPatchInstruction"
                }
              }
            }
          }
        },
        "required" : true
      },
      "FlagConfigScheduledChangesPatchBody" : {
        "description" : "Update scheduled changes on a feature flag.",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "comment" : {
                  "type" : "string",
                  "description" : "Used to describe the scheduled changes."
                },
                "instructions" : {
                  "$ref" : "#/components/schemas/SemanticPatchInstruction"
                }
              }
            }
          }
        },
        "required" : true
      },
      "FlagConfigScheduledChangesPostBody" : {
        "description" : "Create scheduled changes on a feature flag.",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "comment" : {
                  "type" : "string",
                  "description" : "Used to describe the scheduled changes."
                },
                "executionDate" : {
                  "type" : "integer",
                  "description" : "A unix epoch time in milliseconds specifying the date the scheduled changes will be applied"
                },
                "instructions" : {
                  "$ref" : "#/components/schemas/SemanticPatchInstruction"
                }
              }
            }
          }
        },
        "required" : true
      },
      "IntegrationPostRequest" : {
        "description" : "Create a new integration subscription.",
        "content" : {
          "application/json" : {
            "schema" : {
              "required" : [ "config", "name" ],
              "type" : "object",
              "properties" : {
                "config" : {
                  "type" : "object",
                  "description" : "Integration-specific configuration fields.",
                  "example" : {
                    "apiKey" : "582**************************116",
                    "hostURL" : "https://api.datadoghq.com"
                  }
                },
                "name" : {
                  "type" : "string",
                  "description" : "A human-readable name for your subscription configuration.",
                  "example" : "Example Datadog Integration"
                },
                "on" : {
                  "type" : "boolean",
                  "description" : "Whether the integration subscription is active or not.",
                  "example" : true
                },
                "statements" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Statement"
                  }
                },
                "tags" : {
                  "type" : "array",
                  "description" : "Tags for the integration subscription.",
                  "example" : [ ],
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "required" : true
      },
      "MembersPostRequest" : {
        "description" : "New members to invite.",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "array",
              "items" : {
                "required" : [ "email" ],
                "type" : "object",
                "properties" : {
                  "customRoles" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string",
                      "description" : "The 20-hexdigit id or the key for a custom role.",
                      "example" : "revenue-team"
                    }
                  },
                  "email" : {
                    "type" : "string",
                    "example" : "exampleuser@email.com"
                  },
                  "firstName" : {
                    "type" : "string",
                    "example" : "Bob"
                  },
                  "inlineRole" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Statement"
                    }
                  },
                  "lastName" : {
                    "type" : "string",
                    "example" : "Loblaw"
                  },
                  "role" : {
                    "$ref" : "#/components/schemas/Role"
                  }
                }
              }
            }
          }
        },
        "required" : true
      },
      "PatchOnly" : {
        "description" : "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments is also supported.",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/PatchOperation"
              }
            }
          }
        },
        "required" : true
      },
      "PatchRequest" : {
        "description" : "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/'",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/PatchOperation"
              }
            }
          }
        },
        "required" : true
      },
      "PatchWithComment" : {
        "description" : "Requires a JSON Patch representation of the desired changes to the project, and an optional comment. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments is also supported.",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "comment" : {
                  "type" : "string",
                  "example" : "This is a comment string"
                },
                "patch" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PatchOperation"
                  }
                }
              }
            }
          }
        },
        "required" : true
      },
      "ProjectPostRequest" : {
        "description" : "Project keys must be unique within an account.",
        "content" : {
          "application/json" : {
            "schema" : {
              "required" : [ "key", "name" ],
              "type" : "object",
              "properties" : {
                "defaultClientSideAvailability" : {
                  "$ref" : "#/components/schemas/ClientSideAvailability"
                },
                "environments" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EnvironmentPost"
                  }
                },
                "includeInSnippetByDefault" : {
                  "type" : "boolean",
                  "example" : false
                },
                "key" : {
                  "type" : "string",
                  "example" : "new-project"
                },
                "name" : {
                  "type" : "string",
                  "example" : "New Project"
                },
                "tags" : {
                  "type" : "array",
                  "example" : [ "ops", "dev" ],
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "required" : true
      },
      "RelayProxyConfigPostRequest" : {
        "description" : "Create a new relay proxy configuration",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "A human-friendly name for the relay proxy configuration",
                  "example" : "My relay proxy config"
                },
                "policy" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Policy"
                  }
                }
              }
            }
          }
        },
        "required" : true
      },
      "SemanticPatchWithComment" : {
        "description" : "Requires a Semantic Patch representation of the desired changes to the resource. 'https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches'. The addition of comments is also supported.",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SemanticPatchOperation"
              }
            }
          }
        },
        "required" : true
      },
      "TokensPostRequest" : {
        "description" : "Create a new access token.",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "customRoleIds" : {
                  "type" : "array",
                  "description" : "A list of custom role IDs to use as access limits for the access token",
                  "items" : {
                    "type" : "string",
                    "example" : ""
                  }
                },
                "defaultApiVersion" : {
                  "type" : "integer",
                  "description" : "The default API version for this token"
                },
                "inlineRole" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Statement"
                  }
                },
                "name" : {
                  "type" : "string",
                  "description" : "A human-friendly name for the access token",
                  "example" : "My access token"
                },
                "role" : {
                  "type" : "string",
                  "description" : "The name of a built-in role for the token",
                  "example" : "writer"
                },
                "serviceToken" : {
                  "type" : "boolean",
                  "description" : "Whether the token will be a service token https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens"
                }
              }
            }
          }
        },
        "required" : true
      },
      "UserSegmentPostRequest" : {
        "description" : "Create a new user segment.",
        "content" : {
          "application/json" : {
            "schema" : {
              "required" : [ "key", "name" ],
              "type" : "object",
              "properties" : {
                "description" : {
                  "type" : "string",
                  "description" : "A description for the user segment.",
                  "example" : "Users in this segment will have access to beta features."
                },
                "key" : {
                  "type" : "string",
                  "description" : "A unique key that will be used to reference the user segment in feature flags.",
                  "example" : "new-segment"
                },
                "name" : {
                  "type" : "string",
                  "description" : "A human-friendly name for the user segment.",
                  "example" : "new segment"
                },
                "tags" : {
                  "type" : "array",
                  "description" : "Tags for the user segment.",
                  "items" : {
                    "type" : "string",
                    "example" : ""
                  }
                },
                "unbounded" : {
                  "type" : "boolean",
                  "description" : "Controls whether this is considered a \"big segment\" which can support an unlimited numbers of users. Include/exclude lists sent with this payload are not used in big segments. Contact your account manager for early access to this feature.",
                  "example" : false
                }
              }
            }
          }
        },
        "required" : true
      },
      "UserSettingsPutRequest" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "setting" : {
                  "type" : "boolean",
                  "description" : "The variation value to set for the user. Must match the variation type of the flag.\n"
                }
              }
            }
          }
        },
        "required" : true
      },
      "WebhookPostRequest" : {
        "description" : "New webhook.",
        "content" : {
          "application/json" : {
            "schema" : {
              "required" : [ "on", "sign", "url" ],
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "The name of the webhook.",
                  "example" : "Example hook"
                },
                "on" : {
                  "type" : "boolean",
                  "description" : "Whether this webhook is enabled or not.",
                  "example" : true
                },
                "secret" : {
                  "type" : "string",
                  "description" : "If sign is true, and the secret attribute is omitted, LaunchDarkly will automatically generate a secret for you.",
                  "example" : "<password>"
                },
                "sign" : {
                  "type" : "boolean",
                  "description" : "If sign is false, the webhook will not include a signature header, and the secret can be omitted."
                },
                "statements" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Statement"
                  }
                },
                "tags" : {
                  "type" : "array",
                  "description" : "Tags for the webhook.",
                  "example" : [ ],
                  "items" : {
                    "type" : "string"
                  }
                },
                "url" : {
                  "type" : "string",
                  "description" : "The URL of the remote webhook.",
                  "example" : "https://example.com/example"
                }
              }
            }
          }
        },
        "required" : true
      }
    },
    "securitySchemes" : {
      "Token" : {
        "type" : "apiKey",
        "description" : "https://app.launchdarkly.com/settings#/tokens",
        "name" : "Authorization",
        "in" : "header"
      }
    }
  }
}