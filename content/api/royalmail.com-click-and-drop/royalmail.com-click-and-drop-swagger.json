{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "ChannelShipper & Royal Mail Public API",
    "description" : "Import your orders, retrieve your orders and generate labels.",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "/api/v1"
  } ],
  "tags" : [ {
    "name" : "Rate Limits",
    "description" : "<p>Exceeding the following rate limits will result in a 429 error:</p><table class='security-details'><tbody><tr><td>Click &amp; Drop customers</td><td>1 call per second</td></tr><tr><td>ChannelShipper* customers</td><td>5 calls per second</td></tr></tbody></table><p><b>* Please visit <a href='https://channelshipper.com/' target='_self'>ChannelShipper.com</a> for more information</b></p>"
  }, {
    "name" : "Version"
  }, {
    "name" : "Orders"
  }, {
    "name" : "Labels"
  } ],
  "paths" : {
    "/manifests" : {
      "post" : {
        "tags" : [ "Manifests" ],
        "summary" : "Manifest orders",
        "description" : "For more information on how to manifest orders using the API, including examples of different use-cases please \nvisit either the <a href=\"https://help.parcel.royalmail.com/hc/en-gb/articles/360011462338-How-to-import-orders-with-the-Click-Drop-API\">Click & Drop API Help Page</a> \nor <a href=\"https://support.channelshipper.com/hc/en-gb/articles/360014653117-How-to-import-orders-with-the-ChannelShipper-API\">ChannelShipper Help Page</a>.\n",
        "operationId" : "CreateManifestsAsync",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateManifestsRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Request is valid but no orders eligible for manifesting were found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateManifestsResponse"
                }
              }
            }
          },
          "202" : {
            "description" : "Request Accepted and manifests are being processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateManifestsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request (Request has missing or invalid parameters and cannot be parsed)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateManifestsErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden (Feature available for OBA accounts only)"
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : null
        } ]
      }
    },
    "/manifests/{manifestGuid}" : {
      "get" : {
        "tags" : [ "Manifests" ],
        "summary" : "Retrieve manifest status and documentation",
        "operationId" : "GetManifestAsync",
        "parameters" : [ {
          "name" : "manifestGuid",
          "in" : "path",
          "description" : "GUID of manifest",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Provides information about manifest",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetManifestResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden (Feature available for OBA accounts only)"
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : null
        } ]
      }
    },
    "/manifests/{manifestGuid}/retry" : {
      "post" : {
        "tags" : [ "Manifests" ],
        "summary" : "Retry failed manifest",
        "description" : "Request will result in a 400 response if called within 30 mins of a previously failed manifest or retry attempt.",
        "operationId" : "RetryManifestAsync",
        "parameters" : [ {
          "name" : "manifestGuid",
          "in" : "path",
          "description" : "GUID of manifest",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Request Accepted and manifest is being processed"
          },
          "400" : {
            "description" : "Bad Request (Request has missing or invalid parameters and cannot be parsed)"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden (Feature available for OBA accounts only)"
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : null
        } ]
      }
    },
    "/orders" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "Retrieve pageable list of orders",
        "operationId" : "GetOrdersAsync",
        "parameters" : [ {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items to return",
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "default" : 25
          }
        }, {
          "name" : "startDateTime",
          "in" : "query",
          "description" : "Date and time lower bound for items filtering",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDateTime",
          "in" : "query",
          "description" : "Date and time upper bound for items filtering",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "continuationToken",
          "in" : "query",
          "description" : "The token for retrieving the next page of items",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return pageable list of orders",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrdersResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request (Request has missing or invalid parameters and cannot be parsed)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : null
        } ]
      },
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Create orders",
        "operationId" : "CreateOrdersAsync",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateOrdersRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Request Processed Successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateOrdersResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request (Request has missing or invalid parameters and cannot be parsed)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : null
        } ]
      }
    },
    "/orders/full" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "Retrieve pageable list of orders with details",
        "description" : "<b>Reserved for ChannelShipper customers only - please visit <a href=\"https://channelshipper.com/\" target=\"_self\">ChannelShipper.com</a> for more information</b>",
        "operationId" : "GetOrdersWithDetailsAsync",
        "parameters" : [ {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items to return",
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "default" : 25
          }
        }, {
          "name" : "startDateTime",
          "in" : "query",
          "description" : "Date and time lower bound for items filtering",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDateTime",
          "in" : "query",
          "description" : "Date and time upper bound for items filtering",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "continuationToken",
          "in" : "query",
          "description" : "The token for retrieving the next page of items",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return a pageable list of orders with details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrdersDetailsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request (Request has missing or invalid parameters and cannot be parsed)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden (Feature not available)"
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : null
        } ]
      }
    },
    "/orders/status" : {
      "put" : {
        "tags" : [ "Orders" ],
        "summary" : "Set order status",
        "operationId" : "UpdateOrdersStatusAsync",
        "requestBody" : {
          "description" : "At least one of 'orderIdentifier' and 'orderReference' is required. Providing both is disallowed to avoid ambiguity.\n\nWhen the status is set to 'despatchedByOtherCourier', if the optional parameter 'trackingNumber' is provided \nthen the parameters 'despatchDate', 'shippingCarrier' and 'shippingService' are also required.\n",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateOrdersStatusRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Provides a list of orders",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateOrderStatusResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request (Request has missing or invalid parameters and cannot be parsed)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OrderUpdateError"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : null
        } ]
      }
    },
    "/orders/{orderIdentifiers}" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "Retrieve specific orders",
        "operationId" : "GetSpecificOrdersAsync",
        "parameters" : [ {
          "name" : "orderIdentifiers",
          "in" : "path",
          "description" : "One or several Order Identifiers or Order References separated by semicolon. Order Identifiers are integer numbers. Order References are strings - each must be percent-encoded and surrounded by double quotation marks.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return list of specific orders",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GetOrderInfoResource"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request (Request has missing or invalid parameters and cannot be parsed)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OrderErrorResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : null
        } ]
      },
      "delete" : {
        "tags" : [ "Orders" ],
        "summary" : "Delete orders",
        "description" : "<b>Reserved for ChannelShipper customers only - please visit \n<a href=\"https://channelshipper.com/\" target=\"_self\">ChannelShipper.com</a> for more information</b>\n\nPlease be aware labels generated on orders which are deleted are no longer valid and must be destroyed.\n\nCancelled label information is automatically shared with Royal Mail Revenue Protection, and should \na cancelled label be identified on an item in the Royal Mail Network, you will be charged on your account \nand an additional handling fee applied.\n",
        "operationId" : "DeleteOrdersAsync",
        "parameters" : [ {
          "name" : "orderIdentifiers",
          "in" : "path",
          "description" : "One or several Order Identifiers or Order References separated by semicolon. Order Identifiers are integer numbers. Order References are strings - each must be percent-encoded and surrounded by double quotation marks.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Provides a list of deleted orders references and ids and errors for orders that failed to delete",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeleteOrdersResource"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request (Request has missing or invalid parameters and cannot be parsed)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OrderErrorInfo"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden (Feature not available)"
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : null
        } ]
      }
    },
    "/orders/{orderIdentifiers}/full" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "Retrieve details of the specific orders",
        "description" : "<b>Reserved for ChannelShipper customers only - please visit <a href=\"https://channelshipper.com/\" target=\"_self\">ChannelShipper.com</a> for more information</b>",
        "operationId" : "GetSpecificOrdersWithDetailsAsync",
        "parameters" : [ {
          "name" : "orderIdentifiers",
          "in" : "path",
          "description" : "One or several Order Identifiers or Order References separated by semicolon. Order Identifiers are integer numbers. Order References are strings - each must be percent-encoded and surrounded by double quotation marks.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return detailed information about the orders",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GetOrderDetailsResource"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request (Request has missing or invalid parameters and cannot be parsed)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OrderErrorResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden (Feature not available)"
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : null
        } ]
      }
    },
    "/orders/{orderIdentifiers}/label" : {
      "get" : {
        "tags" : [ "Labels" ],
        "summary" : "Return a single PDF file with generated label and/or associated document(s)",
        "description" : "<b>Reserved for OBA customers only</b>\n\nThe account \"Label format\" settings page will control the page format settings used to print the postage label \nand associated documents. Certain combinations of these settings may prevent associated documents from being \nprinted together with the postage label within a single document. If this occurs the documentType option can be \nused in a separate call to print missing documents.\n",
        "operationId" : "GetOrdersLabelAsync",
        "parameters" : [ {
          "name" : "orderIdentifiers",
          "in" : "path",
          "description" : "One or several Order Identifiers or Order References separated by semicolon. Order Identifiers are integer numbers. Order References are strings - each must be percent-encoded and surrounded by double quotation marks.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "documentType",
          "in" : "query",
          "description" : "Document generation mode. When documentType is set to \"postageLabel\" the additional parameters below must be used. These additional parameters will be ignored when documentType is not set to \"postageLabel\"",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "postageLabel", "despatchNote", "CN22", "CN23" ]
          }
        }, {
          "name" : "includeReturnsLabel",
          "in" : "query",
          "description" : "Include returns label. Required when documentType is set to 'postageLabel'",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeCN",
          "in" : "query",
          "description" : "Include CN22/CN23 with label. Optional parameter. If this parameter is used the setting will override the default account behaviour specified in the \"Label format\" setting \"Generate customs declarations with orders\"",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the PDF file with labels",
            "content" : {
              "application/pdf" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              },
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request (Request has missing or invalid parameters and cannot be parsed)",
            "content" : {
              "application/pdf" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OrderErrorResponse"
                  }
                }
              },
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OrderErrorResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden (Feature available for OBA accounts only)"
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/pdf" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : null
        } ]
      }
    },
    "/version" : {
      "get" : {
        "tags" : [ "Version" ],
        "summary" : "Get API version details.",
        "operationId" : "GetVersionAsync",
        "responses" : {
          "200" : {
            "description" : "Returns details about the API version",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetVersionResource"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AddressRequest" : {
        "required" : [ "addressLine1", "city", "countryCode" ],
        "type" : "object",
        "properties" : {
          "addressLine1" : {
            "maxLength" : 100,
            "type" : "string"
          },
          "addressLine2" : {
            "maxLength" : 100,
            "type" : "string"
          },
          "addressLine3" : {
            "maxLength" : 100,
            "type" : "string"
          },
          "city" : {
            "maxLength" : 100,
            "type" : "string"
          },
          "companyName" : {
            "maxLength" : 100,
            "type" : "string"
          },
          "countryCode" : {
            "maxLength" : 3,
            "type" : "string"
          },
          "county" : {
            "maxLength" : 100,
            "type" : "string"
          },
          "fullName" : {
            "maxLength" : 210,
            "type" : "string"
          },
          "postcode" : {
            "maxLength" : 20,
            "type" : "string"
          }
        }
      },
      "BillingDetailsRequest" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/AddressRequest"
          },
          "emailAddress" : {
            "maxLength" : 254,
            "type" : "string"
          },
          "phoneNumber" : {
            "maxLength" : 25,
            "type" : "string"
          }
        },
        "description" : "<b>Billing</b> along with <b>billing.address</b> objects are required in specific case when 'Use shipping address for billing address' setting is set to 'false' and 'Recipient.AddressBookReference' is provided."
      },
      "CreateManifestsError" : {
        "type" : "object",
        "properties" : {
          "accountBatchNumber" : {
            "pattern" : "^B\\d{1,10}$",
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "orderIdentifier" : {
            "type" : "integer"
          },
          "orderReference" : {
            "type" : "string"
          }
        }
      },
      "CreateManifestsErrorResponse" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateManifestsError"
            }
          }
        }
      },
      "CreateManifestsRequest" : {
        "type" : "object",
        "properties" : {
          "accountBatchNumbers" : {
            "type" : "array",
            "description" : "Cannot be mixed with other parameter types.",
            "example" : [ "B1111", "B12345" ],
            "items" : {
              "pattern" : "^B\\d{1,10}$",
              "type" : "string"
            }
          },
          "allOrders" : {
            "type" : "boolean",
            "description" : "Set to <code>true</code> and leave all the other parameters empty to manifest all orders in an eligible state \nup to and including the current day (orders with a future despatch date will not be included).\nDo not specify this parameter or alternatively set to <code>false</code> if specifying any other parameter options.\n",
            "example" : false
          },
          "endDateTime" : {
            "type" : "string",
            "description" : "Date and time in UTC.\nUsed together with <b>startDateTime</b> to manifest all orders in an eligible state in a date/time range. \nIf a <b>startDateTime</b> is specified without this parameter the end of the date/time range will be the latest \npossible order. Cannot be mixed with other parameter types.\n",
            "format" : "date-time"
          },
          "orderIdentifiers" : {
            "type" : "array",
            "description" : "Can be specified together with <b>orderReferences</b>  in the same call, but cannot be mixed with other parameter types\n",
            "items" : {
              "type" : "integer"
            }
          },
          "orderReferences" : {
            "type" : "array",
            "description" : "Can be specified together with <b>orderIdentifiers</b> in the same call, but cannot be mixed with other parameter types\n",
            "items" : {
              "type" : "string"
            }
          },
          "startDateTime" : {
            "type" : "string",
            "description" : "Date and time in UTC.\nUsed together with <b>endDateTime</b> to manifest all orders in an eligible state in a date/time range. \nIf an <b>endDateTime</b> is specified without this parameter the start of the date/time range will be the earliest \npossible order. Cannot be mixed with other parameter types.\n",
            "format" : "date-time"
          }
        },
        "example" : {
          "allOrders" : false,
          "endDateTime" : "2019-08-25T14:15:22Z",
          "orderIdentifiers" : [ 1122, 1212 ],
          "orderReferences" : [ "ref123", "xyz" ],
          "startDateTime" : "2019-08-24T14:15:22Z"
        }
      },
      "CreateManifestsResponse" : {
        "type" : "object",
        "properties" : {
          "manifests" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }
      },
      "CreateOrderErrorResponse" : {
        "type" : "object",
        "properties" : {
          "errorCode" : {
            "type" : "integer"
          },
          "errorMessage" : {
            "type" : "string"
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderFieldResponse"
            }
          }
        }
      },
      "CreateOrderLabelErrorResponse" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string"
          }
        }
      },
      "CreateOrderRequest" : {
        "required" : [ "orderDate", "recipient", "shippingCostCharged", "subtotal", "total" ],
        "type" : "object",
        "properties" : {
          "billing" : {
            "$ref" : "#/components/schemas/BillingDetailsRequest"
          },
          "currencyCode" : {
            "maxLength" : 3,
            "type" : "string"
          },
          "customsDutyCosts" : {
            "multipleOf" : 0.01,
            "maximum" : 99999.99,
            "minimum" : 0,
            "type" : "number",
            "description" : "Customs Duty Costs is only supported in DDP (Delivery Duty Paid) services",
            "format" : "decimal"
          },
          "label" : {
            "$ref" : "#/components/schemas/LabelGenerationRequest"
          },
          "orderDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderReference" : {
            "maxLength" : 40,
            "type" : "string"
          },
          "otherCosts" : {
            "multipleOf" : 0.01,
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "decimal"
          },
          "packages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ShipmentPackageRequest"
            }
          },
          "plannedDespatchDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "postageDetails" : {
            "$ref" : "#/components/schemas/PostageDetailsRequest"
          },
          "recipient" : {
            "$ref" : "#/components/schemas/RecipientDetailsRequest"
          },
          "sender" : {
            "$ref" : "#/components/schemas/SenderDetailsRequest"
          },
          "shippingCostCharged" : {
            "multipleOf" : 0.01,
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "decimal"
          },
          "specialInstructions" : {
            "maxLength" : 500,
            "type" : "string"
          },
          "subtotal" : {
            "multipleOf" : 0.01,
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "decimal"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TagRequest"
            }
          },
          "total" : {
            "multipleOf" : 0.01,
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "decimal"
          }
        }
      },
      "CreateOrderResponse" : {
        "required" : [ "createdOn", "orderIdentifier" ],
        "type" : "object",
        "properties" : {
          "createdOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "label" : {
            "type" : "string",
            "description" : "label in format base64 string"
          },
          "labelErrors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderLabelErrorResponse"
            }
          },
          "manifestedOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderIdentifier" : {
            "type" : "integer"
          },
          "orderReference" : {
            "type" : "string"
          },
          "printedOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "shippedOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "trackingNumber" : {
            "type" : "string"
          }
        }
      },
      "CreateOrdersRequest" : {
        "required" : [ "items" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderRequest"
            }
          }
        }
      },
      "CreateOrdersResponse" : {
        "type" : "object",
        "properties" : {
          "createdOrders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderResponse"
            }
          },
          "errorsCount" : {
            "type" : "integer"
          },
          "failedOrders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FailedOrderResponse"
            }
          },
          "successCount" : {
            "type" : "integer"
          }
        }
      },
      "DeleteOrdersResource" : {
        "type" : "object",
        "properties" : {
          "deletedOrders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DeletedOrderInfo"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderErrorInfo"
            }
          }
        }
      },
      "DeletedOrderInfo" : {
        "type" : "object",
        "properties" : {
          "orderIdentifier" : {
            "type" : "integer"
          },
          "orderInfo" : {
            "type" : "string"
          },
          "orderReference" : {
            "type" : "string"
          }
        }
      },
      "DimensionsRequest" : {
        "required" : [ "depthInMms", "heightInMms", "widthInMms" ],
        "type" : "object",
        "properties" : {
          "depthInMms" : {
            "type" : "integer",
            "format" : "int32"
          },
          "heightInMms" : {
            "type" : "integer",
            "format" : "int32"
          },
          "widthInMms" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "description" : "It is not mandatory to include the dimensions field. If the dimensions field is included then the inner fields heightInMms, widthInMms and depthInMms must be specified with non-zero values."
      },
      "ErrorResponse" : {
        "required" : [ "message" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "details" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "FailedOrderResponse" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateOrderErrorResponse"
            }
          },
          "order" : {
            "$ref" : "#/components/schemas/CreateOrderRequest"
          }
        }
      },
      "GetManifestOrder" : {
        "type" : "object",
        "properties" : {
          "orderIdentifier" : {
            "type" : "integer"
          },
          "orderReference" : {
            "type" : "string"
          }
        }
      },
      "GetManifestResponse" : {
        "type" : "object",
        "properties" : {
          "documentStatus" : {
            "type" : "string",
            "description" : "* <b>InProgress</b>: Manifest documentation generation is currently in progress\n* <b>Completed</b>: Manifest documentation generation has been completed\n",
            "enum" : [ "InProgress", "Completed" ]
          },
          "errorReference" : {
            "type" : "string",
            "format" : "uuid"
          },
          "manifestStatus" : {
            "type" : "string",
            "description" : "* <b>InProgress</b>: Manifest operation is currently in progress\n* <b>Completed</b>: Manifest operation has been completed\n* <b>Failed</b>: Manifest operation has failed\n",
            "enum" : [ "InProgress", "Completed", "Failed" ]
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetManifestOrder"
            }
          },
          "pdf" : {
            "type" : "string",
            "description" : "pdf file encoded as base64 format string"
          }
        }
      },
      "GetOrderDetailsResource" : {
        "required" : [ "billingInfo", "orderDiscount", "orderLines", "shippingCostCharged", "shippingDetails", "shippingInfo", "subtotal", "total", "weightInGrams" ],
        "type" : "object",
        "properties" : {
          "AIRNumber" : {
            "type" : "string"
          },
          "accountBatchNumber" : {
            "type" : "string"
          },
          "billingInfo" : {
            "$ref" : "#/components/schemas/GetPostalDetailsResult"
          },
          "channel" : {
            "type" : "string"
          },
          "channelShippingMethod" : {
            "type" : "string"
          },
          "commercialInvoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "commercialInvoiceNumber" : {
            "type" : "string"
          },
          "createdOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "currencyCode" : {
            "maxLength" : 3,
            "type" : "string"
          },
          "department" : {
            "type" : "string"
          },
          "despatchedByOtherCourierOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "manifestedOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "marketplaceTypeName" : {
            "type" : "string"
          },
          "orderDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderDiscount" : {
            "type" : "number"
          },
          "orderIdentifier" : {
            "type" : "integer"
          },
          "orderLines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetOrderLineResult"
            }
          },
          "orderReference" : {
            "type" : "string"
          },
          "orderStatus" : {
            "type" : "string"
          },
          "packageSize" : {
            "type" : "string"
          },
          "pickerSpecialInstructions" : {
            "type" : "string"
          },
          "postageAppliedOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "printedOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "requiresExportLicense" : {
            "type" : "boolean"
          },
          "shippedOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "shippingCostCharged" : {
            "type" : "number"
          },
          "shippingDetails" : {
            "$ref" : "#/components/schemas/GetShippingDetailsResult"
          },
          "shippingInfo" : {
            "$ref" : "#/components/schemas/GetPostalDetailsResult"
          },
          "specialInstructions" : {
            "type" : "string"
          },
          "subtotal" : {
            "type" : "number"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetTagDetailsResult"
            }
          },
          "total" : {
            "type" : "number"
          },
          "tradingName" : {
            "type" : "string"
          },
          "weightInGrams" : {
            "type" : "integer"
          }
        }
      },
      "GetOrderInfoResource" : {
        "required" : [ "createdOn", "orderIdentifier" ],
        "type" : "object",
        "properties" : {
          "createdOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "manifestedOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderIdentifier" : {
            "type" : "integer"
          },
          "orderReference" : {
            "type" : "string"
          },
          "printedOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "shippedOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "trackingNumber" : {
            "type" : "string"
          }
        }
      },
      "GetOrderLineResult" : {
        "required" : [ "quantity" ],
        "type" : "object",
        "properties" : {
          "SKU" : {
            "type" : "string"
          },
          "customsCode" : {
            "type" : "string"
          },
          "lineTotal" : {
            "type" : "number"
          },
          "name" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "integer"
          },
          "unitValue" : {
            "type" : "number"
          }
        }
      },
      "GetOrdersDetailsResponse" : {
        "type" : "object",
        "properties" : {
          "continuationToken" : {
            "type" : "string"
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetOrderDetailsResource"
            }
          }
        }
      },
      "GetOrdersResponse" : {
        "type" : "object",
        "properties" : {
          "continuationToken" : {
            "type" : "string"
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GetOrderInfoResource"
            }
          }
        }
      },
      "GetPostalDetailsResult" : {
        "type" : "object",
        "properties" : {
          "addressLine1" : {
            "type" : "string"
          },
          "addressLine2" : {
            "type" : "string"
          },
          "addressLine3" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "companyName" : {
            "type" : "string"
          },
          "countryCode" : {
            "maxLength" : 3,
            "type" : "string"
          },
          "county" : {
            "type" : "string"
          },
          "emailAddress" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "postcode" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "GetShippingDetailsResult" : {
        "required" : [ "shippingCost" ],
        "type" : "object",
        "properties" : {
          "guaranteedSaturdayDelivery" : {
            "type" : "boolean"
          },
          "isLocalCollect" : {
            "type" : "boolean"
          },
          "receiveEmailNotification" : {
            "type" : "boolean"
          },
          "receiveSmsNotification" : {
            "type" : "boolean"
          },
          "requestSignatureUponDelivery" : {
            "type" : "boolean"
          },
          "serviceCode" : {
            "type" : "string"
          },
          "shippingCarrier" : {
            "type" : "string"
          },
          "shippingCost" : {
            "type" : "number"
          },
          "shippingService" : {
            "type" : "string"
          },
          "shippingTrackingStatus" : {
            "type" : "string"
          },
          "trackingNumber" : {
            "type" : "string"
          }
        }
      },
      "GetTagDetailsResult" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "maxLength" : 100,
            "type" : "string"
          },
          "value" : {
            "maxLength" : 100,
            "type" : "string"
          }
        }
      },
      "GetVersionResource" : {
        "required" : [ "releaseDate" ],
        "type" : "object",
        "properties" : {
          "build" : {
            "type" : "string"
          },
          "commit" : {
            "type" : "string"
          },
          "release" : {
            "type" : "string"
          },
          "releaseDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "LabelGenerationRequest" : {
        "required" : [ "includeLabelInResponse" ],
        "type" : "object",
        "properties" : {
          "includeCN" : {
            "type" : "boolean"
          },
          "includeLabelInResponse" : {
            "type" : "boolean"
          },
          "includeReturnsLabel" : {
            "type" : "boolean"
          }
        },
        "description" : "<b>Reserved for OBA customers only</b>"
      },
      "OrderErrorInfo" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "orderIdentifier" : {
            "type" : "integer"
          },
          "orderReference" : {
            "type" : "string"
          }
        }
      },
      "OrderErrorResponse" : {
        "type" : "object",
        "properties" : {
          "accountOrderNumber" : {
            "type" : "integer"
          },
          "channelOrderReference" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "OrderFieldResponse" : {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "OrderUpdateError" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "orderIdentifier" : {
            "type" : "integer"
          },
          "orderReference" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "description" : "Current status of the order"
          }
        }
      },
      "PostageDetailsRequest" : {
        "type" : "object",
        "properties" : {
          "AIRNumber" : {
            "maxLength" : 50,
            "type" : "string"
          },
          "IOSSNumber" : {
            "maxLength" : 50,
            "type" : "string"
          },
          "carrierName" : {
            "maxLength" : 50,
            "type" : "string"
          },
          "commercialInvoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "commercialInvoiceNumber" : {
            "maxLength" : 35,
            "type" : "string"
          },
          "consequentialLoss" : {
            "maximum" : 10000,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "department" : {
            "maxLength" : 150,
            "type" : "string"
          },
          "guaranteedSaturdayDelivery" : {
            "type" : "boolean",
            "description" : "This field has been deprecated"
          },
          "isLocalCollect" : {
            "type" : "boolean"
          },
          "receiveEmailNotification" : {
            "type" : "boolean"
          },
          "receiveSmsNotification" : {
            "type" : "boolean"
          },
          "requestSignatureUponDelivery" : {
            "type" : "boolean"
          },
          "requiresExportLicense" : {
            "type" : "boolean"
          },
          "safePlace" : {
            "maxLength" : 90,
            "type" : "string"
          },
          "sendNotificationsTo" : {
            "type" : "string",
            "enum" : [ "sender", "recipient", "billing" ]
          },
          "serviceCode" : {
            "maxLength" : 10,
            "type" : "string"
          },
          "serviceRegisterCode" : {
            "maxLength" : 2,
            "type" : "string"
          }
        },
        "example" : {
          "AIRNumber" : "string",
          "IOSSNumber" : "string",
          "commercialInvoiceDate" : "2019-08-24T14:15:22Z",
          "commercialInvoiceNumber" : "string",
          "consequentialLoss" : 0,
          "department" : "string",
          "guaranteedSaturdayDelivery" : false,
          "isLocalCollect" : true,
          "receiveEmailNotification" : true,
          "receiveSmsNotification" : true,
          "requestSignatureUponDelivery" : true,
          "requiresExportLicense" : true,
          "safePlace" : "string",
          "sendNotificationsTo" : "sender",
          "serviceCode" : "string",
          "serviceRegisterCode" : "st"
        }
      },
      "ProductItemRequest" : {
        "required" : [ "quantity" ],
        "type" : "object",
        "properties" : {
          "SKU" : {
            "maxLength" : 100,
            "type" : "string",
            "description" : "The presence or not of field <b>SKU</b> and other fields in the request body will determine which of the following behaviours occur:- <br>1) A minimum of <b>SKU</b>, <b>unitValue</b>, <b>unitWeightInGrams</b> and <b>quantity</b> provided - In addition to the provided product fields being used for the order creation, an existing account Product with matching SKU will be overwritten with all provided product parameters. If no existing account Product with matching SKU can be found then a new product will be created with the provided SKU and product parameters.<br>2) <b>SKU</b>, <b>quantity</b> provided and <b>no other fields</b> provided - An account Product with the provided SKU will be used for the order if it exists.<br>3) <b>SKU not provided</b> and a minimum of <b>unitValue</b>, <b>unitWeightInGrams</b> and <b>quantity</b> provided - All provided product fields will be used for the order creation.<br>4) All other scenarios will result in a validation error."
          },
          "customsCode" : {
            "maxLength" : 10,
            "type" : "string"
          },
          "customsDeclarationCategory" : {
            "type" : "string",
            "enum" : [ "none", "gift", "commercialSample", "documents", "other", "returnedGoods", "saleOfGoods", "mixedContent" ]
          },
          "customsDescription" : {
            "maxLength" : 50,
            "type" : "string"
          },
          "extendedCustomsDescription" : {
            "maxLength" : 300,
            "type" : "string"
          },
          "name" : {
            "maxLength" : 800,
            "type" : "string"
          },
          "originCountryCode" : {
            "maxLength" : 3,
            "type" : "string"
          },
          "quantity" : {
            "maximum" : 999999,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "requiresExportLicence" : {
            "type" : "boolean"
          },
          "unitValue" : {
            "multipleOf" : 0.01,
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "number",
            "format" : "decimal"
          },
          "unitWeightInGrams" : {
            "maximum" : 999999,
            "minimum" : 0,
            "type" : "integer"
          }
        }
      },
      "RecipientDetailsRequest" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/AddressRequest"
          },
          "addressBookReference" : {
            "maxLength" : 100,
            "type" : "string",
            "description" : "The presence or not of <b>addressBookReference</b> and a valid <b>recipient address object</b> in the request body will determine which of the following behaviours occur:-</br></br>1) addressBookReference <b>provided</b> and a valid recipient address object <b>provided</b> - In addition to the provided recipient address fields being used for the order creation, an existing account Address Book Reference with matching addressBookReference will be overwritten with all provided recipient address fields, including phone and email. If no existing account Address Book Reference with matching addressBookReference can be found then a new one will be created with the provided addressBookReference and address fields, including phone and email.</br>2) addressBookReference <b>provided</b> and a valid recipient address object <b>not provided</b> - An account Address Book Reference with the provided addressBookReference will be used for the order if it exists.</br>3) addressBookReference <b>not provided</b> and a valid recipient address object <b>provided</b> - All provided recipient address fields, including phone and email, will be used for the order creation.</br>4) All other scenarios will result in a validation error."
          },
          "emailAddress" : {
            "maxLength" : 254,
            "type" : "string"
          },
          "phoneNumber" : {
            "maxLength" : 25,
            "type" : "string"
          }
        }
      },
      "SenderDetailsRequest" : {
        "type" : "object",
        "properties" : {
          "emailAddress" : {
            "maxLength" : 254,
            "type" : "string"
          },
          "phoneNumber" : {
            "maxLength" : 25,
            "type" : "string"
          },
          "tradingName" : {
            "maxLength" : 250,
            "type" : "string"
          }
        }
      },
      "ShipmentPackageRequest" : {
        "required" : [ "packageFormatIdentifier", "weightInGrams" ],
        "type" : "object",
        "properties" : {
          "contents" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductItemRequest"
            }
          },
          "customPackageFormatIdentifier" : {
            "type" : "string",
            "description" : "This field will be deprecated in the future. Please use 'packageFormatIdentifier' for custom package formats from ChannelShipper."
          },
          "dimensions" : {
            "$ref" : "#/components/schemas/DimensionsRequest"
          },
          "packageFormatIdentifier" : {
            "type" : "string",
            "description" : "<b>If you have a ChannelShipper account, you can also pass the name of any of your custom package formats instead of the values below.</b><br> Enum: 'undefined', 'letter', 'largeLetter', 'smallParcel', 'mediumParcel', 'parcel', 'documents'"
          },
          "weightInGrams" : {
            "maximum" : 30000,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "TagRequest" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "maxLength" : 100,
            "type" : "string"
          },
          "value" : {
            "maxLength" : 100,
            "type" : "string"
          }
        }
      },
      "UpdateOrderStatusRequest" : {
        "type" : "object",
        "properties" : {
          "despatchDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderIdentifier" : {
            "type" : "integer",
            "format" : "int32"
          },
          "orderReference" : {
            "type" : "string"
          },
          "shippingCarrier" : {
            "type" : "string"
          },
          "shippingService" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "description" : "<br/>\n\"<i>despatchedByOtherCourier</i> \": <b>Reserved for ChannelShipper customers only - please visit \n<a href=\"https://channelshipper.com/\" target=\"_self\">ChannelShipper.com</a> for more information</b>\n\n\"<i>new</i> \": This will remove the order from its batch. Order information will not be lost during this process.\n\nPlease be aware labels generated on orders which are then set to \"new\" (reset) are no longer valid \nand must be destroyed. If the order is required to be despatched after setting to \"new\" status, a new \nlabel must be generated to attach to the item.\n\nCancelled label information is automatically shared with Royal Mail Revenue Protection, and should a \ncancelled label be identified on an item in the Royal Mail Network, you will be charged on your account \nand an additional handling fee applied.\n",
            "enum" : [ "new", "despatchedByOtherCourier", "despatched" ]
          },
          "trackingNumber" : {
            "type" : "string"
          }
        }
      },
      "UpdateOrderStatusResponse" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderUpdateError"
            }
          },
          "updatedOrders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdatedOrderInfo"
            }
          }
        }
      },
      "UpdateOrdersStatusRequest" : {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateOrderStatusRequest"
            }
          }
        }
      },
      "UpdatedOrderInfo" : {
        "type" : "object",
        "properties" : {
          "orderIdentifier" : {
            "type" : "integer"
          },
          "orderReference" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "description" : "Current status of the order"
          }
        }
      }
    },
    "parameters" : {
      "continuationToken" : {
        "name" : "continuationToken",
        "in" : "query",
        "description" : "The token for retrieving the next page of items",
        "schema" : {
          "type" : "string"
        }
      },
      "documentType" : {
        "name" : "documentType",
        "in" : "query",
        "description" : "Document generation mode. When documentType is set to \"postageLabel\" the additional parameters below must be used. These additional parameters will be ignored when documentType is not set to \"postageLabel\"",
        "required" : true,
        "schema" : {
          "type" : "string",
          "enum" : [ "postageLabel", "despatchNote", "CN22", "CN23" ]
        }
      },
      "endDateTime" : {
        "name" : "endDateTime",
        "in" : "query",
        "description" : "Date and time upper bound for items filtering",
        "schema" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "includeCN" : {
        "name" : "includeCN",
        "in" : "query",
        "description" : "Include CN22/CN23 with label. Optional parameter. If this parameter is used the setting will override the default account behaviour specified in the \"Label format\" setting \"Generate customs declarations with orders\"",
        "schema" : {
          "type" : "boolean"
        }
      },
      "includeReturnsLabel" : {
        "name" : "includeReturnsLabel",
        "in" : "query",
        "description" : "Include returns label. Required when documentType is set to 'postageLabel'",
        "schema" : {
          "type" : "boolean"
        }
      },
      "manifestGuid" : {
        "name" : "manifestGuid",
        "in" : "path",
        "description" : "GUID of manifest",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "uuid"
        }
      },
      "orderIdentifiers" : {
        "name" : "orderIdentifiers",
        "in" : "path",
        "description" : "One or several Order Identifiers or Order References separated by semicolon. Order Identifiers are integer numbers. Order References are strings - each must be percent-encoded and surrounded by double quotation marks.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "page" : {
        "name" : "page",
        "in" : "query",
        "description" : "The number of page to return",
        "schema" : {
          "maximum" : 100,
          "minimum" : 1,
          "type" : "integer",
          "default" : 1
        }
      },
      "pageSize" : {
        "name" : "pageSize",
        "in" : "query",
        "description" : "The number of items to return",
        "schema" : {
          "maximum" : 100,
          "minimum" : 1,
          "type" : "integer",
          "default" : 25
        }
      },
      "startDateTime" : {
        "name" : "startDateTime",
        "in" : "query",
        "description" : "Date and time lower bound for items filtering",
        "schema" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "securitySchemes" : {
      "Bearer" : {
        "type" : "apiKey",
        "description" : "Authorization header using the Bearer scheme.\r\n\r\nEnter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: 'Bearer 12345abcdef'",
        "name" : "Authorization",
        "in" : "header"
      }
    }
  }
}