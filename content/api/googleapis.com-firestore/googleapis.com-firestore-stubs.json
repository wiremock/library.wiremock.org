{
  "mappings" : [ {
    "id" : "efbfbaca-3fc2-4084-a0db-f9b570a1a63a",
    "name" : "Creates a composite index. This returns a google.longrunning.Operation which may...",
    "request" : {
      "urlPath" : "/v1beta2/arvg3z7fx4g02gopf3t2jyy4hzbqyj2ru4mrggij9y8cq00sxiz15nh7kb6lb1u/indexes",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Stephan Turner\",\n  \"error\" : {\n    \"code\" : 2015264203,\n    \"details\" : [ { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Repellendus qui veritatis porro. Sapiente qui aliquid est consequuntur. Eos tempore possimus. Dolorem aut qui culpa consequuntur.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "efbfbaca-3fc2-4084-a0db-f9b570a1a63a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:35.647612Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "336ae9a9-da20-4fd3-b4ee-ffc2f5faea0a",
    "name" : "Lists composite indexes.",
    "request" : {
      "urlPath" : "/v1beta2/fq8a38sulbd4zb7ps6jrfxh5u635e10jkcf6quci401xvzvise0gqthz12xqugtpw2cxtsae3d4qv7ilg49dmxirdqlrshjuasqujr2g1z5x8qdqdvuf7hjqq8d2r077am2lstl23up8wh6oipak4uogtx2mlog71wci4hl4hqcisz/indexes",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"indexes\" : [ {\n    \"queryScope\" : \"COLLECTION\",\n    \"name\" : \"Catarina Marvin\",\n    \"state\" : \"NEEDS_REPAIR\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"qaizfwu2vt2gk7ec9ifvw2z6g4nramydsok5vmsg6fsfjwsmsfycu0tl45jyrr5yrcj59outn9oq2aax7d76m8g1ztb6i7n\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"6hnmilm05kvjqmqfda7wi8p483533dh5lr47okk0dz03ot4yoprduun12zb8eq2tk00r7mzj280f1acl5cnwu4cnj46cnte1bit5h2zhshznezyd7zb7zrff3t618laq66dbxwjv7wuny4def9nsg9\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Tanesha Kassulke\",\n    \"state\" : \"CREATING\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"4fwvql50z45f6uh6\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"rimixbc4g18zq988p3foifllq7v5ehn0kw1me14i71kpo2yuucnitdvxnwshzzj7nka4xkscek4nek96o5o5dxivwmwi52x98v3obrccny4gu7w0haxwho3xquqwxjukbjnzynzwqr5gqh80zb03ayedlm5wexx6gaqkc8eap4t8mss9rcgz6\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"ya160midctw9v0qgohm1agyzlcm1l1ecr9oroglz1p4g1el\",\n      \"order\" : \"DESCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION\",\n    \"name\" : \"Dr. Francisco Pagac\",\n    \"state\" : \"NEEDS_REPAIR\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"0nzlk3dpzzizo7sugvcr11zxddml0fg379ojp65ewjtk99x3icv3sq7i9zw6gmriouq6or2rcovzxtd5rdcuczqthnes5tdkyd8m5tooioe81bnsbrlk88plrdf2ks09mvbvc9sp3wjk7gs8jbs53rif88tg7cjgskzxp6g\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"7ey4n7yjfh384knokoi2t6mqsvz5miy211whl8cw2al6jo\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"52sgowxdje9ycrjt1v018mvesbjxc0148b6m86p0hrbt7sckdrxv9ejejqwzd9vq5\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"5qzi1nm7cwpyaq9cegh814ene0f1pof93g9xfl583l9hmlpli6xck3clsfcpbqw66bzhgmphtz1u34tvvuy88njh7hocm30io60poeptyju1f72dcdkvwx8vfb34\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"9yfnreopobjjndsl4l2jsuq0hvh3g98i0bewwmp410xwnpek3wdjlo6psqpsv4g0341pzfpr32hinvo239eykpz4itlowr9uanx7tyg7z3l1m0ediuprrid2n0g32ysv1v10equ1np8dovc9nqvi7zc3ov71y\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"ey4ei25po86vp9sbu4e0vkmbpkrzypy7g8gir5ens44bk4k5b5ysmrhkn1lukghegad8xow3vor3t2ixi9dhoa7zqe7smqr8wp6hohr8nik7tw1z1kx32qbm5mbb0adnyg7d2t2iy6uu7ym0vl8pwvn9cez7nf\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"y3jolfc6gb4h0mwjmr4gti1upun2uqfhm300cek2q49rmuu6trolhtb5xfmp3q6o9kg3tmld8i01ibe6p1ijc2kaffwv8deakcglo68p3h6wuu6n39xafmy\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"wfa2582x4jsgo6ghjpvsn7qsjn4p5\",\n      \"order\" : \"DESCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n    \"name\" : \"Ms. Laurence Kuphal\",\n    \"state\" : \"CREATING\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"hy52rzizosm332l31jb72gkgsimxwrbttgi7h2nekpb2k17ncgktxqvhypbcw0gu6u43gnx2acqik5reh4rwsolqpok59a4f4le1c3kbf0513s4mhjx7f7u14a8kqfw1co5uuyw\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"oh22k0kp3c7rt17em8ysyhc4egsl5hu46q9rrugtbfie9yofxjlb18gttaxj7u64yv8he97dewnfmv9q8ji1l4u64yp402kkskggplcvv9gqwedde5sb4\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"uqymj2s3rrbsv77qr8gwuwoe0v8e8133d4agb22577wbs7mqlbo9cnyc03a9nz628\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"x7f\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"im0e6sk8i892kja6ikcqaijs6fzcvn335ycuadwdooqmhajnmmrbg661vuhywxoxfkrq6gmwif2okgaizomjslsim5hwu06r43waklqbj0jwx54486j1015dzl7mk0d57odgnsm4dkfxcmg3rzsbf0a8yeewlaov5v4mjtgu523gqdn2hor\",\n      \"order\" : \"DESCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Cammy Grimes\",\n    \"state\" : \"READY\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"04mz8rdyxkjs1pfukqrfgm0nim01bdgiwjwf1hlv8vm7b5qznat6wftcuchwycn0rh83\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"nq25wbisxnpajxyeazlsg9wahu0o6pobjw1jz4qcoqf5rqeopu9ufmj8sah9uu1rp9vk41lhkc1h3gts212nscypz0dtsxfbboxx1t1yzyzqwqq5na1qa\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"8tyeznomyc\",\n      \"order\" : \"DESCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n    \"name\" : \"Damion Lynch\",\n    \"state\" : \"NEEDS_REPAIR\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"ultm8y87hlifoxt5yrkbfmvub6fu3d3kdo4a4ma79sstfh3jh98j2t6co2z9lgy3rx\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"4we9b4rg68dye72a7rpc6fkb9r8cy4t5jd902wk7m31usqoh39f8rj4qdzu4ik4bp0v1b2zqmkakisd4x3os1d4wfoju7ugvzeywuj4izy8tr7pt0menzf8kkqb8lf6cpfxt4op99ujdfeli1lanxytzc226shlqau74zj32gra4ylkj05cu3rub64beo1x\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"32wmsfzmi9lh6locmrc85c7h31qp9jdrt4j9fcbx8xrayh20xhxh84l4h2pqor0eesjvnkl71470kpz8cck9ewd0cs09zg1t6y0kkib6\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"8agachzptkw5dj2xh96u38poqkt918g0v0kwjffi9tf9lq798n4ibdykrw34bleuno2rl52lc219tmfpcx2g3577w5p6a0loedxt2bampkhmdbpnb2fr928rbugvn744e85yhk1hylj044e5qrscad5b7cnztdsd1bzw6ipy6402jf26lznjwh9b8qm\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"o5tj9p7kh1da98z7pw1kztyynvdymy39eislkohyld7dvxxfj6khlvzo0k7wc9xjezc4p7mt4mea5yczucsuzmzvu8wx76fzs6yvaoge3upprvhotouau\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"nf8q1cfoazsrozwodynryahvytm58melxs7bcgplhcv2cf440dyzbzgtso0b1v9euipwskxe06u9vvqw020tnzf2lfho2w1z7b68qc3a75tspmwdpdisnphk0cw7dcua2ln3alfri5109tlr0e68vasr9w1w40kfxunl3jx7q7p83jgi0tjyvty1of5ojwa030i\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Carlie Cruickshank\",\n    \"state\" : \"NEEDS_REPAIR\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"v6w6z67m0to16mxdz1jglw2h98mbhcn6astm73mmfveqd6e3jvh4wfjiwzvcejc4wnsbjuqlqzqiexb8s0t0b2ps0tvj4i7t5uzz1etzss852uh8andkpou2y2cfm99b5vggxv7v7bgqw58c0i08nqw1ikhstt9yb\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"i7v6m5qkxrtnjjyjtcz9u0s0jyyjj9ek98g862naqqzbbv60md7abbhq9ulu38oktn42id10mbo5wq41nedwjya13inplw8rnityttud4rjvi7aa\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"uqn1z9d8et3l9bwfn5waq7nzfrt4eiracr7xojmwl70zajxiffzfk3jv041hces8sra0vin1uo40eg433hjsybdiv2u04esqtkoxs6njz0c52\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"rszffqpw6ehyvkxjxp23ka7lj6kmf4qdlctdr7dx38zd9yb3c7kxh7ir95cydfmqzej8yxds629rrvjq64ybv3wk6stu8ejkxr3540mpeqfjx2lwen10j56ayqxqxljr7kac9nl0k4shr6l20845myrk64pc14wom27wp3ptvq6q10j6dk89vnmxy8sxyaxp6pfx0ci\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"podyopg4tawuq2hjqf369erex43h8zxpa05wrwfuah1pdznl08mu6xvvcbvx5v0pbur7zx6czgamaadox6dh6pty5gplmbe0gclf3woqex7z8hwgktecg0gcecey6xziteq908ykyxg9j6cp4moegrusi6d8mnzj2ra\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"8bupy95uf39uakbhrhhhkv68iisd2vi2bwwgywjfsumh6faejxrh3ysqheuzqkam90j6evnensdz70pxp9\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"sao538kstn192w6betx7niqoyc8hkx5qgmfcaj7bylbfymdvadyvqotf3cs2o8dtpb2p1snpkrubnfdb8u0ufue9jma3oo7btfcgl3errewrummdwljljnpd6qq5zg09\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"gyvyjjj3fz0zr1k6xi9coa5b8csozvlxd4l5nqjnem1d6n05yxy2uf46wzcbh7phr5y3g6\",\n      \"order\" : \"ASCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Kory Breitenberg\",\n    \"state\" : \"CREATING\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"ratz70zm9aoxv6pr4x3s4dstlybuu\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"20qcuo4xcmzwblbrohhod7sr5v9wdxu3j4vgtismgxy4b35qo062zebi7q072e158suqjce5x6xfrftobqc46cpy59cz5yksp0\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"dtezdvmpxhdt8jtev7dgnyvz9nnkc6dsrouamc8g3azqqov3yprw3cx70h4xp7jcvuohlg9ikb88jda\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"rintub0z9tfh5krp5jqmx62f32vyxyrt4ec2oglmmiubjn1r2mzp1o4ggvde0v8qklu7n0t9anrjj\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"5iq0605t9r5l3el1yoelw24sxvsr0zopyohkxfpj8sor7w1dfkbuwepuzdorjrrdkzhr31chtpdxbv9hzazbqwfh9evsdixzed6wd82ase83vzpyhhx\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    } ]\n  } ],\n  \"nextPageToken\" : \"h0gv7ia43co2msv0tnuhzmpce6u79ydqggblu8avrhfc5t06zwmhpswa18rawypvu793c78k27il404pjlffx9npe\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "336ae9a9-da20-4fd3-b4ee-ffc2f5faea0a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:35.647368Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.list",
          "schema" : {
            "description" : "The response for FirestoreAdmin.ListIndexes.",
            "properties" : {
              "indexes" : {
                "description" : "The requested indexes.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2Index"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A page token that may be used to request another page of results. If blank, this is the last page.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "2f547bbd-4104-4836-806d-efcc0447ef5b",
    "name" : "Lists the field configuration and metadata for this database. Currently, Firesto...",
    "request" : {
      "urlPath" : "/v1beta2/gqzbzlirqp0zs6hz2sx7u73165cxtzr93u4umg6mdj6m5qe4aj2pku6s5rw7sj2gy0h9o41wdxu17371qf9x0vr1z71rh2ftfr82q30takkbodh309k9ouww5mhxwsqs8hs6yjmm9gs1ecj9hcm5qjgvqryhth4u/fields",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"t4xggvcuhwjbz6yuouorzw8mj1sq6fi6avkrv4wp5ytwcddv6nck2tuoz6tq3bufvju8j7ofnzulpba5a0wv9jqnjongallbnqhkax6piyq6a5lwo50iopd9emadh4ctcejojobe9om7i21q\",\n  \"fields\" : [ {\n    \"name\" : \"Ms. Rosetta Mraz\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"odxmj2o8p43fydkr2hsywvft3ci0bo57clxs5mic0qhue3zkgu1g7fcu14rph89v5f5jkr8eyi0231zcgykcup0bry6t3nr16jse3wykde4b72tc\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Mrs. Gaston Ziemann\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Dr. Easter Turner\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  }, {\n    \"name\" : \"Bonnie Tromp\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"yxdbkf71tlqosj4b6y91h8ijf5u3zga1u7exnbtwzq88zqsskf8wpmqzhhdn4fsawxkfg6jv9xtuyldpy7hz60fhwli36k99grky9p21e2cqdl63l5n03rj018yz3rdqi75joqkyfp2nkc1tcei8pwthurps9oo6\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Harold Kozey\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Georgeanna Barton IV\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Otis Treutel\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Alane McKenzie Sr.\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Mr. Elmer Rolfson\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Ruben Christiansen\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"rhqkhf4mxfkfvg2kcu0x1dobks76i6gjmx7zmtszky7xou3l54k1l6qnbv4ccv1i6nifql5qoxacxod4tmnjvr66y6dipycqz2qd2chbznb23d764865alodhfmk563rl0wo9i1lj8aqqai2qyc33n000lwb80c4pk79hudyi07op6bu0d9flqlv8kyepscvdmgykc\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Estefana Ward DVM\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Jarred Monahan\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Eleanora Schowalter Sr.\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"4eoul4p2muyafltylpn2kbtdrp7gcax0d8yz1gfjpesq6yybr7hkwqimre9hwcx8lm9hrnf9bmopx7ra623nidv5wnpfn8vf3sqd9oq4kv0r36fr9w0us5xfbm1ivca24mlk1frbx9q1edmlk3uxgpicj8emi37hjoa91pn\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Mr. William McDermott\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Maria Willms\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2f547bbd-4104-4836-806d-efcc0447ef5b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:35.640354Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.fields.list",
          "schema" : {
            "description" : "The response for FirestoreAdmin.ListFields.",
            "properties" : {
              "fields" : {
                "description" : "The requested fields.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2Field"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A page token that may be used to request another page of results. If blank, this is the last page.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "53c5cd03-c14c-4ba2-a9ba-0b1fc2b3d9d3",
    "name" : "Imports documents into Google Cloud Firestore. Existing documents with the same ...",
    "request" : {
      "urlPath" : "/v1beta2/Shaunte+Hodkiewicz+Jr.:importDocuments",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Dr. Rodrick Deckow\",\n  \"error\" : {\n    \"code\" : 478302081,\n    \"details\" : [ { }, { }, { }, { }, { } ],\n    \"message\" : \"Non eligendi cupiditate aspernatur. Dolor velit repudiandae laboriosam. Inventore et voluptate nihil. Quia laborum aspernatur ut ab ut. Nisi voluptate optio illo aut qui quia repellendus.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "53c5cd03-c14c-4ba2-a9ba-0b1fc2b3d9d3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:35.638683Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.importDocuments",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "c8023568-a9a5-43fc-8774-586c04043d51",
    "name" : "Exports a copy of all or a subset of documents from Google Cloud Firestore to an...",
    "request" : {
      "urlPath" : "/v1beta2/Ngoc+Greenfelder:exportDocuments",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Gil Brakus\",\n  \"error\" : {\n    \"code\" : 1599007728,\n    \"details\" : [ { }, { } ],\n    \"message\" : \"Voluptatibus ut consectetur dolore qui error. Minima aspernatur minus nesciunt rerum. Quas consequatur officiis quia est rerum.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c8023568-a9a5-43fc-8774-586c04043d51",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:35.638441Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.exportDocuments",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "f0d09375-bb5c-4934-8e7b-b607b1d4e096",
    "name" : "Updates a field configuration. Currently, field updates apply only to single fie...",
    "request" : {
      "urlPath" : "/v1beta2/Loura+Donnelly",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Shelton Bartoletti\",\n  \"error\" : {\n    \"code\" : 766817773,\n    \"details\" : [ { }, { }, { }, { }, { } ],\n    \"message\" : \"Cupiditate qui eligendi voluptas. Ut nobis sit facere eos sunt repellendus. Ipsum ut soluta non accusantium. Nesciunt earum dolores sequi minima. Enim voluptatem eaque facere eos saepe rerum sed.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f0d09375-bb5c-4934-8e7b-b607b1d4e096",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:35.638234Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.fields.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "32eece61-8bda-497c-8f80-0089bcb1cffb",
    "name" : "Gets a composite index.",
    "request" : {
      "urlPath" : "/v1beta2/Deonna+Klocko",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"queryScope\" : \"COLLECTION\",\n  \"name\" : \"Porsha McGlynn\",\n  \"state\" : \"READY\",\n  \"fields\" : [ {\n    \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n    \"fieldPath\" : \"fahla13jj40lxn69lh30s53o6ax2spvwwlo5ehn77imwrd93sp1p7ei3uhx9j4etteewxk5m0f12oe3rwhpmec8ag14e89\",\n    \"order\" : \"DESCENDING\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"rfnqei0ms7jl38uk9lo08uggmsqq9ksiapixukn4w1v4ixy3z2ymzststwuqb6ysgk4rutq170gzpmm1v31p8qvezj000jizmkh4ii0vkdsqd8e2cnpp7y6d7j8l934a7ghwxih3xk0tbirt3ymbd8b7dupgspkasmrn5yq0ipoo914zzj3hgusdje0cb\",\n    \"order\" : \"ORDER_UNSPECIFIED\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"sfadibj48kwrht0kkxh0vygaqib8sjcbfxo9gyjiie8o8putavs8wvybm7hfg3xhbgrmeptz666f4ealxn3ugo48hvb2e1q1m7zzsy0ytgpwqy9i9ml7iqdb\",\n    \"order\" : \"ORDER_UNSPECIFIED\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"x7imp3nayj7255355u9n716x5rjd5adyonpwj15zyz064qifbphm5ihj96ixocvt32zgh184jhp6se9m45usdmh00jft2ysm\",\n    \"order\" : \"DESCENDING\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"56v6x6ixw3bs8d6183jst65u21k6d4ungoa5k5gmaz8x4265j9ily2l9i8g1qj2\",\n    \"order\" : \"ORDER_UNSPECIFIED\"\n  }, {\n    \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n    \"fieldPath\" : \"hn0r9yijohd163ti11e0ao4fowpfrv2fqlig2ykt8qovyyai\",\n    \"order\" : \"DESCENDING\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"o75conl0qcxqttwri7nm4qf0h1nfd8229u7bdc6mj60qazox2f0vntj0m3089w1xm0fxmn9dkbpplwiddopio03zymuzwbswzd11kebdrxloef88a5hl0tad5btokn9nt0sofryjcuf05kglpvclza6\",\n    \"order\" : \"DESCENDING\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "32eece61-8bda-497c-8f80-0089bcb1cffb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:35.637991Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.get",
          "schema" : {
            "description" : "Cloud Firestore indexes enable simple and complex queries against documents in a database.",
            "properties" : {
              "fields" : {
                "description" : "The fields supported by this index. For composite indexes, this is always 2 or more fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2IndexField"
                },
                "type" : "array"
              },
              "name" : {
                "description" : "Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.",
                "type" : "string"
              },
              "queryScope" : {
                "description" : "Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.",
                "enum" : [ "QUERY_SCOPE_UNSPECIFIED", "COLLECTION", "COLLECTION_GROUP" ],
                "type" : "string"
              },
              "state" : {
                "description" : "Output only. The serving state of the index.",
                "enum" : [ "STATE_UNSPECIFIED", "CREATING", "READY", "NEEDS_REPAIR" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "abda2637-777b-4634-a29b-75ef988fa01c",
    "name" : "Deletes a composite index.",
    "request" : {
      "urlPath" : "/v1beta2/Soledad+Runolfsson+III",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "abda2637-777b-4634-a29b-75ef988fa01c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:35.637522Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 7
  } ]
}