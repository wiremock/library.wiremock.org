{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Azure Bot Service",
    "description" : "Azure Bot Service is a platform for creating smart conversational agents.",
    "version" : "2018-07-12"
  },
  "servers" : [ {
    "url" : "https://management.azure.com/"
  } ],
  "paths" : {
    "/providers/Microsoft.BotService/checkEnterpriseChannelNameAvailability" : {
      "post" : {
        "tags" : [ "Enterprise Channel" ],
        "description" : "Check whether an Enterprise Channel name is available.",
        "operationId" : "EnterpriseChannels_CheckNameAvailability",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters to provide for the Enterprise Channel check name availability request.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EnterpriseChannelCheckNameAvailabilityRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.\nThe nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility.\nFor a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnterpriseChannelCheckNameAvailabilityResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/providers/Microsoft.BotService/checkNameAvailability" : {
      "post" : {
        "tags" : [ "Bot" ],
        "description" : "Check whether a bot name is available.",
        "operationId" : "Bots_GetCheckNameAvailability",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The request body parameters to provide for the check name availability request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckNameAvailabilityRequestBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.\nThe nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility.\nFor a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckNameAvailabilityResponseBody"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/providers/Microsoft.BotService/operations" : {
      "get" : {
        "tags" : [ "Operations" ],
        "description" : "Lists all the available BotService operations.",
        "operationId" : "Operations_List",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OperationEntityListResult"
                }
              }
            }
          }
        },
        "deprecated" : false
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.BotService/botServices" : {
      "get" : {
        "tags" : [ "Bot" ],
        "description" : "Returns all the resources of a particular type belonging to a subscription.",
        "operationId" : "Bots_List",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.\nThe nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses. If a resource provider does not support paging, it should return the same body but leave nextLink empty for future compatibility.\nFor a detailed explanation of each field in the response body, please refer to the request body description in the PUT resource section. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BotResponseList"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.BotService/listAuthServiceProviders" : {
      "post" : {
        "tags" : [ "ListServiceProviders" ],
        "description" : "Lists the available Service Providers for creating Connection Settings",
        "operationId" : "BotConnection_ListServiceProviders",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "If resource is retrieved successfully, the service should return 200 (OK).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceProviderResponseList"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices" : {
      "get" : {
        "tags" : [ "Bot" ],
        "description" : "Returns all the resources of a particular type belonging to a resource group",
        "operationId" : "Bots_ListByResourceGroup",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.\nThe nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility.\nThe nextLink should be implemented using following query parameters:\n· skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink.\n· top: the optional client query parameter which defines the maximum number of records to be returned by the server.\nImplementation details:\n· NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query. \n· Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response. \nClients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BotResponseList"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}" : {
      "get" : {
        "tags" : [ "Bot" ],
        "description" : "Returns a BotService specified by the parameters.",
        "operationId" : "Bots_Get",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The resource provider should return 200 (OK) to indicate that the operation completed successfully. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bot"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Bot" ],
        "description" : "Creates a Bot Service. Bot Service is a resource group wide resource type.",
        "operationId" : "Bots_Create",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters to provide for the created bot.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Bot"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "If resource is created successfully or already existed, the service should return 200 (OK).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bot"
                }
              }
            }
          },
          "201" : {
            "description" : "If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bot"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Bot" ],
        "description" : "Deletes a Bot Service from the resource group. ",
        "operationId" : "Bots_Delete",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A 200 (OK) should be returned if the object exists and was deleted successfully;"
          },
          "204" : {
            "description" : "a 204 (NoContent) should be used if the resource does not exist and the request is well formed."
          },
          "default" : {
            "description" : "Error response describing why the operation failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Bot" ],
        "description" : "Updates a Bot Service",
        "operationId" : "Bots_Update",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters to provide for the created bot.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Bot"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The resource provider should return 200 (OK) to indicate that the operation completed successfully. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bot"
                }
              }
            }
          },
          "201" : {
            "description" : "If resource is updated successfully, the service should return 201 (Created). Execution to continue asynchronously.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bot"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}" : {
      "get" : {
        "tags" : [ "BotConnection" ],
        "description" : "Get a Connection Setting registration for a Bot Service",
        "operationId" : "BotConnection_Get",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "connectionName",
          "in" : "path",
          "description" : "The name of the Bot Service Connection Setting resource",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The resource provider should return 200 (OK) to indicate that the operation completed successfully. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectionSetting"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "BotConnection" ],
        "description" : "Register a new Auth Connection for a Bot Service",
        "operationId" : "BotConnection_Create",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "connectionName",
          "in" : "path",
          "description" : "The name of the Bot Service Connection Setting resource",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters to provide for creating the Connection Setting.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectionSetting"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "If resource is created successfully or already existed, the service should return 200 (OK).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectionSetting"
                }
              }
            }
          },
          "201" : {
            "description" : "If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectionSetting"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "BotConnection" ],
        "description" : "Deletes a Connection Setting registration for a Bot Service",
        "operationId" : "BotConnection_Delete",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "connectionName",
          "in" : "path",
          "description" : "The name of the Bot Service Connection Setting resource",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A 200 (OK) should be returned if the object exists and was deleted successfully;"
          },
          "204" : {
            "description" : "a 204 (NoContent) should be used if the resource does not exist and the request is well formed."
          },
          "default" : {
            "description" : "Error response describing why the operation failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "BotConnection" ],
        "description" : "Updates a Connection Setting registration for a Bot Service",
        "operationId" : "BotConnection_Update",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "connectionName",
          "in" : "path",
          "description" : "The name of the Bot Service Connection Setting resource",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters to provide for updating the Connection Setting.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectionSetting"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "If resource is created successfully or already existed, the service should return 200 (OK).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectionSetting"
                }
              }
            }
          },
          "201" : {
            "description" : "If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectionSetting"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}/listWithSecrets" : {
      "post" : {
        "tags" : [ "BotConnection" ],
        "description" : "Get a Connection Setting registration for a Bot Service",
        "operationId" : "BotConnection_ListWithSecrets",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "connectionName",
          "in" : "path",
          "description" : "The name of the Bot Service Connection Setting resource",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The resource provider should return 200 (OK) to indicate that the operation completed successfully. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectionSetting"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels" : {
      "get" : {
        "tags" : [ "Channel" ],
        "description" : "Returns all the Channel registrations of a particular BotService resource",
        "operationId" : "Channels_ListByResourceGroup",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.\nThe nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility.\nThe nextLink should be implemented using following query parameters:\n· skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink.\n· top: the optional client query parameter which defines the maximum number of records to be returned by the server.\nImplementation details:\n· NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query. \n· Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response. \nClients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChannelResponseList"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}" : {
      "get" : {
        "tags" : [ "Channel" ],
        "description" : "Returns a BotService Channel registration specified by the parameters.",
        "operationId" : "Channels_Get",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "channelName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The resource provider should return 200 (OK) to indicate that the operation completed successfully. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BotChannel"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Channel" ],
        "description" : "Creates a Channel registration for a Bot Service",
        "operationId" : "Channels_Create",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "channelName",
          "in" : "path",
          "description" : "The name of the Channel resource.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "FacebookChannel", "EmailChannel", "KikChannel", "TelegramChannel", "SlackChannel", "MsTeamsChannel", "SkypeChannel", "WebChatChannel", "DirectLineChannel", "SmsChannel" ]
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters to provide for the created bot.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BotChannel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "If resource is created successfully or already existed, the service should return 200 (OK).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BotChannel"
                }
              }
            }
          },
          "201" : {
            "description" : "If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BotChannel"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Channel" ],
        "description" : "Deletes a Channel registration from a Bot Service",
        "operationId" : "Channels_Delete",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "channelName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A 200 (OK) should be returned if the object exists and was deleted successfully;"
          },
          "204" : {
            "description" : "a 204 (NoContent) should be used if the resource does not exist and the request is well formed."
          },
          "default" : {
            "description" : "Error response describing why the operation failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Channel" ],
        "description" : "Updates a Channel registration for a Bot Service",
        "operationId" : "Channels_Update",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "channelName",
          "in" : "path",
          "description" : "The name of the Channel resource.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "FacebookChannel", "EmailChannel", "KikChannel", "TelegramChannel", "SlackChannel", "MsTeamsChannel", "SkypeChannel", "WebChatChannel", "DirectLineChannel", "SmsChannel" ]
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters to provide for the created bot.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BotChannel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The resource provider should return 200 (OK) to indicate that the operation completed successfully. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BotChannel"
                }
              }
            }
          },
          "201" : {
            "description" : "If resource is updated successfully, the service should return 201 (Created). Execution to continue asynchronously.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BotChannel"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}/listChannelWithKeys" : {
      "post" : {
        "tags" : [ "Channel" ],
        "description" : "Lists a Channel registration for a Bot Service including secrets",
        "operationId" : "Channels_ListWithKeys",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "channelName",
          "in" : "path",
          "description" : "The name of the Channel resource.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "FacebookChannel", "EmailChannel", "KikChannel", "TelegramChannel", "SlackChannel", "MsTeamsChannel", "SkypeChannel", "WebChatChannel", "DirectLineChannel", "SmsChannel" ]
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "If resource is retrieved successfully, the service should return 200 (OK).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BotChannel"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections" : {
      "get" : {
        "tags" : [ "BotConnection" ],
        "description" : "Returns all the Connection Settings registered to a particular BotService resource",
        "operationId" : "BotConnection_ListByBotService",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.\nThe nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility.\nThe nextLink should be implemented using following query parameters:\n· skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink.\n· top: the optional client query parameter which defines the maximum number of records to be returned by the server.\nImplementation details:\n· NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query. \n· Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response. \nClients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectionSettingResponseList"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels" : {
      "get" : {
        "tags" : [ "Enterprise Channel" ],
        "description" : "Returns all the resources of a particular type belonging to a resource group.",
        "operationId" : "EnterpriseChannels_ListByResourceGroup",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The resource provider should return 200 (OK) to indicate that the operation completed successfully. For other errors (e.g. internal errors) use the appropriate HTTP error code.\nThe nextLink field is expected to point to the URL the client should use to fetch the next page (per server side paging). This matches the OData guidelines for paged responses here. If a resource provider does not support paging, it should return the same body (JSON object with “value” property) but omit nextLink entirely (or set to null, *not* empty string) for future compatibility.\nThe nextLink should be implemented using following query parameters:\n· skipToken: opaque token that allows the resource provider to skip resources already enumerated. This value is defined and returned by the RP after first request via nextLink.\n· top: the optional client query parameter which defines the maximum number of records to be returned by the server.\nImplementation details:\n· NextLink may include all the query parameters (specifically OData $filter) used by the client in the first query. \n· Server may return less records than requested with nextLink. Returning zero records with NextLink is an acceptable response. \nClients must fetch records until the nextLink is not returned back / null. Clients should never rely on number of returned records to determinate if pagination is completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnterpriseChannelResponseList"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the resource group does not exist, 404 (NotFound) will be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}" : {
      "get" : {
        "tags" : [ "Enterprise Channel" ],
        "description" : "Returns an Enterprise Channel specified by the parameters.",
        "operationId" : "EnterpriseChannels_Get",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The resource provider should return 200 (OK) to indicate that the operation completed successfully. ",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnterpriseChannel"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the resource group *or* resource does not exist, 404 (NotFound) should be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Enterprise Channel" ],
        "description" : "Creates an Enterprise Channel.",
        "operationId" : "EnterpriseChannels_Create",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters to provide for the new Enterprise Channel.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EnterpriseChannel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "If resource is created successfully or already existed, the service should return 200 (OK).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnterpriseChannel"
                }
              }
            }
          },
          "201" : {
            "description" : "If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnterpriseChannel"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Enterprise Channel" ],
        "description" : "Deletes an Enterprise Channel from the resource group",
        "operationId" : "EnterpriseChannels_Delete",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A 200 (OK) should be returned if the object exists and was deleted successfully;"
          },
          "204" : {
            "description" : "a 204 (NoContent) should be used if the resource does not exist and the request is well formed."
          },
          "default" : {
            "description" : "Error response describing why the operation failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Enterprise Channel" ],
        "description" : "Updates an Enterprise Channel.",
        "operationId" : "EnterpriseChannels_Update",
        "parameters" : [ {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the Bot resource group in the user subscription.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the Bot resource.",
          "required" : true,
          "schema" : {
            "maxLength" : 64,
            "minLength" : 2,
            "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "Version of the API to be used with the client request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Azure Subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters to provide to update the Enterprise Channel.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EnterpriseChannel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "If resource is created successfully or already existed, the service should return 200 (OK).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnterpriseChannel"
                }
              }
            }
          },
          "201" : {
            "description" : "If resource is created successfully, the service should return 201 (Created). Execution to continue asynchronously.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnterpriseChannel"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Bot" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/BotProperties"
          }
        },
        "description" : "Bot resource definition",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Resource"
        } ]
      },
      "BotChannel" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/Channel"
          }
        },
        "description" : "Bot channel resource definition",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Resource"
        } ]
      },
      "BotProperties" : {
        "required" : [ "displayName", "endpoint", "msaAppId" ],
        "type" : "object",
        "properties" : {
          "configuredChannels" : {
            "type" : "array",
            "description" : "Collection of channels for which the bot is configured",
            "readOnly" : true,
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the bot"
          },
          "developerAppInsightKey" : {
            "type" : "string",
            "description" : "The Application Insights key"
          },
          "developerAppInsightsApiKey" : {
            "type" : "string",
            "description" : "The Application Insights Api Key"
          },
          "developerAppInsightsApplicationId" : {
            "type" : "string",
            "description" : "The Application Insights App Id"
          },
          "displayName" : {
            "type" : "string",
            "description" : "The Name of the bot"
          },
          "enabledChannels" : {
            "type" : "array",
            "description" : "Collection of channels for which the bot is enabled",
            "readOnly" : true,
            "items" : {
              "type" : "string"
            }
          },
          "endpoint" : {
            "type" : "string",
            "description" : "The bot's endpoint"
          },
          "endpointVersion" : {
            "type" : "string",
            "description" : "The bot's endpoint version",
            "readOnly" : true
          },
          "iconUrl" : {
            "type" : "string",
            "description" : "The Icon Url of the bot"
          },
          "luisAppIds" : {
            "type" : "array",
            "description" : "Collection of LUIS App Ids",
            "items" : {
              "type" : "string"
            }
          },
          "luisKey" : {
            "type" : "string",
            "description" : "The LUIS Key"
          },
          "msaAppId" : {
            "type" : "string",
            "description" : "Microsoft App Id for the bot"
          }
        },
        "description" : "The parameters to provide for the Bot."
      },
      "BotResponseList" : {
        "type" : "object",
        "properties" : {
          "nextLink" : {
            "type" : "string",
            "description" : "The link used to get the next page of bot service resources."
          },
          "value" : {
            "type" : "array",
            "description" : "Gets the list of bot service results and their properties.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Bot"
            }
          }
        },
        "description" : "The list of  bot service operation response."
      },
      "Channel" : {
        "required" : [ "channelName" ],
        "type" : "object",
        "properties" : {
          "channelName" : {
            "type" : "string",
            "description" : "The channel name"
          }
        },
        "description" : "Channel definition",
        "discriminator" : {
          "propertyName" : "channelName"
        }
      },
      "ChannelResponseList" : {
        "type" : "object",
        "properties" : {
          "nextLink" : {
            "type" : "string",
            "description" : "The link used to get the next page of bot service channel resources."
          },
          "value" : {
            "type" : "array",
            "description" : "Gets the list of bot service channel results and their properties.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/BotChannel"
            }
          }
        },
        "description" : "The list of bot service channel operation response."
      },
      "CheckNameAvailabilityRequestBody" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "the name of the bot for which availability needs to be checked."
          },
          "type" : {
            "type" : "string",
            "description" : "the type of the bot for which availability needs to be checked"
          }
        },
        "description" : "The request body for a request to Bot Service Management to check availability of a bot name."
      },
      "CheckNameAvailabilityResponseBody" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "additional message from the bot management api showing why a bot name is not available"
          },
          "valid" : {
            "type" : "boolean",
            "description" : "indicates if the bot name is valid."
          }
        },
        "description" : "The response body returned for a request to Bot Service Management to check availability of a bot name."
      },
      "ConnectionItemName" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Connection Item name that has been added in the API",
            "readOnly" : true
          }
        },
        "description" : "The display name of a connection Item Setting registered with the Bot"
      },
      "ConnectionSetting" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/ConnectionSettingProperties"
          }
        },
        "description" : "Bot channel resource definition",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Resource"
        } ]
      },
      "ConnectionSettingParameter" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "Key for the Connection Setting Parameter."
          },
          "value" : {
            "type" : "string",
            "description" : "Value associated with the Connection Setting Parameter."
          }
        },
        "description" : "Extra Parameter in a Connection Setting Properties to indicate service provider specific properties"
      },
      "ConnectionSettingProperties" : {
        "type" : "object",
        "properties" : {
          "clientId" : {
            "type" : "string",
            "description" : "Client Id associated with the Connection Setting."
          },
          "clientSecret" : {
            "type" : "string",
            "description" : "Client Secret associated with the Connection Setting"
          },
          "parameters" : {
            "type" : "array",
            "description" : "Service Provider Parameters associated with the Connection Setting",
            "items" : {
              "$ref" : "#/components/schemas/ConnectionSettingParameter"
            }
          },
          "scopes" : {
            "type" : "string",
            "description" : "Scopes associated with the Connection Setting"
          },
          "serviceProviderDisplayName" : {
            "type" : "string",
            "description" : "Service Provider Display Name associated with the Connection Setting"
          },
          "serviceProviderId" : {
            "type" : "string",
            "description" : "Service Provider Id associated with the Connection Setting"
          },
          "settingId" : {
            "type" : "string",
            "description" : "Setting Id set by the service for the Connection Setting.",
            "readOnly" : true
          }
        },
        "description" : "Properties for a Connection Setting Item"
      },
      "ConnectionSettingResponseList" : {
        "type" : "object",
        "properties" : {
          "nextLink" : {
            "type" : "string",
            "description" : "The link used to get the next page of bot service connection setting resources."
          },
          "value" : {
            "type" : "array",
            "description" : "Gets the list of bot service connection settings and their properties.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ConnectionSetting"
            }
          }
        },
        "description" : "The list of bot service connection settings response."
      },
      "DirectLineChannel" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/DirectLineChannelProperties"
          }
        },
        "description" : "Direct Line channel definition",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Channel"
        } ]
      },
      "DirectLineChannelProperties" : {
        "type" : "object",
        "properties" : {
          "sites" : {
            "type" : "array",
            "description" : "The list of Direct Line sites",
            "items" : {
              "$ref" : "#/components/schemas/DirectLineSite"
            }
          }
        },
        "description" : "The parameters to provide for the Direct Line channel."
      },
      "DirectLineSite" : {
        "required" : [ "isEnabled", "isV1Enabled", "isV3Enabled", "siteName" ],
        "type" : "object",
        "properties" : {
          "isEnabled" : {
            "type" : "boolean",
            "description" : "Whether this site is enabled for DirectLine channel."
          },
          "isSecureSiteEnabled" : {
            "type" : "boolean",
            "description" : "Whether this site is enabled for authentication with Bot Framework."
          },
          "isV1Enabled" : {
            "type" : "boolean",
            "description" : "Whether this site is enabled for Bot Framework V1 protocol."
          },
          "isV3Enabled" : {
            "type" : "boolean",
            "description" : "Whether this site is enabled for Bot Framework V1 protocol."
          },
          "key" : {
            "type" : "string",
            "description" : "Primary key. Value only returned through POST to the action Channel List API, otherwise empty.",
            "readOnly" : true
          },
          "key2" : {
            "type" : "string",
            "description" : "Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.",
            "readOnly" : true
          },
          "siteId" : {
            "type" : "string",
            "description" : "Site Id",
            "readOnly" : true
          },
          "siteName" : {
            "type" : "string",
            "description" : "Site name"
          },
          "trustedOrigins" : {
            "type" : "array",
            "description" : "List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.",
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "A site for the Direct Line channel"
      },
      "EmailChannel" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/EmailChannelProperties"
          }
        },
        "description" : "Email channel definition",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Channel"
        } ]
      },
      "EmailChannelProperties" : {
        "required" : [ "emailAddress", "isEnabled", "password" ],
        "type" : "object",
        "properties" : {
          "emailAddress" : {
            "type" : "string",
            "description" : "The email address"
          },
          "isEnabled" : {
            "type" : "boolean",
            "description" : "Whether this channel is enabled for the bot"
          },
          "password" : {
            "type" : "string",
            "description" : "The password for the email address. Value only returned through POST to the action Channel List API, otherwise empty."
          }
        },
        "description" : "The parameters to provide for the Email channel."
      },
      "EnterpriseChannel" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/EnterpriseChannelProperties"
          }
        },
        "description" : "Enterprise Channel resource definition",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Resource"
        } ]
      },
      "EnterpriseChannelCheckNameAvailabilityRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the Enterprise Channel for which availability needs to be checked."
          }
        },
        "description" : "A request to Bot Service Management to check availability of an Enterprise Channel name."
      },
      "EnterpriseChannelCheckNameAvailabilityResponse" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "Additional information about why a bot name is not available."
          },
          "valid" : {
            "type" : "boolean",
            "description" : "Indicates if the Enterprise Channel name is valid."
          }
        },
        "description" : "A request to Bot Service Management to check availability of an Enterprise Channel name."
      },
      "EnterpriseChannelNode" : {
        "required" : [ "azureLocation", "azureSku", "name" ],
        "type" : "object",
        "properties" : {
          "azureLocation" : {
            "type" : "string",
            "description" : "The location of the Enterprise Channel Node."
          },
          "azureSku" : {
            "type" : "string",
            "description" : "The sku of the Enterprise Channel Node."
          },
          "id" : {
            "type" : "string",
            "description" : "Id of Enterprise Channel Node. This is generated by the Bot Framework.",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the Enterprise Channel Node."
          },
          "state" : {
            "type" : "string",
            "description" : "The current state of the Enterprise Channel Node.",
            "enum" : [ "Creating", "CreateFailed", "Started", "Starting", "StartFailed", "Stopped", "Stopping", "StopFailed", "Deleting", "DeleteFailed" ]
          }
        },
        "description" : "The properties specific to an Enterprise Channel Node."
      },
      "EnterpriseChannelProperties" : {
        "required" : [ "nodes" ],
        "type" : "object",
        "properties" : {
          "nodes" : {
            "type" : "array",
            "description" : "The nodes associated with the Enterprise Channel.",
            "items" : {
              "$ref" : "#/components/schemas/EnterpriseChannelNode"
            }
          },
          "state" : {
            "type" : "string",
            "description" : "The current state of the Enterprise Channel.",
            "enum" : [ "Creating", "CreateFailed", "Started", "Starting", "StartFailed", "Stopped", "Stopping", "StopFailed", "Deleting", "DeleteFailed" ]
          }
        },
        "description" : "The parameters to provide for the Enterprise Channel."
      },
      "EnterpriseChannelResponseList" : {
        "type" : "object",
        "properties" : {
          "nextLink" : {
            "type" : "string",
            "description" : "The link used to get the next page of bot service resources."
          },
          "value" : {
            "type" : "array",
            "description" : "The list of Enterprise Channels and their properties.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/EnterpriseChannel"
            }
          }
        },
        "description" : "The list of  bot service operation response."
      },
      "Error" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "$ref" : "#/components/schemas/ErrorBody"
          }
        },
        "description" : "Bot Service error object."
      },
      "ErrorBody" : {
        "required" : [ "code", "message" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "error code"
          },
          "message" : {
            "type" : "string",
            "description" : "error message"
          }
        },
        "description" : "Bot Service error body."
      },
      "FacebookChannel" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/FacebookChannelProperties"
          }
        },
        "description" : "Facebook channel definition",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Channel"
        } ]
      },
      "FacebookChannelProperties" : {
        "required" : [ "appId", "appSecret", "isEnabled" ],
        "type" : "object",
        "properties" : {
          "appId" : {
            "type" : "string",
            "description" : "Facebook application id"
          },
          "appSecret" : {
            "type" : "string",
            "description" : "Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty."
          },
          "callbackUrl" : {
            "type" : "string",
            "description" : "Callback Url",
            "readOnly" : true
          },
          "isEnabled" : {
            "type" : "boolean",
            "description" : "Whether this channel is enabled for the bot"
          },
          "pages" : {
            "type" : "array",
            "description" : "The list of Facebook pages",
            "items" : {
              "$ref" : "#/components/schemas/FacebookPage"
            }
          },
          "verifyToken" : {
            "type" : "string",
            "description" : "Verify token. Value only returned through POST to the action Channel List API, otherwise empty.",
            "readOnly" : true
          }
        },
        "description" : "The parameters to provide for the Facebook channel."
      },
      "FacebookPage" : {
        "required" : [ "accessToken", "id" ],
        "type" : "object",
        "properties" : {
          "accessToken" : {
            "type" : "string",
            "description" : "Facebook application access token. Value only returned through POST to the action Channel List API, otherwise empty."
          },
          "id" : {
            "type" : "string",
            "description" : "Page id"
          }
        },
        "description" : "A Facebook page for Facebook channel registration"
      },
      "KikChannel" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/KikChannelProperties"
          }
        },
        "description" : "Kik channel definition",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Channel"
        } ]
      },
      "KikChannelProperties" : {
        "required" : [ "apiKey", "isEnabled", "userName" ],
        "type" : "object",
        "properties" : {
          "apiKey" : {
            "type" : "string",
            "description" : "Kik API key. Value only returned through POST to the action Channel List API, otherwise empty."
          },
          "isEnabled" : {
            "type" : "boolean",
            "description" : "Whether this channel is enabled for the bot"
          },
          "isValidated" : {
            "type" : "boolean",
            "description" : "Whether this channel is validated for the bot"
          },
          "userName" : {
            "type" : "string",
            "description" : "The Kik user name"
          }
        },
        "description" : "The parameters to provide for the Kik channel."
      },
      "Kind" : {
        "type" : "string",
        "description" : "Indicates the type of bot service",
        "enum" : [ "sdk", "designer", "bot", "function" ]
      },
      "MsTeamsChannel" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/MsTeamsChannelProperties"
          }
        },
        "description" : "Microsoft Teams channel definition",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Channel"
        } ]
      },
      "MsTeamsChannelProperties" : {
        "required" : [ "isEnabled" ],
        "type" : "object",
        "properties" : {
          "callingWebHook" : {
            "type" : "string",
            "description" : "Webhook for Microsoft Teams channel calls"
          },
          "enableCalling" : {
            "type" : "boolean",
            "description" : "Enable calling for Microsoft Teams channel"
          },
          "isEnabled" : {
            "type" : "boolean",
            "description" : "Whether this channel is enabled for the bot"
          }
        },
        "description" : "The parameters to provide for the Microsoft Teams channel."
      },
      "OperationDisplayInfo" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of the operation."
          },
          "operation" : {
            "type" : "string",
            "description" : "The action that users can perform, based on their permission level."
          },
          "provider" : {
            "type" : "string",
            "description" : "Service provider: Microsoft Bot Service."
          },
          "resource" : {
            "type" : "string",
            "description" : "Resource on which the operation is performed."
          }
        },
        "description" : "The operation supported by Bot Service Management."
      },
      "OperationEntity" : {
        "type" : "object",
        "properties" : {
          "display" : {
            "$ref" : "#/components/schemas/OperationDisplayInfo"
          },
          "name" : {
            "type" : "string",
            "description" : "Operation name: {provider}/{resource}/{operation}."
          },
          "origin" : {
            "type" : "string",
            "description" : "The origin of the operation."
          },
          "properties" : {
            "type" : "object",
            "description" : "Additional properties."
          }
        },
        "description" : "The operations supported by Bot Service Management."
      },
      "OperationEntityListResult" : {
        "type" : "object",
        "properties" : {
          "nextLink" : {
            "type" : "string",
            "description" : "The link used to get the next page of operations."
          },
          "value" : {
            "type" : "array",
            "description" : "The list of operations.",
            "items" : {
              "$ref" : "#/components/schemas/OperationEntity"
            }
          }
        },
        "description" : "The list of bot service operation response."
      },
      "Resource" : {
        "type" : "object",
        "properties" : {
          "etag" : {
            "type" : "string",
            "description" : "Entity Tag"
          },
          "id" : {
            "type" : "string",
            "description" : "Specifies the resource ID.",
            "readOnly" : true
          },
          "kind" : {
            "$ref" : "#/components/schemas/Kind"
          },
          "location" : {
            "type" : "string",
            "description" : "Specifies the location of the resource."
          },
          "name" : {
            "type" : "string",
            "description" : "Specifies the name of the resource.",
            "readOnly" : true
          },
          "sku" : {
            "$ref" : "#/components/schemas/Sku"
          },
          "tags" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Contains resource tags defined as key/value pairs."
          },
          "type" : {
            "type" : "string",
            "description" : "Specifies the type of the resource.",
            "readOnly" : true
          }
        },
        "description" : "Azure resource"
      },
      "ServiceProvider" : {
        "type" : "object",
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/ServiceProviderProperties"
          }
        },
        "description" : "Service Provider Definition"
      },
      "ServiceProviderParameter" : {
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "string",
            "description" : "Default Name for the Service Provider",
            "readOnly" : true
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the Service Provider",
            "readOnly" : true
          },
          "displayName" : {
            "type" : "string",
            "description" : "Display Name of the Service Provider",
            "readOnly" : true
          },
          "helpUrl" : {
            "type" : "string",
            "description" : "Help Url for the  Service Provider",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the Service Provider",
            "readOnly" : true
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the Service Provider",
            "readOnly" : true
          }
        },
        "description" : "Extra Parameters specific to each Service Provider"
      },
      "ServiceProviderProperties" : {
        "type" : "object",
        "properties" : {
          "devPortalUrl" : {
            "type" : "string",
            "description" : "Display Name of the Service Provider",
            "readOnly" : true
          },
          "displayName" : {
            "type" : "string",
            "description" : "Display Name of the Service Provider",
            "readOnly" : true
          },
          "iconUrl" : {
            "type" : "string",
            "description" : "Display Name of the Service Provider",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "Id for Service Provider",
            "readOnly" : true
          },
          "parameters" : {
            "type" : "array",
            "description" : "The list of parameters for the Service Provider",
            "items" : {
              "$ref" : "#/components/schemas/ServiceProviderParameter"
            }
          },
          "serviceProviderName" : {
            "type" : "string",
            "description" : "Display Name of the Service Provider",
            "readOnly" : true
          }
        },
        "description" : "The Object used to describe a Service Provider supported by Bot Service"
      },
      "ServiceProviderResponseList" : {
        "type" : "object",
        "properties" : {
          "nextLink" : {
            "type" : "string",
            "description" : "The link used to get the next page of bot service providers."
          },
          "value" : {
            "type" : "array",
            "description" : "Gets the list of bot service providers and their properties.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ServiceProvider"
            }
          }
        },
        "description" : "The list of bot service providers response."
      },
      "Sku" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/SkuName"
          },
          "tier" : {
            "type" : "string",
            "description" : "Gets the sku tier. This is based on the SKU name.",
            "readOnly" : true,
            "enum" : [ "Free", "Standard" ]
          }
        },
        "description" : "The SKU of the cognitive services account."
      },
      "SkuName" : {
        "type" : "string",
        "description" : "The name of SKU.",
        "enum" : [ "F0", "S1" ]
      },
      "SkypeChannel" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/SkypeChannelProperties"
          }
        },
        "description" : "Skype channel definition",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Channel"
        } ]
      },
      "SkypeChannelProperties" : {
        "required" : [ "isEnabled" ],
        "type" : "object",
        "properties" : {
          "callingWebHook" : {
            "type" : "string",
            "description" : "Calling web hook for Skype channel"
          },
          "enableCalling" : {
            "type" : "boolean",
            "description" : "Enable calling for Skype channel"
          },
          "enableGroups" : {
            "type" : "boolean",
            "description" : "Enable groups for Skype channel"
          },
          "enableMediaCards" : {
            "type" : "boolean",
            "description" : "Enable media cards for Skype channel"
          },
          "enableMessaging" : {
            "type" : "boolean",
            "description" : "Enable messaging for Skype channel"
          },
          "enableScreenSharing" : {
            "type" : "boolean",
            "description" : "Enable screen sharing for Skype channel"
          },
          "enableVideo" : {
            "type" : "boolean",
            "description" : "Enable video for Skype channel"
          },
          "groupsMode" : {
            "type" : "string",
            "description" : "Group mode for Skype channel"
          },
          "isEnabled" : {
            "type" : "boolean",
            "description" : "Whether this channel is enabled for the bot"
          }
        },
        "description" : "The parameters to provide for the Microsoft Teams channel."
      },
      "SlackChannel" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/SlackChannelProperties"
          }
        },
        "description" : "Slack channel definition",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Channel"
        } ]
      },
      "SlackChannelProperties" : {
        "required" : [ "clientId", "clientSecret", "isEnabled", "verificationToken" ],
        "type" : "object",
        "properties" : {
          "clientId" : {
            "type" : "string",
            "description" : "The Slack client id"
          },
          "clientSecret" : {
            "type" : "string",
            "description" : "The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty."
          },
          "isEnabled" : {
            "type" : "boolean",
            "description" : "Whether this channel is enabled for the bot"
          },
          "isValidated" : {
            "type" : "boolean",
            "description" : "Whether this channel is validated for the bot",
            "readOnly" : true
          },
          "landingPageUrl" : {
            "type" : "string",
            "description" : "The Slack landing page Url"
          },
          "lastSubmissionId" : {
            "type" : "string",
            "description" : "The Sms auth token",
            "readOnly" : true
          },
          "redirectAction" : {
            "type" : "string",
            "description" : "The Slack redirect action",
            "readOnly" : true
          },
          "registerBeforeOAuthFlow" : {
            "type" : "boolean",
            "description" : "Whether to register the settings before OAuth validation is performed. Recommended to True.",
            "readOnly" : true
          },
          "verificationToken" : {
            "type" : "string",
            "description" : "The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty."
          }
        },
        "description" : "The parameters to provide for the Slack channel."
      },
      "SmsChannel" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/SmsChannelProperties"
          }
        },
        "description" : "Sms channel definition",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Channel"
        } ]
      },
      "SmsChannelProperties" : {
        "required" : [ "accountSID", "authToken", "isEnabled", "phone" ],
        "type" : "object",
        "properties" : {
          "accountSID" : {
            "type" : "string",
            "description" : "The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty."
          },
          "authToken" : {
            "type" : "string",
            "description" : "The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty."
          },
          "isEnabled" : {
            "type" : "boolean",
            "description" : "Whether this channel is enabled for the bot"
          },
          "isValidated" : {
            "type" : "boolean",
            "description" : "Whether this channel is validated for the bot"
          },
          "phone" : {
            "type" : "string",
            "description" : "The Sms phone"
          }
        },
        "description" : "The parameters to provide for the Sms channel."
      },
      "TelegramChannel" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/TelegramChannelProperties"
          }
        },
        "description" : "Telegram channel definition",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Channel"
        } ]
      },
      "TelegramChannelProperties" : {
        "required" : [ "accessToken", "isEnabled" ],
        "type" : "object",
        "properties" : {
          "accessToken" : {
            "type" : "string",
            "description" : "The Telegram access token. Value only returned through POST to the action Channel List API, otherwise empty."
          },
          "isEnabled" : {
            "type" : "boolean",
            "description" : "Whether this channel is enabled for the bot"
          },
          "isValidated" : {
            "type" : "boolean",
            "description" : "Whether this channel is validated for the bot"
          }
        },
        "description" : "The parameters to provide for the Telegram channel."
      },
      "WebChatChannel" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/WebChatChannelProperties"
          }
        },
        "description" : "Web Chat channel definition",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Channel"
        } ]
      },
      "WebChatChannelProperties" : {
        "type" : "object",
        "properties" : {
          "sites" : {
            "type" : "array",
            "description" : "The list of Web Chat sites",
            "items" : {
              "$ref" : "#/components/schemas/WebChatSite"
            }
          },
          "webChatEmbedCode" : {
            "type" : "string",
            "description" : "Web chat control embed code",
            "readOnly" : true
          }
        },
        "description" : "The parameters to provide for the Web Chat channel."
      },
      "WebChatSite" : {
        "required" : [ "enablePreview", "isEnabled", "siteName" ],
        "type" : "object",
        "properties" : {
          "enablePreview" : {
            "type" : "boolean",
            "description" : "Whether this site is enabled for preview versions of Webchat"
          },
          "isEnabled" : {
            "type" : "boolean",
            "description" : "Whether this site is enabled for DirectLine channel"
          },
          "key" : {
            "type" : "string",
            "description" : "Primary key. Value only returned through POST to the action Channel List API, otherwise empty.",
            "readOnly" : true
          },
          "key2" : {
            "type" : "string",
            "description" : "Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.",
            "readOnly" : true
          },
          "siteId" : {
            "type" : "string",
            "description" : "Site Id",
            "readOnly" : true
          },
          "siteName" : {
            "type" : "string",
            "description" : "Site name"
          }
        },
        "description" : "A site for the Webchat channel"
      }
    },
    "parameters" : {
      "apiVersionParameter" : {
        "name" : "api-version",
        "in" : "query",
        "description" : "Version of the API to be used with the client request.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "channelNameParameter" : {
        "name" : "channelName",
        "in" : "path",
        "description" : "The name of the Channel resource.",
        "required" : true,
        "schema" : {
          "type" : "string",
          "enum" : [ "FacebookChannel", "EmailChannel", "KikChannel", "TelegramChannel", "SlackChannel", "MsTeamsChannel", "SkypeChannel", "WebChatChannel", "DirectLineChannel", "SmsChannel" ]
        }
      },
      "connectionNameParameter" : {
        "name" : "connectionName",
        "in" : "path",
        "description" : "The name of the Bot Service Connection Setting resource",
        "required" : true,
        "schema" : {
          "maxLength" : 64,
          "minLength" : 2,
          "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
          "type" : "string"
        }
      },
      "resourceGroupNameParameter" : {
        "name" : "resourceGroupName",
        "in" : "path",
        "description" : "The name of the Bot resource group in the user subscription.",
        "required" : true,
        "schema" : {
          "maxLength" : 64,
          "minLength" : 2,
          "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
          "type" : "string"
        }
      },
      "resourceNameParameter" : {
        "name" : "resourceName",
        "in" : "path",
        "description" : "The name of the Bot resource.",
        "required" : true,
        "schema" : {
          "maxLength" : 64,
          "minLength" : 2,
          "pattern" : "^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
          "type" : "string"
        }
      },
      "subscriptionIdParameter" : {
        "name" : "subscriptionId",
        "in" : "path",
        "description" : "Azure Subscription ID.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      }
    },
    "securitySchemes" : {
      "azure_auth" : {
        "type" : "oauth2",
        "description" : "Azure Active Directory OAuth2 Flow"
      }
    }
  }
}