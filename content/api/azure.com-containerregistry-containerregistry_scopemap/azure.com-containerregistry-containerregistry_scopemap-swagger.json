{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "ContainerRegistryManagementClient",
    "version" : "2019-05-01-preview"
  },
  "servers" : [ {
    "url" : "https://management.azure.com/"
  } ],
  "security" : [ {
    "azure_auth" : [ "user_impersonation" ]
  } ],
  "paths" : {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/generateCredentials" : {
      "post" : {
        "tags" : [ "Registries" ],
        "description" : "Generate keys for a token of a specified container registry.",
        "operationId" : "Registries_GenerateCredentials",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters for generating credentials.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GenerateCredentialsParameters"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenerateCredentialsResult"
                }
              }
            }
          },
          "202" : {
            "description" : "The request was successful; the operation will complete asynchronously."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps" : {
      "get" : {
        "tags" : [ "ScopeMaps" ],
        "description" : "Lists all the scope maps for the specified container registry.",
        "operationId" : "ScopeMaps_List",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScopeMapListResult"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}" : {
      "get" : {
        "tags" : [ "ScopeMaps" ],
        "description" : "Gets the properties of the specified scope map.",
        "operationId" : "ScopeMaps_Get",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "scopeMapName",
          "in" : "path",
          "description" : "The name of the scope map.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9-_]*$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScopeMap"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ScopeMaps" ],
        "description" : "Creates a scope map for a container registry with the specified parameters.",
        "operationId" : "ScopeMaps_Create",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "scopeMapName",
          "in" : "path",
          "description" : "The name of the scope map.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9-_]*$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters for creating a scope map.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScopeMap"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScopeMap"
                }
              }
            }
          },
          "201" : {
            "description" : "The request was successful; the operation will complete asynchronously.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScopeMap"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ScopeMaps" ],
        "description" : "Deletes a scope map from a container registry.",
        "operationId" : "ScopeMaps_Delete",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "scopeMapName",
          "in" : "path",
          "description" : "The name of the scope map.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9-_]*$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly."
          },
          "202" : {
            "description" : "The request was successful; the operation will complete asynchronously."
          },
          "204" : {
            "description" : "The scopemap does not exist in the subscription."
          }
        }
      },
      "patch" : {
        "tags" : [ "ScopeMaps" ],
        "description" : "Updates a scope map with the specified parameters.",
        "operationId" : "ScopeMaps_Update",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "scopeMapName",
          "in" : "path",
          "description" : "The name of the scope map.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9-_]*$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters for updating a scope map.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScopeMapUpdateParameters"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScopeMap"
                }
              }
            }
          },
          "201" : {
            "description" : "The request was successful; the operation will complete asynchronously.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScopeMap"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens" : {
      "get" : {
        "tags" : [ "Tokens" ],
        "description" : "Lists all the tokens for the specified container registry.",
        "operationId" : "Tokens_List",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenListResult"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}" : {
      "get" : {
        "tags" : [ "Tokens" ],
        "description" : "Gets the properties of the specified token.",
        "operationId" : "Tokens_Get",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "tokenName",
          "in" : "path",
          "description" : "The name of the token.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9-]*$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Tokens" ],
        "description" : "Creates a token for a container registry with the specified parameters.",
        "operationId" : "Tokens_Create",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "tokenName",
          "in" : "path",
          "description" : "The name of the token.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9-]*$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters for creating a token.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Token"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            }
          },
          "201" : {
            "description" : "The request was successful; the operation will complete asynchronously.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Tokens" ],
        "description" : "Deletes a token from a container registry.",
        "operationId" : "Tokens_Delete",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "tokenName",
          "in" : "path",
          "description" : "The name of the token.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9-]*$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly."
          },
          "202" : {
            "description" : "The request was successful; the operation will complete asynchronously."
          },
          "204" : {
            "description" : "The token does not exist in the subscription."
          }
        }
      },
      "patch" : {
        "tags" : [ "Tokens" ],
        "description" : "Updates a token with the specified parameters.",
        "operationId" : "Tokens_Update",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "tokenName",
          "in" : "path",
          "description" : "The name of the token.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9-]*$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters for updating a token.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TokenUpdateParameters"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            }
          },
          "201" : {
            "description" : "The request was successful; the operation will complete asynchronously.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "GenerateCredentialsParameters" : {
        "type" : "object",
        "properties" : {
          "expiry" : {
            "type" : "string",
            "description" : "The expiry date of the generated credentials after which the credentials become invalid.",
            "format" : "date-time"
          },
          "name" : {
            "type" : "string",
            "description" : "Specifies name of the password which should be regenerated if any -- password1 or password2.",
            "enum" : [ "password1", "password2" ]
          },
          "tokenId" : {
            "type" : "string",
            "description" : "The resource ID of the token for which credentials have to be generated."
          }
        },
        "description" : "The parameters used to generate credentials for a specified token or user of a container registry."
      },
      "GenerateCredentialsResult" : {
        "type" : "object",
        "properties" : {
          "passwords" : {
            "type" : "array",
            "description" : "The list of passwords for a container registry.",
            "items" : {
              "$ref" : "#/components/schemas/TokenPassword"
            }
          },
          "username" : {
            "type" : "string",
            "description" : "The username for a container registry."
          }
        },
        "description" : "The response from the GenerateCredentials operation."
      },
      "ProxyResource" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The resource ID.",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the resource.",
            "readOnly" : true
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the resource.",
            "readOnly" : true
          }
        },
        "description" : "The resource model definition for a ARM proxy resource. It will have everything other than required location and tags."
      },
      "ScopeMap" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/ScopeMapProperties"
          }
        },
        "description" : "An object that represents a scope map for a container registry.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProxyResource"
        } ]
      },
      "ScopeMapListResult" : {
        "type" : "object",
        "properties" : {
          "nextLink" : {
            "type" : "string",
            "description" : "The URI that can be used to request the next list of scope maps."
          },
          "value" : {
            "type" : "array",
            "description" : "The list of scope maps. Since this list may be incomplete, the nextLink field should be used to request the next list of scope maps.",
            "items" : {
              "$ref" : "#/components/schemas/ScopeMap"
            }
          }
        },
        "description" : "The result of a request to list scope maps for a container registry."
      },
      "ScopeMapProperties" : {
        "required" : [ "actions" ],
        "type" : "object",
        "properties" : {
          "actions" : {
            "type" : "array",
            "description" : "The list of scoped permissions for registry artifacts.\r\nE.g. repositories/repository-name/content/read,\r\nrepositories/repository-name/metadata/write",
            "items" : {
              "type" : "string"
            }
          },
          "creationDate" : {
            "type" : "string",
            "description" : "The creation date of scope map.",
            "format" : "date-time",
            "readOnly" : true
          },
          "description" : {
            "type" : "string",
            "description" : "The user friendly description of the scope map."
          },
          "provisioningState" : {
            "type" : "string",
            "description" : "Provisioning state of the resource.",
            "readOnly" : true,
            "enum" : [ "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled" ]
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the scope map. E.g. BuildIn scope map.",
            "readOnly" : true
          }
        },
        "description" : "The properties of a scope map."
      },
      "ScopeMapPropertiesUpdateParameters" : {
        "type" : "object",
        "properties" : {
          "actions" : {
            "type" : "array",
            "description" : "The list of scope permissions for registry artifacts.\r\nE.g. repositories/repository-name/pull, \r\nrepositories/repository-name/delete",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The user friendly description of the scope map."
          }
        },
        "description" : "The update parameters for scope map properties."
      },
      "ScopeMapUpdateParameters" : {
        "type" : "object",
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/ScopeMapPropertiesUpdateParameters"
          }
        },
        "description" : "The properties for updating the scope map."
      },
      "Token" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/TokenProperties"
          }
        },
        "description" : "An object that represents a token for a container registry.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProxyResource"
        } ]
      },
      "TokenCertificate" : {
        "type" : "object",
        "properties" : {
          "encodedPemCertificate" : {
            "type" : "string",
            "description" : "Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token."
          },
          "expiry" : {
            "type" : "string",
            "description" : "The expiry datetime of the certificate.",
            "format" : "date-time"
          },
          "name" : {
            "type" : "string",
            "enum" : [ "certificate1", "certificate2" ]
          },
          "thumbprint" : {
            "type" : "string",
            "description" : "The thumbprint of the certificate."
          }
        },
        "description" : "The properties of a certificate used for authenticating a token."
      },
      "TokenCredentialsProperties" : {
        "type" : "object",
        "properties" : {
          "certificates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TokenCertificate"
            }
          },
          "passwords" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TokenPassword"
            }
          }
        },
        "description" : "The properties of the credentials that can be used for authenticating the token."
      },
      "TokenListResult" : {
        "type" : "object",
        "properties" : {
          "nextLink" : {
            "type" : "string",
            "description" : "The URI that can be used to request the next list of tokens."
          },
          "value" : {
            "type" : "array",
            "description" : "The list of tokens. Since this list may be incomplete, the nextLink field should be used to request the next list of tokens.",
            "items" : {
              "$ref" : "#/components/schemas/Token"
            }
          }
        },
        "description" : "The result of a request to list tokens for a container registry."
      },
      "TokenPassword" : {
        "type" : "object",
        "properties" : {
          "creationTime" : {
            "type" : "string",
            "description" : "The creation datetime of the password.",
            "format" : "date-time"
          },
          "expiry" : {
            "type" : "string",
            "description" : "The expiry datetime of the password.",
            "format" : "date-time"
          },
          "name" : {
            "type" : "string",
            "description" : "The password name \"password1\" or \"password2\"",
            "enum" : [ "password1", "password2" ]
          },
          "value" : {
            "type" : "string",
            "description" : "The password value.",
            "readOnly" : true
          }
        },
        "description" : "The password that will be used for authenticating the token of a container registry."
      },
      "TokenProperties" : {
        "type" : "object",
        "properties" : {
          "creationDate" : {
            "type" : "string",
            "description" : "The creation date of scope map.",
            "format" : "date-time",
            "readOnly" : true
          },
          "credentials" : {
            "$ref" : "#/components/schemas/TokenCredentialsProperties"
          },
          "objectId" : {
            "type" : "string",
            "description" : "The user/group/application object ID for which the token has to be created."
          },
          "provisioningState" : {
            "type" : "string",
            "description" : "Provisioning state of the resource.",
            "readOnly" : true,
            "enum" : [ "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled" ]
          },
          "scopeMapId" : {
            "type" : "string",
            "description" : "The resource ID of the scope map to which the token will be associated with."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the token example enabled or disabled.",
            "enum" : [ "enabled", "disabled" ]
          }
        },
        "description" : "The properties of a token."
      },
      "TokenUpdateParameters" : {
        "type" : "object",
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/TokenUpdateProperties"
          }
        },
        "description" : "The parameters for updating a token."
      },
      "TokenUpdateProperties" : {
        "type" : "object",
        "properties" : {
          "credentials" : {
            "$ref" : "#/components/schemas/TokenCredentialsProperties"
          },
          "scopeMapId" : {
            "type" : "string",
            "description" : "The resource ID of the scope map to which the token will be associated with."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the token example enabled or disabled.",
            "enum" : [ "enabled", "disabled" ]
          }
        },
        "description" : "The parameters for updating token properties."
      }
    },
    "parameters" : {
      "ApiVersionParameter" : {
        "name" : "api-version",
        "in" : "query",
        "description" : "The client API version.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "RegistryNameParameter" : {
        "name" : "registryName",
        "in" : "path",
        "description" : "The name of the container registry.",
        "required" : true,
        "schema" : {
          "maxLength" : 50,
          "minLength" : 5,
          "pattern" : "^[a-zA-Z0-9]*$",
          "type" : "string"
        }
      },
      "ResourceGroupParameter" : {
        "name" : "resourceGroupName",
        "in" : "path",
        "description" : "The name of the resource group to which the container registry belongs.",
        "required" : true,
        "schema" : {
          "minLength" : 1,
          "type" : "string"
        }
      },
      "ScopeMapNameParameter" : {
        "name" : "scopeMapName",
        "in" : "path",
        "description" : "The name of the scope map.",
        "required" : true,
        "schema" : {
          "maxLength" : 50,
          "minLength" : 5,
          "pattern" : "^[a-zA-Z0-9-_]*$",
          "type" : "string"
        }
      },
      "SubscriptionIdParameter" : {
        "name" : "subscriptionId",
        "in" : "path",
        "description" : "The Microsoft Azure subscription ID.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "TokenNameParameter" : {
        "name" : "tokenName",
        "in" : "path",
        "description" : "The name of the token.",
        "required" : true,
        "schema" : {
          "maxLength" : 50,
          "minLength" : 5,
          "pattern" : "^[a-zA-Z0-9-]*$",
          "type" : "string"
        }
      }
    },
    "securitySchemes" : {
      "azure_auth" : {
        "type" : "oauth2",
        "description" : "Azure Active Directory OAuth2 Flow"
      }
    }
  }
}