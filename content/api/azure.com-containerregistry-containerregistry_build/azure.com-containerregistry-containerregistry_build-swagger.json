{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "ContainerRegistryManagementClient",
    "version" : "2019-06-01-preview"
  },
  "servers" : [ {
    "url" : "https://management.azure.com/"
  } ],
  "security" : [ {
    "azure_auth" : [ "user_impersonation" ]
  } ],
  "paths" : {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listBuildSourceUploadUrl" : {
      "post" : {
        "tags" : [ "Registries" ],
        "description" : "Get the upload location for the user to be able to upload the source.",
        "operationId" : "Registries_GetBuildSourceUploadUrl",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SourceUploadDefinition"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs" : {
      "get" : {
        "tags" : [ "Runs" ],
        "description" : "Gets all the runs for a registry.",
        "operationId" : "Runs_List",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$filter",
          "in" : "query",
          "description" : "The runs filter to apply on the operation. Arithmetic operators are not supported. The allowed string function is 'contains'. All logical operators except 'Not', 'Has', 'All' are allowed.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "$top",
          "in" : "query",
          "description" : "$top is supported for get list of runs, which limits the maximum number of runs to return.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RunListResult"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}" : {
      "get" : {
        "tags" : [ "Runs" ],
        "description" : "Gets the detailed information for a given run.",
        "operationId" : "Runs_Get",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "runId",
          "in" : "path",
          "description" : "The run ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Run"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the registry/run doesn't exist, 404 (Not found) is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Runs" ],
        "description" : "Patch the run properties.",
        "operationId" : "Runs_Update",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "runId",
          "in" : "path",
          "description" : "The run ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The run update properties.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RunUpdateParameters"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Run"
                }
              }
            }
          },
          "201" : {
            "description" : "The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Run"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the registry/build doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}/cancel" : {
      "post" : {
        "tags" : [ "Runs" ],
        "description" : "Cancel an existing run.",
        "operationId" : "Runs_Cancel",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "runId",
          "in" : "path",
          "description" : "The run ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly."
          },
          "202" : {
            "description" : "The request was successfully accepted; the operation will complete asynchronously."
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the registry/run doesn't exist, 404 (Not found) is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}/listLogSasUrl" : {
      "post" : {
        "tags" : [ "Runs" ],
        "description" : "Gets a link to download the run logs.",
        "operationId" : "Runs_GetLogSasUrl",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "runId",
          "in" : "path",
          "description" : "The run ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RunGetLogResult"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the registry/run doesn't exist, 404 (Not found) is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scheduleRun" : {
      "post" : {
        "tags" : [ "Registries" ],
        "description" : "Schedules a new run based on the request parameters and add it to the run queue.",
        "operationId" : "Registries_ScheduleRun",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters of a run that needs to scheduled.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RunRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Run"
                }
              }
            }
          },
          "202" : {
            "description" : "The request was successfully accepted; the operation will complete asynchronously."
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the registry/run doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns" : {
      "get" : {
        "tags" : [ "TaskRuns" ],
        "description" : "Lists all the task runs for a specified container registry.",
        "operationId" : "TaskRuns_List",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskRunListResult"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}" : {
      "get" : {
        "tags" : [ "TaskRuns" ],
        "description" : "Gets the detailed information for a given task run.",
        "operationId" : "TaskRuns_Get",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taskRunName",
          "in" : "path",
          "description" : "The run request name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskRun"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the registry/run doesn't exist, 404 (Not found) is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "TaskRuns" ],
        "description" : "Creates a task run for a container registry with the specified parameters.",
        "operationId" : "TaskRuns_Create",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taskRunName",
          "in" : "path",
          "description" : "The name of task run.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters of a run that needs to scheduled.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaskRun"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskRun"
                }
              }
            }
          },
          "201" : {
            "description" : "The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskRun"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "TaskRuns" ],
        "description" : "Deletes a specified task run resource.",
        "operationId" : "TaskRuns_Delete",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taskRunName",
          "in" : "path",
          "description" : "The task run name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly."
          },
          "202" : {
            "description" : "The request was successfully accepted; the operation will complete asynchronously."
          },
          "204" : {
            "description" : "No Content - the specified resource was not found."
          },
          "default" : {
            "description" : "Error response describing why the operation failed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "TaskRuns" ],
        "description" : "Updates a task run with the specified parameters.",
        "operationId" : "TaskRuns_Update",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taskRunName",
          "in" : "path",
          "description" : "The task run name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters for updating a task run.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaskRunUpdateParameters"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskRun"
                }
              }
            }
          },
          "201" : {
            "description" : "The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskRun"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "description" : "Lists all the tasks for a specified container registry.",
        "operationId" : "Tasks_List",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskListResult"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "description" : "Get the properties of a specified task.",
        "operationId" : "Tasks_Get",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taskName",
          "in" : "path",
          "description" : "The name of the container registry task.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9-_]*$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Tasks" ],
        "description" : "Creates a task for a container registry with the specified parameters.",
        "operationId" : "Tasks_Create",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taskName",
          "in" : "path",
          "description" : "The name of the container registry task.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9-_]*$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters for creating a task.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Task"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          },
          "201" : {
            "description" : "The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Tasks" ],
        "description" : "Deletes a specified task.",
        "operationId" : "Tasks_Delete",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taskName",
          "in" : "path",
          "description" : "The name of the container registry task.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9-_]*$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly."
          },
          "202" : {
            "description" : "The request was successfully accepted; the operation will complete asynchronously."
          },
          "204" : {
            "description" : "No Content - the specified resource was not found."
          },
          "default" : {
            "description" : "Error response describing why the operation failed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Tasks" ],
        "description" : "Updates a task with the specified parameters.",
        "operationId" : "Tasks_Update",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taskName",
          "in" : "path",
          "description" : "The name of the container registry task.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9-_]*$",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The parameters for updating a task.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaskUpdateParameters"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          },
          "201" : {
            "description" : "The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}/listDetails" : {
      "post" : {
        "tags" : [ "Tasks" ],
        "description" : "Returns a task with extended information that includes all secrets.",
        "operationId" : "Tasks_GetDetails",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "The Microsoft Azure subscription ID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group to which the container registry belongs.",
          "required" : true,
          "schema" : {
            "minLength" : 1,
            "type" : "string"
          }
        }, {
          "name" : "registryName",
          "in" : "path",
          "description" : "The name of the container registry.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9]*$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The client API version.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taskName",
          "in" : "path",
          "description" : "The name of the container registry task.",
          "required" : true,
          "schema" : {
            "maxLength" : 50,
            "minLength" : 5,
            "pattern" : "^[a-zA-Z0-9-_]*$",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The request was successful; the request was well-formed and received properly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          },
          "default" : {
            "description" : "Error response describing why the operation failed. If the registry doesn't exist, 404 (Not found) is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorSchema"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AgentProperties" : {
        "type" : "object",
        "properties" : {
          "cpu" : {
            "type" : "integer",
            "description" : "The CPU configuration in terms of number of cores required for the run.",
            "format" : "int32"
          }
        },
        "description" : "The properties that determine the run agent configuration."
      },
      "Argument" : {
        "required" : [ "name", "value" ],
        "type" : "object",
        "properties" : {
          "isSecret" : {
            "type" : "boolean",
            "description" : "Flag to indicate whether the argument represents a secret and want to be removed from build logs.",
            "default" : false
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the argument."
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the argument."
          }
        },
        "description" : "The properties of a run argument."
      },
      "AuthInfo" : {
        "required" : [ "token", "tokenType" ],
        "type" : "object",
        "properties" : {
          "expiresIn" : {
            "type" : "integer",
            "description" : "Time in seconds that the token remains valid",
            "format" : "int32"
          },
          "refreshToken" : {
            "type" : "string",
            "description" : "The refresh token used to refresh the access token."
          },
          "scope" : {
            "type" : "string",
            "description" : "The scope of the access token."
          },
          "token" : {
            "type" : "string",
            "description" : "The access token used to access the source control provider."
          },
          "tokenType" : {
            "type" : "string",
            "description" : "The type of Auth token.",
            "enum" : [ "PAT", "OAuth" ]
          }
        },
        "description" : "The authorization properties for accessing the source code repository."
      },
      "AuthInfoUpdateParameters" : {
        "type" : "object",
        "properties" : {
          "expiresIn" : {
            "type" : "integer",
            "description" : "Time in seconds that the token remains valid",
            "format" : "int32"
          },
          "refreshToken" : {
            "type" : "string",
            "description" : "The refresh token used to refresh the access token."
          },
          "scope" : {
            "type" : "string",
            "description" : "The scope of the access token."
          },
          "token" : {
            "type" : "string",
            "description" : "The access token used to access the source control provider."
          },
          "tokenType" : {
            "type" : "string",
            "description" : "The type of Auth token.",
            "enum" : [ "PAT", "OAuth" ]
          }
        },
        "description" : "The authorization properties for accessing the source code repository."
      },
      "BaseImageDependency" : {
        "type" : "object",
        "properties" : {
          "digest" : {
            "type" : "string",
            "description" : "The sha256-based digest of the image manifest."
          },
          "registry" : {
            "type" : "string",
            "description" : "The registry login server."
          },
          "repository" : {
            "type" : "string",
            "description" : "The repository name."
          },
          "tag" : {
            "type" : "string",
            "description" : "The tag name."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the base image dependency.",
            "enum" : [ "BuildTime", "RunTime" ]
          }
        },
        "description" : "Properties that describe a base image dependency."
      },
      "BaseImageTrigger" : {
        "required" : [ "baseImageTriggerType", "name" ],
        "type" : "object",
        "properties" : {
          "baseImageTriggerType" : {
            "type" : "string",
            "description" : "The type of the auto trigger for base image dependency updates.",
            "enum" : [ "All", "Runtime" ]
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the trigger."
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of trigger.",
            "default" : "Enabled",
            "enum" : [ "Disabled", "Enabled" ]
          },
          "updateTriggerEndpoint" : {
            "type" : "string",
            "description" : "The endpoint URL for receiving update triggers."
          },
          "updateTriggerPayloadType" : {
            "type" : "string",
            "description" : "Type of Payload body for Base image update triggers.",
            "enum" : [ "Default", "Token" ]
          }
        },
        "description" : "The trigger based on base image dependency."
      },
      "BaseImageTriggerUpdateParameters" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "baseImageTriggerType" : {
            "type" : "string",
            "description" : "The type of the auto trigger for base image dependency updates.",
            "enum" : [ "All", "Runtime" ]
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the trigger."
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of trigger.",
            "default" : "Enabled",
            "enum" : [ "Disabled", "Enabled" ]
          },
          "updateTriggerEndpoint" : {
            "type" : "string",
            "description" : "The endpoint URL for receiving update triggers."
          },
          "updateTriggerPayloadType" : {
            "type" : "string",
            "description" : "Type of Payload body for Base image update triggers.",
            "enum" : [ "Default", "Token" ]
          }
        },
        "description" : "The properties for updating base image dependency trigger."
      },
      "Credentials" : {
        "type" : "object",
        "properties" : {
          "customRegistries" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomRegistryCredentials"
            },
            "description" : "Describes the credential parameters for accessing other custom registries. The key\r\nfor the dictionary item will be the registry login server (myregistry.azurecr.io) and\r\nthe value of the item will be the registry credentials for accessing the registry."
          },
          "sourceRegistry" : {
            "$ref" : "#/components/schemas/SourceRegistryCredentials"
          }
        },
        "description" : "The parameters that describes a set of credentials that will be used when a run is invoked."
      },
      "CustomRegistryCredentials" : {
        "type" : "object",
        "properties" : {
          "identity" : {
            "type" : "string",
            "description" : "Indicates the managed identity assigned to the custom credential. If a user-assigned identity\r\nthis value is the Client ID. If a system-assigned identity, the value will be `system`. In\r\nthe case of a system-assigned identity, the Client ID will be determined by the runner. This\r\nidentity may be used to authenticate to key vault to retrieve credentials or it may be the only \r\nsource of authentication used for accessing the registry."
          },
          "password" : {
            "$ref" : "#/components/schemas/SecretObject"
          },
          "userName" : {
            "$ref" : "#/components/schemas/SecretObject"
          }
        },
        "description" : "Describes the credentials that will be used to access a custom registry during a run."
      },
      "DockerBuildRequest" : {
        "required" : [ "dockerFilePath", "platform" ],
        "properties" : {
          "agentConfiguration" : {
            "$ref" : "#/components/schemas/AgentProperties"
          },
          "arguments" : {
            "type" : "array",
            "description" : "The collection of override arguments to be used when executing the run.",
            "items" : {
              "$ref" : "#/components/schemas/Argument"
            }
          },
          "credentials" : {
            "$ref" : "#/components/schemas/Credentials"
          },
          "dockerFilePath" : {
            "type" : "string",
            "description" : "The Docker file path relative to the source location."
          },
          "imageNames" : {
            "type" : "array",
            "description" : "The fully qualified image names including the repository and tag.",
            "items" : {
              "type" : "string"
            }
          },
          "isPushEnabled" : {
            "type" : "boolean",
            "description" : "The value of this property indicates whether the image built should be pushed to the registry or not.",
            "default" : true
          },
          "noCache" : {
            "type" : "boolean",
            "description" : "The value of this property indicates whether the image cache is enabled or not.",
            "default" : false
          },
          "platform" : {
            "$ref" : "#/components/schemas/PlatformProperties"
          },
          "sourceLocation" : {
            "type" : "string",
            "description" : "The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.\r\nIf it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API."
          },
          "target" : {
            "type" : "string",
            "description" : "The name of the target build stage for the docker build."
          },
          "timeout" : {
            "maximum" : 28800,
            "minimum" : 300,
            "type" : "integer",
            "description" : "Run timeout in seconds.",
            "format" : "int32",
            "default" : 3600
          }
        },
        "description" : "The parameters for a docker quick build.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/RunRequest"
        } ]
      },
      "DockerBuildStep" : {
        "required" : [ "dockerFilePath" ],
        "properties" : {
          "arguments" : {
            "type" : "array",
            "description" : "The collection of override arguments to be used when executing this build step.",
            "items" : {
              "$ref" : "#/components/schemas/Argument"
            }
          },
          "dockerFilePath" : {
            "type" : "string",
            "description" : "The Docker file path relative to the source context."
          },
          "imageNames" : {
            "type" : "array",
            "description" : "The fully qualified image names including the repository and tag.",
            "items" : {
              "type" : "string"
            }
          },
          "isPushEnabled" : {
            "type" : "boolean",
            "description" : "The value of this property indicates whether the image built should be pushed to the registry or not.",
            "default" : true
          },
          "noCache" : {
            "type" : "boolean",
            "description" : "The value of this property indicates whether the image cache is enabled or not.",
            "default" : false
          },
          "target" : {
            "type" : "string",
            "description" : "The name of the target build stage for the docker build."
          }
        },
        "description" : "The Docker build step.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/TaskStepProperties"
        } ]
      },
      "DockerBuildStepUpdateParameters" : {
        "properties" : {
          "arguments" : {
            "type" : "array",
            "description" : "The collection of override arguments to be used when executing this build step.",
            "items" : {
              "$ref" : "#/components/schemas/Argument"
            }
          },
          "dockerFilePath" : {
            "type" : "string",
            "description" : "The Docker file path relative to the source context."
          },
          "imageNames" : {
            "type" : "array",
            "description" : "The fully qualified image names including the repository and tag.",
            "items" : {
              "type" : "string"
            }
          },
          "isPushEnabled" : {
            "type" : "boolean",
            "description" : "The value of this property indicates whether the image built should be pushed to the registry or not."
          },
          "noCache" : {
            "type" : "boolean",
            "description" : "The value of this property indicates whether the image cache is enabled or not."
          },
          "target" : {
            "type" : "string",
            "description" : "The name of the target build stage for the docker build."
          }
        },
        "description" : "The properties for updating a docker build step.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/TaskStepUpdateParameters"
        } ]
      },
      "EncodedTaskRunRequest" : {
        "required" : [ "encodedTaskContent", "platform" ],
        "properties" : {
          "agentConfiguration" : {
            "$ref" : "#/components/schemas/AgentProperties"
          },
          "credentials" : {
            "$ref" : "#/components/schemas/Credentials"
          },
          "encodedTaskContent" : {
            "type" : "string",
            "description" : "Base64 encoded value of the template/definition file content."
          },
          "encodedValuesContent" : {
            "type" : "string",
            "description" : "Base64 encoded value of the parameters/values file content."
          },
          "platform" : {
            "$ref" : "#/components/schemas/PlatformProperties"
          },
          "sourceLocation" : {
            "type" : "string",
            "description" : "The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.\r\nIf it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API."
          },
          "timeout" : {
            "maximum" : 28800,
            "minimum" : 300,
            "type" : "integer",
            "description" : "Run timeout in seconds.",
            "format" : "int32",
            "default" : 3600
          },
          "values" : {
            "type" : "array",
            "description" : "The collection of overridable values that can be passed when running a task.",
            "items" : {
              "$ref" : "#/components/schemas/SetValue"
            }
          }
        },
        "description" : "The parameters for a quick task run request.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/RunRequest"
        } ]
      },
      "EncodedTaskStep" : {
        "required" : [ "encodedTaskContent" ],
        "properties" : {
          "encodedTaskContent" : {
            "type" : "string",
            "description" : "Base64 encoded value of the template/definition file content."
          },
          "encodedValuesContent" : {
            "type" : "string",
            "description" : "Base64 encoded value of the parameters/values file content."
          },
          "values" : {
            "type" : "array",
            "description" : "The collection of overridable values that can be passed when running a task.",
            "items" : {
              "$ref" : "#/components/schemas/SetValue"
            }
          }
        },
        "description" : "The properties of a encoded task step.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/TaskStepProperties"
        } ]
      },
      "EncodedTaskStepUpdateParameters" : {
        "properties" : {
          "encodedTaskContent" : {
            "type" : "string",
            "description" : "Base64 encoded value of the template/definition file content."
          },
          "encodedValuesContent" : {
            "type" : "string",
            "description" : "Base64 encoded value of the parameters/values file content."
          },
          "values" : {
            "type" : "array",
            "description" : "The collection of overridable values that can be passed when running a task.",
            "items" : {
              "$ref" : "#/components/schemas/SetValue"
            }
          }
        },
        "description" : "The properties for updating encoded task step.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/TaskStepUpdateParameters"
        } ]
      },
      "Error" : {
        "required" : [ "code", "message" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "error code."
          },
          "message" : {
            "type" : "string",
            "description" : "error message."
          }
        },
        "description" : "An error response from the Azure Container Registry service."
      },
      "ErrorSchema" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "$ref" : "#/components/schemas/Error"
          }
        },
        "description" : "An error response from the Azure Container Registry service."
      },
      "FileTaskRunRequest" : {
        "required" : [ "platform", "taskFilePath" ],
        "properties" : {
          "agentConfiguration" : {
            "$ref" : "#/components/schemas/AgentProperties"
          },
          "credentials" : {
            "$ref" : "#/components/schemas/Credentials"
          },
          "platform" : {
            "$ref" : "#/components/schemas/PlatformProperties"
          },
          "sourceLocation" : {
            "type" : "string",
            "description" : "The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.\r\nIf it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API."
          },
          "taskFilePath" : {
            "type" : "string",
            "description" : "The template/definition file path relative to the source."
          },
          "timeout" : {
            "maximum" : 28800,
            "minimum" : 300,
            "type" : "integer",
            "description" : "Run timeout in seconds.",
            "format" : "int32",
            "default" : 3600
          },
          "values" : {
            "type" : "array",
            "description" : "The collection of overridable values that can be passed when running a task.",
            "items" : {
              "$ref" : "#/components/schemas/SetValue"
            }
          },
          "valuesFilePath" : {
            "type" : "string",
            "description" : "The values/parameters file path relative to the source."
          }
        },
        "description" : "The request parameters for a scheduling run against a task file.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/RunRequest"
        } ]
      },
      "FileTaskStep" : {
        "required" : [ "taskFilePath" ],
        "properties" : {
          "taskFilePath" : {
            "type" : "string",
            "description" : "The task template/definition file path relative to the source context."
          },
          "values" : {
            "type" : "array",
            "description" : "The collection of overridable values that can be passed when running a task.",
            "items" : {
              "$ref" : "#/components/schemas/SetValue"
            }
          },
          "valuesFilePath" : {
            "type" : "string",
            "description" : "The task values/parameters file path relative to the source context."
          }
        },
        "description" : "The properties of a task step.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/TaskStepProperties"
        } ]
      },
      "FileTaskStepUpdateParameters" : {
        "properties" : {
          "taskFilePath" : {
            "type" : "string",
            "description" : "The task template/definition file path relative to the source context."
          },
          "values" : {
            "type" : "array",
            "description" : "The collection of overridable values that can be passed when running a task.",
            "items" : {
              "$ref" : "#/components/schemas/SetValue"
            }
          },
          "valuesFilePath" : {
            "type" : "string",
            "description" : "The values/parameters file path relative to the source context."
          }
        },
        "description" : "The properties of updating a task step.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/TaskStepUpdateParameters"
        } ]
      },
      "IdentityProperties" : {
        "type" : "object",
        "properties" : {
          "principalId" : {
            "type" : "string",
            "description" : "The principal ID of resource identity."
          },
          "tenantId" : {
            "type" : "string",
            "description" : "The tenant ID of resource."
          },
          "type" : {
            "type" : "string",
            "description" : "The identity type.",
            "enum" : [ "SystemAssigned", "UserAssigned", "SystemAssigned, UserAssigned", "None" ]
          },
          "userAssignedIdentities" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/UserIdentityProperties"
            },
            "description" : "The list of user identities associated with the resource. The user identity \r\ndictionary key references will be ARM resource ids in the form: \r\n'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/\r\n    providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'."
          }
        },
        "description" : "Managed identity for the resource."
      },
      "ImageDescriptor" : {
        "type" : "object",
        "properties" : {
          "digest" : {
            "type" : "string",
            "description" : "The sha256-based digest of the image manifest."
          },
          "registry" : {
            "type" : "string",
            "description" : "The registry login server."
          },
          "repository" : {
            "type" : "string",
            "description" : "The repository name."
          },
          "tag" : {
            "type" : "string",
            "description" : "The tag name."
          }
        },
        "description" : "Properties for a registry image."
      },
      "ImageUpdateTrigger" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique ID of the trigger."
          },
          "images" : {
            "type" : "array",
            "description" : "The list of image updates that caused the build.",
            "items" : {
              "$ref" : "#/components/schemas/ImageDescriptor"
            }
          },
          "timestamp" : {
            "type" : "string",
            "description" : "The timestamp when the image update happened.",
            "format" : "date-time"
          }
        },
        "description" : "The image update trigger that caused a build."
      },
      "OverrideTaskStepProperties" : {
        "type" : "object",
        "properties" : {
          "arguments" : {
            "type" : "array",
            "description" : "Gets or sets the collection of override arguments to be used when\r\nexecuting a build step.",
            "items" : {
              "$ref" : "#/components/schemas/Argument"
            }
          },
          "contextPath" : {
            "type" : "string",
            "description" : "The source context against which run has to be queued."
          },
          "file" : {
            "type" : "string",
            "description" : "The file against which run has to be queued."
          },
          "target" : {
            "type" : "string",
            "description" : "The name of the target build stage for the docker build."
          },
          "updateTriggerToken" : {
            "type" : "string",
            "description" : "Base64 encoded update trigger token that will be attached with the base image trigger webhook."
          },
          "values" : {
            "type" : "array",
            "description" : "The collection of overridable values that can be passed when running a Task.",
            "items" : {
              "$ref" : "#/components/schemas/SetValue"
            }
          }
        }
      },
      "PlatformProperties" : {
        "required" : [ "os" ],
        "type" : "object",
        "properties" : {
          "architecture" : {
            "type" : "string",
            "description" : "The OS architecture.",
            "enum" : [ "amd64", "x86", "386", "arm", "arm64" ]
          },
          "os" : {
            "type" : "string",
            "description" : "The operating system type required for the run.",
            "enum" : [ "Windows", "Linux" ]
          },
          "variant" : {
            "type" : "string",
            "description" : "Variant of the CPU.",
            "enum" : [ "v6", "v7", "v8" ]
          }
        },
        "description" : "The platform properties against which the run has to happen."
      },
      "PlatformUpdateParameters" : {
        "type" : "object",
        "properties" : {
          "architecture" : {
            "type" : "string",
            "description" : "The OS architecture.",
            "enum" : [ "amd64", "x86", "386", "arm", "arm64" ]
          },
          "os" : {
            "type" : "string",
            "description" : "The operating system type required for the run.",
            "enum" : [ "Windows", "Linux" ]
          },
          "variant" : {
            "type" : "string",
            "description" : "Variant of the CPU.",
            "enum" : [ "v6", "v7", "v8" ]
          }
        },
        "description" : "The properties for updating the platform configuration."
      },
      "ProxyResource" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The resource ID.",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the resource.",
            "readOnly" : true
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the resource.",
            "readOnly" : true
          }
        },
        "description" : "The resource model definition for a ARM proxy resource. It will have everything other than required location and tags."
      },
      "Resource" : {
        "required" : [ "location" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The resource ID.",
            "readOnly" : true
          },
          "location" : {
            "type" : "string",
            "description" : "The location of the resource. This cannot be changed after the resource is created."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the resource.",
            "readOnly" : true
          },
          "tags" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The tags of the resource."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the resource.",
            "readOnly" : true
          }
        },
        "description" : "An Azure resource."
      },
      "Run" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/RunProperties"
          }
        },
        "description" : "Run resource properties",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProxyResource"
        } ]
      },
      "RunFilter" : {
        "type" : "object",
        "properties" : {
          "createTime" : {
            "type" : "string",
            "description" : "The create time for a run.",
            "format" : "date-time"
          },
          "finishTime" : {
            "type" : "string",
            "description" : "The time the run finished.",
            "format" : "date-time"
          },
          "isArchiveEnabled" : {
            "type" : "boolean",
            "description" : "The value that indicates whether archiving is enabled or not."
          },
          "outputImageManifests" : {
            "type" : "string",
            "description" : "The list of comma-separated image manifests that were generated from the run. This is applicable if the run is of\r\nbuild type."
          },
          "runId" : {
            "type" : "string",
            "description" : "The unique identifier for the run."
          },
          "runType" : {
            "type" : "string",
            "description" : "The type of run.",
            "enum" : [ "QuickBuild", "QuickRun", "AutoBuild", "AutoRun" ]
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of the run.",
            "enum" : [ "Queued", "Started", "Running", "Succeeded", "Failed", "Canceled", "Error", "Timeout" ]
          },
          "taskName" : {
            "type" : "string",
            "description" : "The name of the task that the run corresponds to."
          }
        },
        "description" : "Properties that are enabled for Odata querying on runs."
      },
      "RunGetLogResult" : {
        "type" : "object",
        "properties" : {
          "logLink" : {
            "type" : "string",
            "description" : "The link to logs for a run on a azure container registry."
          }
        },
        "description" : "The result of get log link operation."
      },
      "RunListResult" : {
        "type" : "object",
        "properties" : {
          "nextLink" : {
            "type" : "string",
            "description" : "The URI that can be used to request the next set of paged results."
          },
          "value" : {
            "type" : "array",
            "description" : "The collection value.",
            "items" : {
              "$ref" : "#/components/schemas/Run"
            }
          }
        },
        "description" : "Collection of runs."
      },
      "RunProperties" : {
        "type" : "object",
        "properties" : {
          "agentConfiguration" : {
            "$ref" : "#/components/schemas/AgentProperties"
          },
          "createTime" : {
            "type" : "string",
            "description" : "The time the run was scheduled.",
            "format" : "date-time"
          },
          "customRegistries" : {
            "type" : "array",
            "description" : "The list of custom registries that were logged in during this run.",
            "items" : {
              "type" : "string"
            }
          },
          "finishTime" : {
            "type" : "string",
            "description" : "The time the run finished.",
            "format" : "date-time"
          },
          "imageUpdateTrigger" : {
            "$ref" : "#/components/schemas/ImageUpdateTrigger"
          },
          "isArchiveEnabled" : {
            "type" : "boolean",
            "description" : "The value that indicates whether archiving is enabled or not.",
            "default" : false
          },
          "lastUpdatedTime" : {
            "type" : "string",
            "description" : "The last updated time for the run.",
            "format" : "date-time"
          },
          "outputImages" : {
            "type" : "array",
            "description" : "The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.",
            "items" : {
              "$ref" : "#/components/schemas/ImageDescriptor"
            }
          },
          "platform" : {
            "$ref" : "#/components/schemas/PlatformProperties"
          },
          "provisioningState" : {
            "type" : "string",
            "description" : "The provisioning state of a run.",
            "enum" : [ "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled" ]
          },
          "runErrorMessage" : {
            "type" : "string",
            "description" : "The error message received from backend systems after the run is scheduled.",
            "readOnly" : true
          },
          "runId" : {
            "type" : "string",
            "description" : "The unique identifier for the run."
          },
          "runType" : {
            "type" : "string",
            "description" : "The type of run.",
            "enum" : [ "QuickBuild", "QuickRun", "AutoBuild", "AutoRun" ]
          },
          "sourceRegistryAuth" : {
            "type" : "string",
            "description" : "The scope of the credentials that were used to login to the source registry during this run."
          },
          "sourceTrigger" : {
            "$ref" : "#/components/schemas/SourceTriggerDescriptor"
          },
          "startTime" : {
            "type" : "string",
            "description" : "The time the run started.",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of the run.",
            "enum" : [ "Queued", "Started", "Running", "Succeeded", "Failed", "Canceled", "Error", "Timeout" ]
          },
          "task" : {
            "type" : "string",
            "description" : "The task against which run was scheduled."
          },
          "timerTrigger" : {
            "$ref" : "#/components/schemas/TimerTriggerDescriptor"
          },
          "updateTriggerToken" : {
            "type" : "string",
            "description" : "The update trigger token passed for the Run."
          }
        },
        "description" : "The properties for a run."
      },
      "RunRequest" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "isArchiveEnabled" : {
            "type" : "boolean",
            "description" : "The value that indicates whether archiving is enabled for the run or not.",
            "default" : false
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the run request."
          }
        },
        "description" : "The request parameters for scheduling a run.",
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "RunUpdateParameters" : {
        "type" : "object",
        "properties" : {
          "isArchiveEnabled" : {
            "type" : "boolean",
            "description" : "The value that indicates whether archiving is enabled or not."
          }
        },
        "description" : "The set of run properties that can be updated."
      },
      "SecretObject" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The type of the secret object which determines how the value of the secret object has to be\r\ninterpreted.",
            "enum" : [ "Opaque", "Vaultsecret" ]
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the secret. The format of this value will be determined\r\nbased on the type of the secret object. If the type is Opaque, the value will be\r\nused as is without any modification."
          }
        },
        "description" : "Describes the properties of a secret object value."
      },
      "SetValue" : {
        "required" : [ "name", "value" ],
        "type" : "object",
        "properties" : {
          "isSecret" : {
            "type" : "boolean",
            "description" : "Flag to indicate whether the value represents a secret or not.",
            "default" : false
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the overridable value."
          },
          "value" : {
            "type" : "string",
            "description" : "The overridable value."
          }
        },
        "description" : "The properties of a overridable value that can be passed to a task template."
      },
      "SourceProperties" : {
        "required" : [ "repositoryUrl", "sourceControlType" ],
        "type" : "object",
        "properties" : {
          "branch" : {
            "type" : "string",
            "description" : "The branch name of the source code."
          },
          "repositoryUrl" : {
            "type" : "string",
            "description" : "The full URL to the source code repository"
          },
          "sourceControlAuthProperties" : {
            "$ref" : "#/components/schemas/AuthInfo"
          },
          "sourceControlType" : {
            "type" : "string",
            "description" : "The type of source control service.",
            "enum" : [ "Github", "VisualStudioTeamService" ]
          }
        },
        "description" : "The properties of the source code repository."
      },
      "SourceRegistryCredentials" : {
        "type" : "object",
        "properties" : {
          "loginMode" : {
            "type" : "string",
            "description" : "The authentication mode which determines the source registry login scope. The credentials for the source registry\r\nwill be generated using the given scope. These credentials will be used to login to\r\nthe source registry during the run.",
            "enum" : [ "None", "Default" ]
          }
        },
        "description" : "Describes the credential parameters for accessing the source registry."
      },
      "SourceTrigger" : {
        "required" : [ "name", "sourceRepository", "sourceTriggerEvents" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the trigger."
          },
          "sourceRepository" : {
            "$ref" : "#/components/schemas/SourceProperties"
          },
          "sourceTriggerEvents" : {
            "type" : "array",
            "description" : "The source event corresponding to the trigger.",
            "items" : {
              "type" : "string",
              "enum" : [ "commit", "pullrequest" ]
            }
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of trigger.",
            "default" : "Enabled",
            "enum" : [ "Disabled", "Enabled" ]
          }
        },
        "description" : "The properties of a source based trigger."
      },
      "SourceTriggerDescriptor" : {
        "type" : "object",
        "properties" : {
          "branchName" : {
            "type" : "string",
            "description" : "The branch name in the repository."
          },
          "commitId" : {
            "type" : "string",
            "description" : "The unique ID that identifies a commit."
          },
          "eventType" : {
            "type" : "string",
            "description" : "The event type of the trigger."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique ID of the trigger."
          },
          "providerType" : {
            "type" : "string",
            "description" : "The source control provider type."
          },
          "pullRequestId" : {
            "type" : "string",
            "description" : "The unique ID that identifies pull request."
          },
          "repositoryUrl" : {
            "type" : "string",
            "description" : "The repository URL."
          }
        },
        "description" : "The source trigger that caused a run."
      },
      "SourceTriggerUpdateParameters" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the trigger."
          },
          "sourceRepository" : {
            "$ref" : "#/components/schemas/SourceUpdateParameters"
          },
          "sourceTriggerEvents" : {
            "type" : "array",
            "description" : "The source event corresponding to the trigger.",
            "items" : {
              "type" : "string",
              "enum" : [ "commit", "pullrequest" ]
            }
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of trigger.",
            "default" : "Enabled",
            "enum" : [ "Disabled", "Enabled" ]
          }
        },
        "description" : "The properties for updating a source based trigger."
      },
      "SourceUpdateParameters" : {
        "type" : "object",
        "properties" : {
          "branch" : {
            "type" : "string",
            "description" : "The branch name of the source code."
          },
          "repositoryUrl" : {
            "type" : "string",
            "description" : "The full URL to the source code repository"
          },
          "sourceControlAuthProperties" : {
            "$ref" : "#/components/schemas/AuthInfoUpdateParameters"
          },
          "sourceControlType" : {
            "type" : "string",
            "description" : "The type of source control service.",
            "enum" : [ "Github", "VisualStudioTeamService" ]
          }
        },
        "description" : "The properties for updating the source code repository."
      },
      "SourceUploadDefinition" : {
        "type" : "object",
        "properties" : {
          "relativePath" : {
            "type" : "string",
            "description" : "The relative path to the source. This is used to submit the subsequent queue build request."
          },
          "uploadUrl" : {
            "type" : "string",
            "description" : "The URL where the client can upload the source."
          }
        },
        "description" : "The properties of a response to source upload request."
      },
      "Task" : {
        "properties" : {
          "identity" : {
            "$ref" : "#/components/schemas/IdentityProperties"
          },
          "properties" : {
            "$ref" : "#/components/schemas/TaskProperties"
          }
        },
        "description" : "The task that has the ARM resource and task properties. \r\nThe task will have all information to schedule a run against it.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Resource"
        } ]
      },
      "TaskListResult" : {
        "type" : "object",
        "properties" : {
          "nextLink" : {
            "type" : "string",
            "description" : "The URI that can be used to request the next set of paged results."
          },
          "value" : {
            "type" : "array",
            "description" : "The collection value.",
            "items" : {
              "$ref" : "#/components/schemas/Task"
            }
          }
        },
        "description" : "The collection of tasks."
      },
      "TaskProperties" : {
        "required" : [ "platform", "step" ],
        "type" : "object",
        "properties" : {
          "agentConfiguration" : {
            "$ref" : "#/components/schemas/AgentProperties"
          },
          "creationDate" : {
            "type" : "string",
            "description" : "The creation date of task.",
            "format" : "date-time",
            "readOnly" : true
          },
          "credentials" : {
            "$ref" : "#/components/schemas/Credentials"
          },
          "platform" : {
            "$ref" : "#/components/schemas/PlatformProperties"
          },
          "provisioningState" : {
            "type" : "string",
            "description" : "The provisioning state of the task.",
            "readOnly" : true,
            "enum" : [ "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled" ]
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of task.",
            "enum" : [ "Disabled", "Enabled" ]
          },
          "step" : {
            "$ref" : "#/components/schemas/TaskStepProperties"
          },
          "timeout" : {
            "maximum" : 28800,
            "minimum" : 300,
            "type" : "integer",
            "description" : "Run timeout in seconds.",
            "format" : "int32",
            "default" : 3600
          },
          "trigger" : {
            "$ref" : "#/components/schemas/TriggerProperties"
          }
        },
        "description" : "The properties of a task."
      },
      "TaskPropertiesUpdateParameters" : {
        "type" : "object",
        "properties" : {
          "agentConfiguration" : {
            "$ref" : "#/components/schemas/AgentProperties"
          },
          "credentials" : {
            "$ref" : "#/components/schemas/Credentials"
          },
          "platform" : {
            "$ref" : "#/components/schemas/PlatformUpdateParameters"
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of task.",
            "enum" : [ "Disabled", "Enabled" ]
          },
          "step" : {
            "$ref" : "#/components/schemas/TaskStepUpdateParameters"
          },
          "timeout" : {
            "type" : "integer",
            "description" : "Run timeout in seconds.",
            "format" : "int32"
          },
          "trigger" : {
            "$ref" : "#/components/schemas/TriggerUpdateParameters"
          }
        },
        "description" : "The properties for updating a task."
      },
      "TaskRun" : {
        "properties" : {
          "identity" : {
            "$ref" : "#/components/schemas/IdentityProperties"
          },
          "properties" : {
            "$ref" : "#/components/schemas/TaskRunProperties"
          }
        },
        "description" : "The task run that has the ARM resource and properties. \r\nThe task run will have the information of request and result of a run.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Resource"
        } ]
      },
      "TaskRunListResult" : {
        "type" : "object",
        "properties" : {
          "nextLink" : {
            "type" : "string",
            "description" : "The URI that can be used to request the next set of paged results."
          },
          "value" : {
            "type" : "array",
            "description" : "The collection value.",
            "items" : {
              "$ref" : "#/components/schemas/TaskRun"
            }
          }
        },
        "description" : "The collection of task runs."
      },
      "TaskRunProperties" : {
        "type" : "object",
        "properties" : {
          "forceUpdateTag" : {
            "type" : "string",
            "description" : "How the run should be forced to rerun even if the run request configuration has not changed"
          },
          "provisioningState" : {
            "type" : "string",
            "description" : "The provisioning state of this task run",
            "readOnly" : true,
            "enum" : [ "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled" ]
          },
          "runRequest" : {
            "$ref" : "#/components/schemas/RunRequest"
          },
          "runResult" : {
            "$ref" : "#/components/schemas/Run"
          }
        },
        "description" : "The properties of task run."
      },
      "TaskRunPropertiesUpdateParameters" : {
        "type" : "object",
        "properties" : {
          "forceUpdateTag" : {
            "type" : "string",
            "description" : "How the run should be forced to rerun even if the run request configuration has not changed"
          },
          "runRequest" : {
            "$ref" : "#/components/schemas/RunRequest"
          }
        },
        "description" : "The properties of a task run update parameters."
      },
      "TaskRunRequest" : {
        "required" : [ "taskId" ],
        "properties" : {
          "overrideTaskStepProperties" : {
            "$ref" : "#/components/schemas/OverrideTaskStepProperties"
          },
          "taskId" : {
            "type" : "string",
            "description" : "The resource ID of task against which run has to be queued."
          }
        },
        "description" : "The parameters for a task run request.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/RunRequest"
        } ]
      },
      "TaskRunUpdateParameters" : {
        "type" : "object",
        "properties" : {
          "identity" : {
            "$ref" : "#/components/schemas/IdentityProperties"
          },
          "properties" : {
            "$ref" : "#/components/schemas/TaskRunPropertiesUpdateParameters"
          },
          "tags" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The ARM resource tags."
          }
        },
        "description" : "The parameters for updating a task run."
      },
      "TaskStepProperties" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "baseImageDependencies" : {
            "type" : "array",
            "description" : "List of base image dependencies for a step.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/BaseImageDependency"
            }
          },
          "contextAccessToken" : {
            "type" : "string",
            "description" : "The token (git PAT or SAS token of storage account blob) associated with the context for a step."
          },
          "contextPath" : {
            "type" : "string",
            "description" : "The URL(absolute or relative) of the source context for the task step."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the step.",
            "enum" : [ "Docker", "FileTask", "EncodedTask" ]
          }
        },
        "description" : "Base properties for any task step.",
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "TaskStepUpdateParameters" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "contextAccessToken" : {
            "type" : "string",
            "description" : "The token (git PAT or SAS token of storage account blob) associated with the context for a step."
          },
          "contextPath" : {
            "type" : "string",
            "description" : "The URL(absolute or relative) of the source context for the task step."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the step.",
            "enum" : [ "Docker", "FileTask", "EncodedTask" ]
          }
        },
        "description" : "Base properties for updating any task step.",
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "TaskUpdateParameters" : {
        "type" : "object",
        "properties" : {
          "identity" : {
            "$ref" : "#/components/schemas/IdentityProperties"
          },
          "properties" : {
            "$ref" : "#/components/schemas/TaskPropertiesUpdateParameters"
          },
          "tags" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The ARM resource tags."
          }
        },
        "description" : "The parameters for updating a task."
      },
      "TimerTrigger" : {
        "required" : [ "name", "schedule" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the trigger."
          },
          "schedule" : {
            "type" : "string",
            "description" : "The CRON expression for the task schedule"
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of trigger.",
            "default" : "Enabled",
            "enum" : [ "Disabled", "Enabled" ]
          }
        },
        "description" : "The properties of a timer trigger."
      },
      "TimerTriggerDescriptor" : {
        "type" : "object",
        "properties" : {
          "scheduleOccurrence" : {
            "type" : "string",
            "description" : "The occurrence that triggered the run."
          },
          "timerTriggerName" : {
            "type" : "string",
            "description" : "The timer trigger name that caused the run."
          }
        }
      },
      "TimerTriggerUpdateParameters" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the trigger."
          },
          "schedule" : {
            "type" : "string",
            "description" : "The CRON expression for the task schedule"
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of trigger.",
            "default" : "Enabled",
            "enum" : [ "Disabled", "Enabled" ]
          }
        },
        "description" : "The properties for updating a timer trigger."
      },
      "TriggerProperties" : {
        "type" : "object",
        "properties" : {
          "baseImageTrigger" : {
            "$ref" : "#/components/schemas/BaseImageTrigger"
          },
          "sourceTriggers" : {
            "type" : "array",
            "description" : "The collection of triggers based on source code repository.",
            "items" : {
              "$ref" : "#/components/schemas/SourceTrigger"
            }
          },
          "timerTriggers" : {
            "type" : "array",
            "description" : "The collection of timer triggers.",
            "items" : {
              "$ref" : "#/components/schemas/TimerTrigger"
            }
          }
        },
        "description" : "The properties of a trigger."
      },
      "TriggerUpdateParameters" : {
        "type" : "object",
        "properties" : {
          "baseImageTrigger" : {
            "$ref" : "#/components/schemas/BaseImageTriggerUpdateParameters"
          },
          "sourceTriggers" : {
            "type" : "array",
            "description" : "The collection of triggers based on source code repository.",
            "items" : {
              "$ref" : "#/components/schemas/SourceTriggerUpdateParameters"
            }
          },
          "timerTriggers" : {
            "type" : "array",
            "description" : "The collection of timer triggers.",
            "items" : {
              "$ref" : "#/components/schemas/TimerTriggerUpdateParameters"
            }
          }
        },
        "description" : "The properties for updating triggers."
      },
      "UserIdentityProperties" : {
        "type" : "object",
        "properties" : {
          "clientId" : {
            "type" : "string",
            "description" : "The client id of user assigned identity."
          },
          "principalId" : {
            "type" : "string",
            "description" : "The principal id of user assigned identity."
          }
        }
      }
    },
    "parameters" : {
      "ApiVersionParameter" : {
        "name" : "api-version",
        "in" : "query",
        "description" : "The client API version.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "RegistryNameParameter" : {
        "name" : "registryName",
        "in" : "path",
        "description" : "The name of the container registry.",
        "required" : true,
        "schema" : {
          "maxLength" : 50,
          "minLength" : 5,
          "pattern" : "^[a-zA-Z0-9]*$",
          "type" : "string"
        }
      },
      "ResourceGroupNameParameter" : {
        "name" : "resourceGroupName",
        "in" : "path",
        "description" : "The name of the resource group to which the container registry belongs.",
        "required" : true,
        "schema" : {
          "minLength" : 1,
          "type" : "string"
        }
      },
      "SubscriptionIdParameter" : {
        "name" : "subscriptionId",
        "in" : "path",
        "description" : "The Microsoft Azure subscription ID.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "TaskNameParameter" : {
        "name" : "taskName",
        "in" : "path",
        "description" : "The name of the container registry task.",
        "required" : true,
        "schema" : {
          "maxLength" : 50,
          "minLength" : 5,
          "pattern" : "^[a-zA-Z0-9-_]*$",
          "type" : "string"
        }
      }
    },
    "securitySchemes" : {
      "azure_auth" : {
        "type" : "oauth2",
        "description" : "Azure Active Directory OAuth2 Flow"
      }
    }
  }
}