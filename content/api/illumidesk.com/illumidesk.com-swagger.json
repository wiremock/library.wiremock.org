{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "IllumiDesk",
    "version" : "1.0"
  },
  "servers" : [ {
    "url" : "https://api.illumidesk.com/"
  } ],
  "security" : [ {
    "jwt" : null
  } ],
  "paths" : {
    "/auth/jwt-token-auth/" : {
      "post" : {
        "tags" : [ "auth" ],
        "summary" : "Create JSON Web Token (JWT)",
        "operationId" : "auth_jwt-token-auth",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JWTData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "JWT created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JWT"
                },
                "example" : {
                  "token" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JWT"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JWTError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JWTError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/jwt-token-refresh/" : {
      "post" : {
        "tags" : [ "auth" ],
        "summary" : "Refresh a JSON Web Token (JWT)",
        "description" : "Obtains a new JSON Web Token using existing user credentials.",
        "operationId" : "auth_jwt-token-refresh",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RefreshJSONWebTokenData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "RefreshJSONWebToken created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RefreshJSONWebToken"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RefreshJSONWebToken"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RefreshJSONWebTokenError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RefreshJSONWebTokenError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/jwt-token-verify/" : {
      "post" : {
        "tags" : [ "auth" ],
        "summary" : "Validate JSON Web Token (JWT)",
        "description" : "Checks veraciy of token.",
        "operationId" : "auth_jwt-token-verify",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VerifyJSONWebTokenData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "VerifyJSONWebToken created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VerifyJSONWebToken"
                },
                "example" : {
                  "token" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VerifyJSONWebToken"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VerifyJSONWebTokenError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VerifyJSONWebTokenError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login/{provider}/" : {
      "get" : {
        "tags" : [ "auth" ],
        "operationId" : "oauth_login",
        "parameters" : [ {
          "name" : "provider",
          "in" : "path",
          "description" : "OAuth2 provider",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "github", "google", "slack" ]
          }
        } ],
        "responses" : {
          "302" : {
            "description" : "Redirect to backend auth page"
          }
        }
      }
    },
    "/auth/register/" : {
      "post" : {
        "tags" : [ "auth" ],
        "summary" : "Register a user",
        "description" : "User registration requires confirming email address to activate user.",
        "operationId" : "auth_register",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "User created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "example" : {
                  "email" : "user@email.com",
                  "first_name" : "John",
                  "id" : "536686d7-0096-4c72-a4c3-5d710a361a0a",
                  "last_name" : "Doe",
                  "profile" : {
                    "avatar_url" : "http://example.com/",
                    "bio" : "I like tests",
                    "company" : "IllumiDesk",
                    "location" : "Atlanta, GA",
                    "timezone" : "America/New_York",
                    "url" : "http://about.me/myprofile"
                  },
                  "username" : "johndoe"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/me" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "A convenience endpoint that is equivalent to GET /v1/users/profiles/<my user id>/",
        "operationId" : "me",
        "responses" : {
          "200" : {
            "description" : "User information retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "example" : {
                  "email" : "johndoe@email.com",
                  "first_name" : "John",
                  "id" : "66949654-1f75-4c6f-a5c5-e3572eae6527",
                  "last_name" : "Doe",
                  "profile" : {
                    "avatar_url" : "http://example.com/",
                    "bio" : "I like tests",
                    "company" : "3Blades",
                    "location" : "Atlanta, GA",
                    "timezone" : "America/New_York",
                    "url" : "http://about.me/myprofile"
                  },
                  "username" : "johndoe"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/v1/servers/options/server-size/" : {
      "get" : {
        "tags" : [ "servers" ],
        "summary" : "Retrieve available server sizes",
        "operationId" : "servers_options_sizes_list",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Set limit when retrieving items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when retrieving items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Set order when retrieving items.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Server size list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerSize"
                  }
                },
                "example" : [ ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerSize"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "servers" ],
        "summary" : "Create a new server size item",
        "description" : "Only super users with on-premises version have acceess to this endpoint.",
        "operationId" : "servers_options_server_size_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerSizeData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "ServerSize created. This operation is available only to super users.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerSize"
                },
                "example" : {
                  "active" : true,
                  "cpu" : 1,
                  "id" : "2f4a5830-169d-4111-b913-e68c7b94fdbe",
                  "memory" : 512,
                  "name" : "myResource"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerSize"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerSizeError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerSizeError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/servers/options/server-size/{size}/" : {
      "get" : {
        "tags" : [ "servers" ],
        "summary" : "Get a server size by id",
        "operationId" : "servers_options_resources_read",
        "parameters" : [ {
          "name" : "size",
          "in" : "path",
          "description" : "Server size unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Environment resource retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerSize"
                },
                "example" : {
                  "active" : true,
                  "cpu" : 1,
                  "id" : "2f4a5830-169d-4111-b913-e68c7b94fdbe",
                  "memory" : 512,
                  "name" : "myResource"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerSize"
                }
              }
            }
          },
          "404" : {
            "description" : "Environment resource not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "servers" ],
        "summary" : "Replace a server size by id",
        "description" : "Only super users with on-premises version have acceess to this endpoint.",
        "operationId" : "servers_options_server_size_replace",
        "parameters" : [ {
          "name" : "size",
          "in" : "path",
          "description" : "Server size unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerSizeData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Server size replaced. This operation is available only to super users.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerSize"
                },
                "example" : {
                  "active" : true,
                  "cpu" : 1,
                  "id" : "b673c7ab-65ad-4d6e-859e-0483eea86ad6",
                  "memory" : 512,
                  "name" : "myResourceWithPut"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerSize"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerSizeError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerSizeError"
                }
              }
            }
          },
          "404" : {
            "description" : "ServerSize not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "servers" ],
        "summary" : "Delete a server size by id",
        "description" : "Only super users with on-premises version have acceess to this endpoint.",
        "operationId" : "servers_options_server_size_delete",
        "parameters" : [ {
          "name" : "size",
          "in" : "path",
          "description" : "Server size unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Server size deleted. This operation is available only to super users"
          },
          "404" : {
            "description" : "ServerSize not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "servers" ],
        "summary" : "Update a server size by id",
        "description" : "Only super users with on-premises version have acceess to this endpoint.",
        "operationId" : "servers_options_server_size_update",
        "parameters" : [ {
          "name" : "size",
          "in" : "path",
          "description" : "Server size unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerSizeData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Server size updated. This operation is available only to super users.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerSize"
                },
                "example" : {
                  "active" : true,
                  "cpu" : 1,
                  "id" : "b673c7ab-65ad-4d6e-859e-0483eea86ad6",
                  "memory" : 512,
                  "name" : "myServerSizeWithPatch"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerSize"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerSizeError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerSizeError"
                }
              }
            }
          },
          "404" : {
            "description" : "Server size not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/" : {
      "get" : {
        "tags" : [ "teams" ],
        "summary" : "Get teams",
        "operationId" : "teams_list",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit when getting data.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting data.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Team list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Team"
                  }
                },
                "example" : [ ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Team"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "teams" ],
        "summary" : "Create a new team",
        "operationId" : "teams_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TeamData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Team created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/{team}/" : {
      "get" : {
        "tags" : [ "teams" ],
        "summary" : "Get a team",
        "operationId" : "teams_read",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Team retrieved successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            }
          },
          "404" : {
            "description" : "Team not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "teams" ],
        "summary" : "Replace a team",
        "operationId" : "teams_replace",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TeamData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Team updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "teams" ],
        "summary" : "Delete a team",
        "operationId" : "teams_delete",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Team deleted."
          },
          "404" : {
            "description" : "Team not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "teams" ],
        "summary" : "Update a team",
        "operationId" : "teams_update",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TeamData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Team updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Team"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamError"
                }
              }
            }
          },
          "404" : {
            "description" : "Team not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/{team}/billing/invoices/" : {
      "get" : {
        "tags" : [ "teams", "billing" ],
        "summary" : "Get team invoices",
        "operationId" : "teams_billing_invoices_list",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting items.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Invoice list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Invoice"
                  }
                },
                "example" : [ ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Invoice"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/{team}/billing/invoices/{id}/" : {
      "get" : {
        "tags" : [ "teams", "billing" ],
        "summary" : "Get an invoice",
        "operationId" : "teams_billing_invoices_read",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Team invoice retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404" : {
            "description" : "Team invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/{team}/billing/invoices/{invoice_id}/invoice-items/" : {
      "get" : {
        "tags" : [ "teams", "billing" ],
        "summary" : "Get team invoice items for a given invoice.",
        "operationId" : "teams_billing_invoice_items_list",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "invoice_id",
          "in" : "path",
          "description" : "Invoice id, expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering when getting items.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Team invoiceItem list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InvoiceItem"
                  }
                },
                "example" : [ ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InvoiceItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/{team}/billing/invoices/{invoice_id}/invoice-items/{id}" : {
      "get" : {
        "tags" : [ "teams", "billing" ],
        "summary" : "Get a specific team InvoiceItem.",
        "operationId" : "teams_billing_invoice_items_read",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "invoice_id",
          "in" : "path",
          "description" : "Invoice id, expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "InvoiceItem id, expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Team invoiceItem retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceItem"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceItem"
                }
              }
            }
          },
          "404" : {
            "description" : "InvoiceItem not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/{team}/billing/subscriptions/" : {
      "get" : {
        "tags" : [ "teams", "billing" ],
        "summary" : "Get active team subscriptons",
        "operationId" : "teams_billing_subscriptions_list",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering when getting items.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Teams subscription list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Subscription"
                  }
                },
                "example" : [ {
                  "application_fee_percent" : 0,
                  "cancel_at_period_end" : false,
                  "canceled_at" : "",
                  "created" : "2017-07-24T17:25:04Z",
                  "current_period_end" : "2017-07-31T17:25:04Z",
                  "current_period_start" : "2017-07-24T17:25:04Z",
                  "ended_at" : "",
                  "id" : "579208c3-4f5c-4b5d-baa3-309a06db681c",
                  "livemode" : false,
                  "plan" : "efb36cb0-0ef2-4af3-ae5d-10d9ae73845d",
                  "quantity" : 1,
                  "start" : "2017-07-24T17:25:04Z",
                  "status" : "trialing",
                  "stripe_id" : "sub_B5KyO9BZ6lUNPP",
                  "trial_end" : "2017-07-31T17:25:04Z",
                  "trial_start" : "2017-07-24T17:25:04Z"
                } ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Subscription"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "teams", "billing" ],
        "summary" : "Create a new team subscription",
        "operationId" : "teams_billing_subscriptions_create",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Team subscription created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Subscription"
                },
                "example" : {
                  "application_fee_percent" : 0,
                  "cancel_at_period_end" : false,
                  "canceled_at" : "",
                  "created" : "2017-07-24T17:25:04Z",
                  "current_period_end" : "2017-07-31T17:25:04Z",
                  "current_period_start" : "2017-07-24T17:25:04Z",
                  "ended_at" : "",
                  "id" : "579208c3-4f5c-4b5d-baa3-309a06db681c",
                  "livemode" : false,
                  "plan" : "efb36cb0-0ef2-4af3-ae5d-10d9ae73845d",
                  "quantity" : 1,
                  "start" : "2017-07-24T17:25:04Z",
                  "status" : "trialing",
                  "stripe_id" : "sub_B5KyO9BZ6lUNPP",
                  "trial_end" : "2017-07-31T17:25:04Z",
                  "trial_start" : "2017-07-24T17:25:04Z"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/{team}/billing/subscriptions/{id}/" : {
      "get" : {
        "tags" : [ "teams", "billing" ],
        "summary" : "Get team subscriptions",
        "operationId" : "teams_billing_subscriptions_read",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Team subscription retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Subscription"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Subscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Subscription not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "teams", "billing" ],
        "summary" : "Delete a subscription",
        "operationId" : "teams_billing_subscriptions_delete",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Subscription unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Subscription deleted."
          },
          "404" : {
            "description" : "Subscription not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/{team}/groups/" : {
      "get" : {
        "tags" : [ "teams" ],
        "summary" : "Get team groups",
        "operationId" : "teams_groups_list",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit when getting data.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting data.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Team groups list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Group"
                  }
                }
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Group"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/{team}/groups/{group}/" : {
      "get" : {
        "tags" : [ "teams" ],
        "summary" : "Get team group",
        "operationId" : "teams_groups_read",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group",
          "in" : "path",
          "description" : "Group unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Group retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "teams" ],
        "summary" : "Patch team group",
        "operationId" : "teams_groups_replace",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group",
          "in" : "path",
          "description" : "Group unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GroupData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Group replaced",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "teams" ],
        "summary" : "Delete team group",
        "operationId" : "teams_groups_delete",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group",
          "in" : "path",
          "description" : "Group unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Group deleted"
          },
          "404" : {
            "description" : "Group not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "teams" ],
        "summary" : "Patch team group",
        "operationId" : "teams_groups_update",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group",
          "in" : "path",
          "description" : "Group unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GroupData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Group updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupError"
                }
              }
            }
          },
          "404" : {
            "description" : "Group not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/{team}/groups/{group}/add/" : {
      "post" : {
        "tags" : [ "teams" ],
        "summary" : "Add user to group",
        "operationId" : "teams_groups_add_to_group",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group",
          "in" : "path",
          "description" : "Group unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User added to group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupUser"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupUser"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupUserError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupUserError"
                }
              }
            }
          },
          "404" : {
            "description" : "Group not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/teams/{team}/groups/{group}/remove/" : {
      "post" : {
        "tags" : [ "teams" ],
        "summary" : "User removed from group",
        "operationId" : "teams_groups_remove_from_group",
        "parameters" : [ {
          "name" : "team",
          "in" : "path",
          "description" : "Team unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group",
          "in" : "path",
          "description" : "Group unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User removed from group."
          },
          "400" : {
            "description" : "Invalid data supplied"
          },
          "404" : {
            "description" : "Group not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/profiles/" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get user list",
        "operationId" : "users_list",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit user list.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting users.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "username",
          "in" : "query",
          "description" : "User username.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "email",
          "in" : "query",
          "description" : "User email.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering when getting users.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                },
                "example" : [ {
                  "email" : "johndoe@email.com",
                  "first_name" : "John",
                  "id" : "66949654-1f75-4c6f-a5c5-e3572eae6527",
                  "last_name" : "Doe",
                  "profile" : {
                    "avatar_url" : "http://example.com/",
                    "bio" : "I like tests",
                    "company" : "3Blades",
                    "location" : "Atlanta, GA",
                    "timezone" : "America/New_York",
                    "url" : "http://about.me/myprofile"
                  },
                  "username" : "johndoe"
                }, {
                  "email" : "janedoe@email.com",
                  "first_name" : "John",
                  "id" : "66949654-1f75-4c6f-a5c5-e3572eae6527",
                  "last_name" : "Doe",
                  "profile" : {
                    "avatar_url" : "http://example.com/",
                    "bio" : "I like tests",
                    "company" : "3Blades",
                    "location" : "Atlanta, GA",
                    "timezone" : "America/New_York",
                    "url" : "http://about.me/myprofile"
                  },
                  "username" : "janedoe"
                } ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Create new user",
        "description" : "Only admin users can create new users. New users have active status by default.",
        "operationId" : "users_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "User created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "example" : {
                  "email" : "johndoe@email.com",
                  "first_name" : "John",
                  "id" : "66949654-1f75-4c6f-a5c5-e3572eae6527",
                  "last_name" : "Doe",
                  "profile" : {
                    "avatar_url" : "http://example.com/",
                    "bio" : "I like tests",
                    "company" : "3Blades",
                    "location" : "Atlanta, GA",
                    "timezone" : "America/New_York",
                    "url" : "http://about.me/myprofile"
                  },
                  "username" : "johndoe"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/profiles/{user}/" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Retrieve a user",
        "operationId" : "users_read",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "Unique identifier expressed as UUID or username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "example" : {
                  "email" : "johndoe@email.com",
                  "first_name" : "John",
                  "id" : "66949654-1f75-4c6f-a5c5-e3572eae6527",
                  "last_name" : "Doe",
                  "profile" : {
                    "avatar_url" : "http://example.com/",
                    "bio" : "I like tests",
                    "company" : "3Blades",
                    "location" : "Atlanta, GA",
                    "timezone" : "America/New_York",
                    "url" : "http://about.me/myprofile"
                  },
                  "username" : "johndoe"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "users" ],
        "summary" : "Delete a user",
        "operationId" : "users_delete",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "User identifier expressed as UUID or username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "User deleted."
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "users" ],
        "summary" : "Update a user",
        "operationId" : "users_update",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "User unique identifier expressed as UUID or username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "User updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "example" : {
                  "email" : "runB@email.com",
                  "first_name" : "John",
                  "id" : "66949654-1f75-4c6f-a5c5-e3572eae6527",
                  "last_name" : "Doe",
                  "profile" : {
                    "avatar_url" : "http://example.com/",
                    "bio" : "Data updated with patch",
                    "company" : "3Blades",
                    "location" : "Atlanta, GA",
                    "timezone" : "America/New_York",
                    "url" : "http://about.me/myprofile"
                  },
                  "username" : "johndoe"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user}/api-key/" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Retrieve account's API key",
        "operationId" : "users_api-key_list",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "User unique identifier expressed as UUID or username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Api Key"
          }
        }
      }
    },
    "/v1/users/{user}/avatar/" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Retrieve user's avatar",
        "operationId" : "user_avatar_get",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "User unique identifier expressed as UUIDor username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User avatar"
          }
        }
      },
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Add user avatar",
        "operationId" : "user_avatar_set",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "User unique identifier expressed as UUID or username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Added user avatar",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied"
          }
        }
      },
      "delete" : {
        "tags" : [ "users" ],
        "summary" : "Delete avatar",
        "operationId" : "user_avatar_delete",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "User unique identifier expressed as UUID or username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Avatar deleted"
          },
          "404" : {
            "description" : "Avatar not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "users" ],
        "summary" : "Update a project file",
        "operationId" : "user_avatar_update",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "User unique identifier expressed as UUID or username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Avatar updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserError"
                }
              }
            }
          },
          "404" : {
            "description" : "Avatar not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user}/emails/" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Retrieve account email addresses",
        "operationId" : "users_emails_list",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "User unique identifier as expressed as UUID or username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limite when getting email list.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting email list.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering when getting email list.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Email list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Email"
                  }
                },
                "example" : [ ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Email"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Create an email address",
        "operationId" : "users_emails_create",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "User unique identifier expressed as UUID or username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Email created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Email"
                },
                "example" : {
                  "address" : "post@email.com",
                  "id" : "383e0d16-2052-4196-95b8-d9d73ed043a9",
                  "public" : true,
                  "unsubscribed" : false
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Email"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user}/emails/{email_id}/" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Retrieve a user's email addresses",
        "operationId" : "users_emails_read",
        "parameters" : [ {
          "name" : "email_id",
          "in" : "path",
          "description" : "Email unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "User unique identifier expressed as UUID or username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Email retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Email"
                },
                "example" : {
                  "address" : "post@email.com",
                  "id" : "383e0d16-2052-4196-95b8-d9d73ed043a9",
                  "public" : true,
                  "unsubscribed" : false
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Email"
                }
              }
            }
          },
          "404" : {
            "description" : "Email not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "users" ],
        "summary" : "Replace an email address",
        "operationId" : "users_emails_replace",
        "parameters" : [ {
          "name" : "email_id",
          "in" : "path",
          "description" : "Email unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "User unique identifier expressed as UUID or username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Email updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Email"
                },
                "example" : {
                  "address" : "put@email.com",
                  "id" : "383e0d16-2052-4196-95b8-d9d73ed043a9",
                  "public" : false,
                  "unsubscribed" : true
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Email"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "users" ],
        "summary" : "Delete an email address",
        "operationId" : "users_emails_delete",
        "parameters" : [ {
          "name" : "email_id",
          "in" : "path",
          "description" : "Email unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "User unique identifier expressed as UUID or username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Email deleted."
          },
          "404" : {
            "description" : "Email not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "users" ],
        "summary" : "Update an email address",
        "operationId" : "users_emails_update",
        "parameters" : [ {
          "name" : "email_id",
          "in" : "path",
          "description" : "Email unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "user",
          "in" : "path",
          "description" : "User unique identifier expressed as UUID or username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Email updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Email"
                },
                "example" : {
                  "address" : "patch@email.com",
                  "id" : "383e0d16-2052-4196-95b8-d9d73ed043a9",
                  "public" : false,
                  "unsubscribed" : false
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Email"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailError"
                }
              }
            }
          },
          "404" : {
            "description" : "Email not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user}/ssh-key/" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Retrieve an SSH key",
        "operationId" : "users_ssh-key_list",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "User unique identifier expressed as UUID or username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "SSH Key.",
            "content" : {
              "application/json" : {
                "example" : {
                  "key" : "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCqadyIPIEOF4M7SDoI+MHnAj6q2CY2j62Eg0sNbBbjnuekxnhSWVVKPte+NVtK4MWIyw3wnCCzTjwe0p2pQpMqxjqnCAkBPGhOjrRWTvV54hHTihBxiAEmXqbaBg5e6SaXcqP1OajWYzDqhts4ISer0uymzi0hW65At5i5k87Xu9HSM/Q0ySVJGm0rMuDCIoaTIeQdTkAI9ww/cmOM7uvIDO0OJv2xai9xLB9APVq8zCtqWdivMaqo2waPDT/I9bwtSZxRsnRMakGmj3CWvciHv13UsGlbB7nTeDKX0eyQl/5SADLO0bU+hY/8BpRjjtdq57Pqn/Xyw22YarDkG74gjLG5GBFZkBxcpENoUtCUyE2bhBT4x9yXlTeycMBTopGtzTfIHrJtIgNCFMhg9LbK4IKP/1pLj8SrVaQ9/k/QkxmDFoqfwdGd3AWOghMCAbAB7KaDKrj/XBf/KgTd8ZozjvkTzu2YRf4o3DebxRJipPQumrH3iXX5Kfe9lBWkR7Smewwp2XZrdgBeXN/54hd+Ic3upi528IGzEzu3/xtLT/e7kLi1QH7CVVN1sskZkIRr7aukw4YiVWgVOAlqKzJEoE/BPZSOA0NlgG0h37ZmyhdY1VqtoD+Vnj7Qh272PlTB14ndEVTqGuZhsCSxIhXev+METZ6XezK5n1VQeHGveQ=="
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user}/ssh-key/reset/" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Recreate an SSH key",
        "operationId" : "users_ssh-key_reset",
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "description" : "User unique identifier expressed as UUID or username.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Reset SSH Key successfully.",
            "content" : {
              "application/json" : {
                "example" : {
                  "key" : "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDhMvg2+n2yNu0H2Hg8uiXfQtAid0WGRigNckb5J0T9GFINmqkYalI/AsWZbl4UfNMviD73h9xowUx+d7s2vB3E8bFxB9OWM22eLSp8fnbuhdI5mKBflq0jr6ms1cR/SD3YsbZ9sX6BqycQrjjYYl7WLM9rgec6b+EYyr/6nbDH/wql06TrNl6LUNkqI+YIqjRvqMeNEY9ux3sB+f46FRKO683u/cRCcp1eWAYf1ByYupIGREbQFLxhYv/NcKD8uIo7DRAuutwHKGOgnAl4WGUVsT5dplhaDYKlDTf2iMiJ+QDT25QABdrkHcIsu5D21AIdH3FI5UQnnu4unyEA77IDLp2EwKRr9k1XQc1o3zQ61+9Gm7Rt80WWgRsnhmshvAIDNcBv1+82kmA9jyeUf3M7KoRJLk6nIbZ1NwoVCX0VF3lRIB0Hvm/dL7Rpk8m/hE0SIIWIGaXbOT4ANFj+TxcF1Mfk7C3/T5/AYLHcq9ocYFKe4Q3Jv7tuHm600edpUfORdpCpjytcKStza07dRDa+OU577r6a1zHMrEMh8oEUtVO5pC1+EaRijTVaOR62DoarHdxJ23Ctk44o0JZfzj9VoVaAwVAhL1aT3pAQxQlWiTKpmYaHUYUp9SRJhyeFr/gpeIGTydKdawkh9Mz8KMlnu1GUolDDuOvSnvidzWaEaw=="
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied."
          }
        }
      }
    },
    "/v1/{namespace}/billing/cards/" : {
      "get" : {
        "tags" : [ "billing" ],
        "summary" : "Get credit cards",
        "operationId" : "billing_cards_list",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Set limit when retrieving credit or debit cards.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Set offset when retriving cards.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Order when retrieving cards.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Card list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Card"
                  }
                },
                "example" : [ ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Card"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "billing" ],
        "summary" : "Create new credit card",
        "operationId" : "billing_cards_create",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CardDataPost"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Card created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Card"
                },
                "example" : {
                  "address_city" : "Atlanta",
                  "address_country" : "United States",
                  "address_line1" : "3423 Piedmont Rd NE",
                  "address_line1_check" : "pass",
                  "address_line2" : "",
                  "address_state" : "Georgia",
                  "address_zip" : "30305",
                  "address_zip_check" : "pass",
                  "brand" : "Visa",
                  "created" : "2017-07-24T15:16:07.995380Z",
                  "customer" : "7e102c7b-55cd-49a0-9b23-58865eba1cc3",
                  "cvc_check" : "",
                  "exp_month" : 1,
                  "exp_year" : 2019,
                  "fingerprint" : "WpZ4zQymdmF5LhbH",
                  "funding" : "credit",
                  "id" : "4126086e-525a-4027-b9e7-ae8de47210b2",
                  "last4" : "4242",
                  "name" : "John Doe",
                  "stripe_id" : "card_1Aj8HuLUHPUzUsaQlDbaXjzA"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Card"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/billing/cards/{id}/" : {
      "get" : {
        "tags" : [ "billing" ],
        "summary" : "Get credit card by id",
        "operationId" : "billing_cards_read",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "User unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Card retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Card"
                },
                "example" : {
                  "address_city" : "Atlanta",
                  "address_country" : "United States",
                  "address_line1" : "3423 Piedmont Rd NE",
                  "address_line1_check" : "pass",
                  "address_line2" : "",
                  "address_state" : "Georgia",
                  "address_zip" : "30305",
                  "address_zip_check" : "pass",
                  "brand" : "Visa",
                  "created" : "2017-07-24T15:16:07.995380Z",
                  "customer" : "7e102c7b-55cd-49a0-9b23-58865eba1cc3",
                  "cvc_check" : "",
                  "exp_month" : 1,
                  "exp_year" : 2019,
                  "fingerprint" : "WpZ4zQymdmF5LhbH",
                  "funding" : "credit",
                  "id" : "4126086e-525a-4027-b9e7-ae8de47210b2",
                  "last4" : "4242",
                  "name" : "John Doe",
                  "stripe_id" : "card_1Aj8HuLUHPUzUsaQlDbaXjzA"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Card"
                }
              }
            }
          },
          "404" : {
            "description" : "Card not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "billing" ],
        "summary" : "Replace a credit card",
        "operationId" : "billing_cards_replace",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CardDataPutandPatch"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Card updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Card"
                },
                "example" : {
                  "address_city" : "Atlanta",
                  "address_country" : "United States",
                  "address_line1" : "3423 Piedmont Rd NE",
                  "address_line1_check" : "pass",
                  "address_line2" : "",
                  "address_state" : "Georgia",
                  "address_zip" : "30305",
                  "address_zip_check" : "pass",
                  "brand" : "Visa",
                  "created" : "2017-07-24T15:16:07.995380Z",
                  "customer" : "7e102c7b-55cd-49a0-9b23-58865eba1cc3",
                  "cvc_check" : "",
                  "exp_month" : 1,
                  "exp_year" : 2027,
                  "fingerprint" : "WpZ4zQymdmF5LhbH",
                  "funding" : "credit",
                  "id" : "4126086e-525a-4027-b9e7-ae8de47210b2",
                  "last4" : "4242",
                  "name" : "John Doe",
                  "stripe_id" : "card_1Aj8HuLUHPUzUsaQlDbaXjzA"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Card"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "billing" ],
        "summary" : "Delete a credit card",
        "operationId" : "billing_cards_delete",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Card unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Card deleted."
          },
          "404" : {
            "description" : "Card not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "billing" ],
        "summary" : "Update a credit card",
        "operationId" : "billing_cards_update",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Card unique identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CardDataPutandPatch"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Card updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Card"
                },
                "example" : {
                  "address_city" : "Atlanta",
                  "address_country" : "United States",
                  "address_line1" : "3423 Piedmont Rd NE",
                  "address_line1_check" : "pass",
                  "address_line2" : "",
                  "address_state" : "Georgia",
                  "address_zip" : "30305",
                  "address_zip_check" : "pass",
                  "brand" : "Visa",
                  "created" : "2017-07-24T15:16:10.806003Z",
                  "customer" : "7e102c7b-55cd-49a0-9b23-58865eba1cc3",
                  "cvc_check" : "",
                  "exp_month" : 1,
                  "exp_year" : 2025,
                  "fingerprint" : "WpZ4zQymdmF5LhbH",
                  "funding" : "credit",
                  "id" : "4126086e-525a-4027-b9e7-ae8de47210b2",
                  "last4" : "4242",
                  "name" : "John Doe",
                  "stripe_id" : "card_1Aj8HuLUHPUzUsaQlDbaXjzA"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Card"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardUpdateError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardUpdateError"
                }
              }
            }
          },
          "404" : {
            "description" : "Card not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/billing/invoices/" : {
      "get" : {
        "tags" : [ "billing" ],
        "summary" : "Get invoices",
        "operationId" : "billing_invoices_list",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering when getting items.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Invoice list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Invoice"
                  }
                },
                "example" : [ ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Invoice"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/billing/invoices/{id}/" : {
      "get" : {
        "tags" : [ "billing" ],
        "summary" : "Get an invoice",
        "operationId" : "billing_invoices_read",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Invoice retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404" : {
            "description" : "Invoice not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/billing/invoices/{invoice_id}/invoice-items/" : {
      "get" : {
        "tags" : [ "billing" ],
        "summary" : "Get invoice items for a given invoice.",
        "operationId" : "billing_invoice_items_list",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "invoice_id",
          "in" : "path",
          "description" : "Invoice id, expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering when getting items.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "InvoiceItem list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InvoiceItem"
                  }
                },
                "example" : [ ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InvoiceItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/billing/invoices/{invoice_id}/invoice-items/{id}" : {
      "get" : {
        "tags" : [ "billing" ],
        "summary" : "Get a specific InvoiceItem.",
        "operationId" : "billing_invoice_items_read",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "invoice_id",
          "in" : "path",
          "description" : "Invoice id, expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "InvoiceItem id, expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "InvoiceItem retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceItem"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceItem"
                }
              }
            }
          },
          "404" : {
            "description" : "InvoiceItem not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/billing/plans/" : {
      "get" : {
        "tags" : [ "billing" ],
        "summary" : "Get billing plans",
        "operationId" : "billing_plans_list",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering when getting items.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Plan list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Plan"
                  }
                },
                "example" : [ {
                  "amount" : 20,
                  "created" : "2017-07-24T15:46:39Z",
                  "currency" : "usd",
                  "id" : "d5791ab3-aefb-45af-80fc-2c7a166d78eb",
                  "interval" : "year",
                  "interval_count" : 1,
                  "livemode" : false,
                  "metadata" : { },
                  "name" : "patch_billing_plan",
                  "statement_descriptor" : "",
                  "stripe_id" : "post_billing_plan",
                  "trial_period_days" : 7
                }, {
                  "amount" : 20,
                  "created" : "2017-07-24T15:46:48Z",
                  "currency" : "usd",
                  "id" : "256fd63a-9d6b-48d2-8ff5-f56eaf54c59b",
                  "interval" : "week",
                  "interval_count" : 52,
                  "livemode" : false,
                  "metadata" : { },
                  "name" : "post_billing_plan_2",
                  "statement_descriptor" : "",
                  "stripe_id" : "post_billing_plan_2",
                  "trial_period_days" : 7
                }, {
                  "amount" : 20,
                  "created" : "2017-07-24T15:46:52Z",
                  "currency" : "usd",
                  "id" : "5915a2ae-12f5-4927-bb26-3b0609228791",
                  "interval" : "month",
                  "interval_count" : 12,
                  "livemode" : false,
                  "metadata" : { },
                  "name" : "post_billing_plan_3",
                  "statement_descriptor" : "",
                  "stripe_id" : "post_billing_plan_3",
                  "trial_period_days" : 7
                } ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Plan"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/billing/plans/{id}/" : {
      "get" : {
        "tags" : [ "billing" ],
        "summary" : "Get a billing plan",
        "operationId" : "billing_plans_read",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Plan unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Plan retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Plan"
                },
                "example" : {
                  "amount" : 20,
                  "created" : "2017-07-24T15:46:39Z",
                  "currency" : "usd",
                  "id" : "d5791ab3-aefb-45af-80fc-2c7a166d78eb",
                  "interval" : "year",
                  "interval_count" : 1,
                  "livemode" : false,
                  "metadata" : { },
                  "name" : "post_billing_plan",
                  "statement_descriptor" : "",
                  "stripe_id" : "post_billing_plan",
                  "trial_period_days" : 7
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Plan"
                }
              }
            }
          },
          "404" : {
            "description" : "Plan not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/billing/subscriptions/" : {
      "get" : {
        "tags" : [ "billing" ],
        "summary" : "Get active subscriptons",
        "operationId" : "billing_subscriptions_list",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering when getting items.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Subscription list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Subscription"
                  }
                },
                "example" : [ {
                  "application_fee_percent" : 0,
                  "cancel_at_period_end" : false,
                  "canceled_at" : "",
                  "created" : "2017-07-24T17:25:04Z",
                  "current_period_end" : "2017-07-31T17:25:04Z",
                  "current_period_start" : "2017-07-24T17:25:04Z",
                  "ended_at" : "",
                  "id" : "579208c3-4f5c-4b5d-baa3-309a06db681c",
                  "livemode" : false,
                  "plan" : "efb36cb0-0ef2-4af3-ae5d-10d9ae73845d",
                  "quantity" : 1,
                  "start" : "2017-07-24T17:25:04Z",
                  "status" : "trialing",
                  "stripe_id" : "sub_B5KyO9BZ6lUNPP",
                  "trial_end" : "2017-07-31T17:25:04Z",
                  "trial_start" : "2017-07-24T17:25:04Z"
                } ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Subscription"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "billing" ],
        "summary" : "Create a new subscription",
        "operationId" : "billing_subscriptions_create",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriptionData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Subscription created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Subscription"
                },
                "example" : {
                  "application_fee_percent" : 0,
                  "cancel_at_period_end" : false,
                  "canceled_at" : "",
                  "created" : "2017-07-24T17:25:04Z",
                  "current_period_end" : "2017-07-31T17:25:04Z",
                  "current_period_start" : "2017-07-24T17:25:04Z",
                  "ended_at" : "",
                  "id" : "579208c3-4f5c-4b5d-baa3-309a06db681c",
                  "livemode" : false,
                  "plan" : "efb36cb0-0ef2-4af3-ae5d-10d9ae73845d",
                  "quantity" : 1,
                  "start" : "2017-07-24T17:25:04Z",
                  "status" : "trialing",
                  "stripe_id" : "sub_B5KyO9BZ6lUNPP",
                  "trial_end" : "2017-07-31T17:25:04Z",
                  "trial_start" : "2017-07-24T17:25:04Z"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriptionError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/billing/subscriptions/{id}/" : {
      "get" : {
        "tags" : [ "billing" ],
        "summary" : "Get a subscriptions",
        "operationId" : "billing_subscriptions_read",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Subscription retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Subscription"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Subscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Subscription not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "billing" ],
        "summary" : "Delete a subscription",
        "operationId" : "billing_subscriptions_delete",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Subscription unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Subscription deleted."
          },
          "404" : {
            "description" : "Subscription not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/notifications/" : {
      "get" : {
        "tags" : [ "notifications" ],
        "summary" : "Get notifications of all types and entities for the authenticated user.",
        "operationId" : "notifications_list",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team data.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "read",
          "in" : "query",
          "description" : "When true, get only read notifications. When false, get only unread notifications. Default behavior is to return both read and unread.",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of notifications",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Notification"
                  }
                }
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Notification"
                  }
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "notifications" ],
        "summary" : "Mark a list of notifications as either read or unread.",
        "operationId" : "notifications_update_list",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NotificationListUpdateData"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Notification updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Notification"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Notification"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/notifications/entity/{entity}" : {
      "get" : {
        "tags" : [ "notifications" ],
        "summary" : "Get notifications of all types and entities for the authenticated user.",
        "operationId" : "notifications_list_entity",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team data.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entity",
          "in" : "path",
          "description" : "Entity to filter notifications by.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "billing" ]
          }
        }, {
          "name" : "read",
          "in" : "query",
          "description" : "When true, get only read notifications. When false, get only unread notifications. Default behavior is to return both read and unread.",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of notifications",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Notification"
                  }
                }
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Notification"
                  }
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "notifications" ],
        "summary" : "Mark a list of notifications as either read or unread.",
        "operationId" : "notifications_update_entity_list",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entity",
          "in" : "path",
          "description" : "Entity to filter notifications by.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "billing" ]
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NotificationListUpdateData"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Notification updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Notification"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Notification"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/notifications/settings/" : {
      "get" : {
        "tags" : [ "notifications" ],
        "summary" : "Retrieve global notification settings for the authenticated user",
        "operationId" : "notification_settings_read",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team data.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Global notification settings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NotificationSettings"
                  }
                }
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NotificationSettings"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Notification not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "notifications" ],
        "summary" : "Create global notification settings",
        "operationId" : "notification_settings_create",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NotificationSettingsData"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Global Notification Settings created successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettings"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettings"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettingsError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettingsError"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "notifications" ],
        "summary" : "Modify global notification settings.",
        "operationId" : "notification_settings_update",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NotificationSettingsData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Notification Settings updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettings"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettings"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettingsError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettingsError"
                }
              }
            }
          },
          "404" : {
            "description" : "Notification Settings not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/notifications/settings/entity/{entity}" : {
      "get" : {
        "tags" : [ "notifications" ],
        "summary" : "Retrieve global notification settings for the authenticated user",
        "operationId" : "notification_settings_entity_read",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team data.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entity",
          "in" : "path",
          "description" : "Entity whose settings should be retrieved.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "billing" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Global notification settings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NotificationSettings"
                  }
                }
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NotificationSettings"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Notification not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "notifications" ],
        "summary" : "Create global notification settings",
        "operationId" : "notification_settings_entity_create",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entity",
          "in" : "path",
          "description" : "Entity whose settings should be retrieved.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "billing" ]
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NotificationSettingsData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Global Notification Settings created successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettings"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettings"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettingsError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettingsError"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "notifications" ],
        "summary" : "Modify global notification settings.",
        "operationId" : "notification_settings_entity_update",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entity",
          "in" : "path",
          "description" : "Entity whose settings should be retrieved.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "billing" ]
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NotificationSettingsData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Notification Settings updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettings"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettings"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettingsError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationSettingsError"
                }
              }
            }
          },
          "404" : {
            "description" : "Notification Settings not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/notifications/{notification_id}" : {
      "get" : {
        "tags" : [ "notifications" ],
        "summary" : "Retrieve a specific notification.",
        "operationId" : "notification_read",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team data.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "notification_id",
          "in" : "path",
          "description" : "Notification UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve a notification.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Notification"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Notification"
                }
              }
            }
          },
          "404" : {
            "description" : "Notification not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "notifications" ],
        "summary" : "Mark a specific notification as either read or unread.",
        "operationId" : "notification_update",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team data.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "notification_id",
          "in" : "path",
          "description" : "Notification UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NotificationUpdateData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Notification updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Notification"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Notification"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationError"
                }
              }
            }
          },
          "404" : {
            "description" : "Notification not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/oauth/applications/" : {
      "get" : {
        "tags" : [ "oauth" ],
        "summary" : "Retrieve oauth applications",
        "operationId" : "oauth_applications_list",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Set limit when retrieving items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when retrieving items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Set order when retrieving items.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OAuth2 application list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Application"
                  }
                },
                "example" : [ {
                  "authorization_grant_type" : "client-credentials",
                  "client_id" : "CsJiQuhq66C6QP7ZKYzclOwrSVKctdYAbAXu7iHm",
                  "client_secret" : "iIzh1cidklpF6eoCin986j0YTDS3hjgH1JDs4Wv4jriG7yXpJu8TfoKmtMC4QTRBbF2IzJnfRLBGdZvKm1koyS9xfGfdTDSi5JAVJAwTrxw0VAkZZr0u80afSQ9OVKvJ",
                  "client_type" : "confidential",
                  "id" : "7011a6e6-b4ea-4600-8ab1-01127e1ccdda",
                  "name" : "Test",
                  "redirect_uris" : ""
                } ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Application"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "oauth" ],
        "summary" : "Create a new OAuth2 application",
        "operationId" : "oauth_application_create",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplicationData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Application created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Application"
                },
                "example" : {
                  "authorization_grant_type" : "client-credentials",
                  "client_id" : "CsJiQuhq66C6QP7ZKYzclOwrSVKctdYAbAXu7iHm",
                  "client_secret" : "iIzh1cidklpF6eoCin986j0YTDS3hjgH1JDs4Wv4jriG7yXpJu8TfoKmtMC4QTRBbF2IzJnfRLBGdZvKm1koyS9xfGfdTDSi5JAVJAwTrxw0VAkZZr0u80afSQ9OVKvJ",
                  "client_type" : "confidential",
                  "id" : "7011a6e6-b4ea-4600-8ab1-01127e1ccdda",
                  "name" : "Test",
                  "redirect_uris" : ""
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Application"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplicationError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplicationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/oauth/applications/{application}/" : {
      "get" : {
        "tags" : [ "oauth" ],
        "summary" : "Get an application by id",
        "operationId" : "oauth_application_read",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "application",
          "in" : "path",
          "description" : "Application unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Application retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Application"
                },
                "example" : {
                  "authorization_grant_type" : "client-credentials",
                  "client_id" : "CsJiQuhq66C6QP7ZKYzclOwrSVKctdYAbAXu7iHm",
                  "client_secret" : "iIzh1cidklpF6eoCin986j0YTDS3hjgH1JDs4Wv4jriG7yXpJu8TfoKmtMC4QTRBbF2IzJnfRLBGdZvKm1koyS9xfGfdTDSi5JAVJAwTrxw0VAkZZr0u80afSQ9OVKvJ",
                  "client_type" : "confidential",
                  "id" : "7011a6e6-b4ea-4600-8ab1-01127e1ccdda",
                  "name" : "Test",
                  "redirect_uris" : ""
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Application"
                }
              }
            }
          },
          "404" : {
            "description" : "Application not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "oauth" ],
        "summary" : "Replace an application by id",
        "operationId" : "oauth_application_replace",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "application",
          "in" : "path",
          "description" : "Application unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplicationData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Application replaced.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Application"
                },
                "example" : {
                  "authorization_grant_type" : "client-credentials",
                  "client_id" : "CsJiQuhq66C6QP7ZKYzclOwrSVKctdYAbAXu7iHm",
                  "client_secret" : "iIzh1cidklpF6eoCin986j0YTDS3hjgH1JDs4Wv4jriG7yXpJu8TfoKmtMC4QTRBbF2IzJnfRLBGdZvKm1koyS9xfGfdTDSi5JAVJAwTrxw0VAkZZr0u80afSQ9OVKvJ",
                  "client_type" : "confidential",
                  "id" : "7011a6e6-b4ea-4600-8ab1-01127e1ccdda",
                  "name" : "Test",
                  "redirect_uris" : ""
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Application"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplicationError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplicationError"
                }
              }
            }
          },
          "404" : {
            "description" : "Application not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "oauth" ],
        "summary" : "Delete an application by id",
        "operationId" : "oauth_application_delete",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "application",
          "in" : "path",
          "description" : "Application unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Application deleted."
          },
          "404" : {
            "description" : "Application not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "oauth" ],
        "summary" : "Update an application by id",
        "operationId" : "oauth_application_update",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "application",
          "in" : "path",
          "description" : "Application unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplicationData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Application updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Application"
                },
                "example" : {
                  "authorization_grant_type" : "client-credentials",
                  "client_id" : "CsJiQuhq66C6QP7ZKYzclOwrSVKctdYAbAXu7iHm",
                  "client_secret" : "iIzh1cidklpF6eoCin986j0YTDS3hjgH1JDs4Wv4jriG7yXpJu8TfoKmtMC4QTRBbF2IzJnfRLBGdZvKm1koyS9xfGfdTDSi5JAVJAwTrxw0VAkZZr0u80afSQ9OVKvJ",
                  "client_type" : "confidential",
                  "id" : "7011a6e6-b4ea-4600-8ab1-01127e1ccdda",
                  "name" : "Test",
                  "redirect_uris" : ""
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Application"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplicationError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplicationError"
                }
              }
            }
          },
          "404" : {
            "description" : "Application not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Get available projects",
        "operationId" : "projects_list",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit when getting data.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting data.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "private",
          "in" : "query",
          "description" : "Private project or public project.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Project name.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering when getting projects.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Project list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Project"
                  }
                },
                "example" : [ ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Project"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Create a new project",
        "operationId" : "projects_create",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProjectData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Project created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                },
                "example" : {
                  "collaborators" : [ "johndoe" ],
                  "description" : "Project created by me",
                  "id" : "79cadd17-5738-4f02-8377-68e67d3eee18",
                  "last_updated" : "2017-07-24T14:54:38.797878Z",
                  "name" : "myProject",
                  "owner" : "johndoe",
                  "private" : false
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/project-copy-check/" : {
      "head" : {
        "tags" : [ "projects" ],
        "summary" : "Check if you are able to copy a project to your account.",
        "operationId" : "project_copy_check",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "project" ],
                "type" : "object",
                "properties" : {
                  "project" : {
                    "type" : "string",
                    "description" : "UUID of the project the user wishes to copy."
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The authenticated has permission to copy this project"
          },
          "404" : {
            "description" : "Project not found."
          }
        }
      }
    },
    "/v1/{namespace}/projects/project-copy/" : {
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Copy a project to your own account.",
        "operationId" : "project_copy",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "required" : [ "project" ],
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "Name for the newly copied project"
                  },
                  "project" : {
                    "type" : "string",
                    "description" : "UUID of the project the user wishes to copy."
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Project copied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectError"
                }
              }
            }
          },
          "404" : {
            "description" : "Project not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Get a project",
        "operationId" : "projects_read",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Project retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                },
                "example" : {
                  "collaborators" : [ "johndoe" ],
                  "description" : "Project created by me",
                  "id" : "79cadd17-5738-4f02-8377-68e67d3eee18",
                  "last_updated" : "2017-07-24T14:54:38.797878Z",
                  "name" : "myProject",
                  "owner" : "johndoe",
                  "private" : false
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "404" : {
            "description" : "Project not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "projects" ],
        "summary" : "Replace a project",
        "operationId" : "projects_replace",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team namespace.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProjectData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Project updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                },
                "example" : {
                  "collaborators" : [ "johndoe" ],
                  "description" : "My project updated by me using PUT",
                  "id" : "79cadd17-5738-4f02-8377-68e67d3eee18",
                  "last_updated" : "2017-07-24T14:54:43.225603Z",
                  "name" : "myProject",
                  "owner" : "johndoe",
                  "private" : true
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Delete a project",
        "operationId" : "projects_delete",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Project deleted."
          },
          "404" : {
            "description" : "Project not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "projects" ],
        "summary" : "Update a project",
        "operationId" : "projects_update",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProjectData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Project updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                },
                "example" : {
                  "collaborators" : [ "johndoe" ],
                  "description" : "My project updated by me using PATCH",
                  "id" : "79cadd17-5738-4f02-8377-68e67d3eee18",
                  "last_updated" : "2017-07-24T14:54:43.225603Z",
                  "name" : "myProject",
                  "owner" : "johndoe",
                  "private" : true
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectError"
                }
              }
            }
          },
          "404" : {
            "description" : "Project not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/collaborators/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Get project collaborators",
        "operationId" : "projects_collaborators_list",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit when retrieving items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when retrieving items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering when retrieving items.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Collaborator list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Collaborator"
                  }
                },
                "example" : [ {
                  "email" : "johndoe@example.com",
                  "first_name" : "John",
                  "id" : "42946cd9-2fb6-4764-944b-e107b972dd97",
                  "joined" : "2017-07-24T14:54:38.819171Z",
                  "last_name" : "Doe",
                  "owner" : true,
                  "permissions" : [ "read_project", "write_project" ],
                  "username" : "johndoe"
                } ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Collaborator"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Create project collaborators",
        "operationId" : "projects_collaborators_create",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CollaboratorData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Collaborator created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Collaborator"
                },
                "example" : {
                  "email" : "collaborator@examples.com",
                  "first_name" : "John",
                  "id" : "ef4d3a93-ae36-428c-b00f-5805b496ed95",
                  "joined" : "2017-07-24T14:54:49.205912Z",
                  "last_name" : "Doe",
                  "owner" : false,
                  "permissions" : [ "read_project", "write_project" ],
                  "username" : "collaborator"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Collaborator"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollaboratorError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollaboratorError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/collaborators/{collaborator}/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Get a project collaborator",
        "operationId" : "projects_collaborators_read",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collaborator",
          "in" : "path",
          "description" : "Collaborator unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Collaborator retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Collaborator"
                },
                "example" : {
                  "email" : "collaborator@illumidesk.com",
                  "first_name" : "John",
                  "id" : "ef4d3a93-ae36-428c-b00f-5805b496ed95",
                  "joined" : "2017-07-24T14:54:49.205912Z",
                  "last_name" : "Doe",
                  "owner" : false,
                  "permissions" : [ "read_project", "write_project" ],
                  "username" : "collaborator"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Collaborator"
                }
              }
            }
          },
          "404" : {
            "description" : "Collaborator not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Delete a project collaborator",
        "operationId" : "projects_collaborators_delete",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collaborator",
          "in" : "path",
          "description" : "Collaborator unique identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Collaborator deleted."
          },
          "404" : {
            "description" : "Collaborator not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "projects" ],
        "summary" : "Update project collaborator",
        "operationId" : "projects_collaborators_update",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collaborator",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CollaboratorData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Collaborator updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Collaborator"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Collaborator"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollaboratorError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollaboratorError"
                }
              }
            }
          },
          "404" : {
            "description" : "Collaborator not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/deployments/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Retrieve deployments",
        "operationId" : "projects_deployments_list",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit results when getting deployment list.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset results when getting deployment list.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Server name.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering option when getting deployment list.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deployment list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Deployment"
                  }
                },
                "example" : [ ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Deployment"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Create a new deployment",
        "operationId" : "projects_deployments_create",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifer expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeploymentData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Deployment created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Deployment"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Deployment"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeploymentError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeploymentError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/deployments/{deployment}/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Retrieve a deployment",
        "operationId" : "projects_deployments_read",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployment",
          "in" : "path",
          "description" : "Deployment unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deployment retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Deployment"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Deployment"
                }
              }
            }
          },
          "404" : {
            "description" : "Deployment not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "projects" ],
        "summary" : "Replace a deployment",
        "operationId" : "projects_deployments_replace",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployment",
          "in" : "path",
          "description" : "Deployment unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeploymentData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Deployment updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Deployment"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Deployment"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeploymentError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeploymentError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Delete a deployment",
        "operationId" : "projects_deployment_delete",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployment",
          "in" : "path",
          "description" : "User unique identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Deployment deleted"
          },
          "404" : {
            "description" : "Deployment not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "projects" ],
        "summary" : "Update a deployment",
        "operationId" : "projects_deployments_update",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployment",
          "in" : "path",
          "description" : "Deployment unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeploymentData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Deployment updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Deployment"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Deployment"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeploymentData"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeploymentData"
                }
              }
            }
          },
          "404" : {
            "description" : "Deployment not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/deployments/{deployment}/deploy/" : {
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Deploy an existing model",
        "operationId" : "projects_deployments_deploy",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployment",
          "in" : "path",
          "description" : "Deployment unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Deployment successful."
          },
          "400" : {
            "description" : "Invalid data supplied."
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/project_files/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Get project files",
        "operationId" : "projects_project_files_list",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Unique identifier for project file expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit when getting project file list.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting project file list.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering of list values when getting project file list.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filename",
          "in" : "query",
          "description" : "Exact file name, relative to the project root. If no such file is found, an empty list will be returned.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "content",
          "in" : "query",
          "description" : "Determines whether or not content is returned as base64. Defaults to false.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ProjectFile list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ProjectFile"
                  }
                }
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ProjectFile"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Create project files",
        "operationId" : "projects_project_files_create",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "file" : {
                    "type" : "string",
                    "description" : "File to send, to create new file. This parameter is only used with form data and may include multiple files.",
                    "format" : "binary"
                  },
                  "base64_data" : {
                    "type" : "string",
                    "description" : "Fila data, represented as base64."
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "File name. May include path when creating file with base64 field."
                  },
                  "path" : {
                    "type" : "string",
                    "description" : "File path. Defaults to (/)."
                  }
                }
              }
            },
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "file" : {
                    "type" : "string",
                    "description" : "File to send, to create new file. This parameter is only used with form data and may include multiple files.",
                    "format" : "binary"
                  },
                  "base64_data" : {
                    "type" : "string",
                    "description" : "Fila data, represented as base64."
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "File name. May include path when creating file with base64 field."
                  },
                  "path" : {
                    "type" : "string",
                    "description" : "File path. Defaults to (/)."
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "ProjectFile created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectFile"
                },
                "example" : {
                  "file" : "http://api.illumidesk.com/media/johndoe/79cadd17-5738-4f02-8377-68e67d3eee18/foo",
                  "id" : "592ac8da-dbf5-4654-9127-8df9ba9280a3",
                  "name" : "myfile",
                  "path" : "",
                  "project" : "79cadd17-5738-4f02-8377-68e67d3eee18",
                  "public" : false
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectFile"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectFileError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectFileError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/project_files/{id}/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Get a project file",
        "operationId" : "projects_project_files_read",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifer.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "File unique identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "content",
          "in" : "query",
          "description" : "Determines whether or not content is returned as base64. Defaults to false.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ProjectFile retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectFile"
                },
                "example" : {
                  "file" : "http://api.illumidesk.com/media/johndoe/79cadd17-5738-4f02-8377-68e67d3eee18/myfile",
                  "id" : "592ac8da-dbf5-4654-9127-8df9ba9280a3",
                  "name" : "myfile",
                  "path" : "",
                  "project" : "79cadd17-5738-4f02-8377-68e67d3eee18",
                  "public" : false
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectFile"
                }
              }
            }
          },
          "404" : {
            "description" : "ProjectFile not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "projects" ],
        "summary" : "Replace a project file",
        "operationId" : "projects_project_files_replace",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifer.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "File unique identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "file" : {
                    "type" : "string",
                    "description" : "File to send, to create new file. This parameter is only used with form data and may include multiple files.",
                    "format" : "binary"
                  },
                  "base64_data" : {
                    "type" : "string",
                    "description" : "Fila data, represented as base64."
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "File name. May include path when creating file with base64 field."
                  },
                  "path" : {
                    "type" : "string",
                    "description" : "File path. Defaults to (/)."
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "ProjectFile updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectFile"
                },
                "example" : {
                  "file" : "/media/johndoe/79cadd17-5738-4f02-8377-68e67d3eee18/myfile",
                  "id" : "592ac8da-dbf5-4654-9127-8df9ba9280a3",
                  "name" : "myfile",
                  "path" : "",
                  "project" : "79cadd17-5738-4f02-8377-68e67d3eee18",
                  "public" : false
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectFile"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectFileError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectFileError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Delete a project file",
        "operationId" : "projects_project_files_delete",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifer.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "File unique identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ProjectFile deleted"
          },
          "404" : {
            "description" : "ProjectFile not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "projects" ],
        "summary" : "Update a project file",
        "operationId" : "projects_project_files_update",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifer.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "File unique identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "file" : {
                    "type" : "string",
                    "description" : "File to send, to create new file. This parameter is only used with form data and may include multiple files.",
                    "format" : "binary"
                  },
                  "base64_data" : {
                    "type" : "string",
                    "description" : "Fila data, represented as base64."
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "File name. May include path when creating file with base64 field."
                  },
                  "path" : {
                    "type" : "string",
                    "description" : "File path. Defaults to (/)."
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "ProjectFile updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectFile"
                },
                "example" : {
                  "file" : "/media/johndoe/79cadd17-5738-4f02-8377-68e67d3eee18/myfile",
                  "id" : "592ac8da-dbf5-4654-9127-8df9ba9280a3",
                  "name" : "foo",
                  "path" : "",
                  "project" : "79cadd17-5738-4f02-8377-68e67d3eee18",
                  "public" : false
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectFile"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectFileError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectFileError"
                }
              }
            }
          },
          "404" : {
            "description" : "ProjectFile not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/servers/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Retrieve servers",
        "operationId" : "projects_servers_list",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit results when getting server list.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset results when getting server list.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Server name.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering option when getting server list.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Server list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Server"
                  }
                },
                "example" : [ ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Server"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Create a new server",
        "operationId" : "projects_servers_create",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifer expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Server created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Server"
                },
                "example" : {
                  "config" : {
                    "type" : "jupyter"
                  },
                  "connected" : [ ],
                  "created_at" : "2017-07-24T13:41:57.089722Z",
                  "endpoint" : "https://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/endpoint/jupyter/tree",
                  "host" : "",
                  "id" : "768f6eef-d07b-40ce-bce1-0dcce5bfbfc3",
                  "image_name" : "",
                  "logs_url" : "wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/logs/",
                  "name" : "testPostServer",
                  "server_size" : "d16e2091-7596-481b-a50f-285812beb98c",
                  "startup_script" : "",
                  "status" : "Stopped",
                  "status_url" : "wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/status/"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Server"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/servers/statuses/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Retrieve server statuses",
        "operationId" : "projects_servers_statuses",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Server statuses list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerStatus"
                  }
                },
                "example" : [ {
                  "id" : "768f6eef-d07b-40ce-bce1-0dcce5bfbfc3",
                  "status" : "Running"
                }, {
                  "id" : "768f6eef-d07b-40ce-bce1-0dcce5bfbfc3",
                  "status" : "Running"
                } ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/servers/{server}/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Retrieve a server",
        "operationId" : "projects_servers_read",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Server retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Server"
                },
                "example" : {
                  "config" : {
                    "type" : "jupyter"
                  },
                  "connected" : [ ],
                  "created_at" : "2017-07-24T13:41:57.089722Z",
                  "endpoint" : "https://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/endpoint/jupyter/tree",
                  "host" : "",
                  "id" : "768f6eef-d07b-40ce-bce1-0dcce5bfbfc3",
                  "image_name" : "",
                  "logs_url" : "wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/logs/",
                  "name" : "testPostServer",
                  "server_size" : "d16e2091-7596-481b-a50f-285812beb98c",
                  "startup_script" : "",
                  "status" : "Stopped",
                  "status_url" : "wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/status/"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Server"
                }
              }
            }
          },
          "404" : {
            "description" : "Server not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "projects" ],
        "summary" : "Replace a server",
        "operationId" : "projects_servers_replace",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Server updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Server"
                },
                "example" : {
                  "config" : {
                    "type" : "jupyter"
                  },
                  "connected" : [ ],
                  "created_at" : "2017-07-24T13:41:57.089722Z",
                  "endpoint" : "https://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/endpoint/jupyter/tree",
                  "host" : "",
                  "id" : "768f6eef-d07b-40ce-bce1-0dcce5bfbfc3",
                  "image_name" : "",
                  "logs_url" : "wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/logs/",
                  "name" : "testPutServer",
                  "server_size" : "d16e2091-7596-481b-a50f-285812beb98c",
                  "startup_script" : "",
                  "status" : "Stopped",
                  "status_url" : "wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/status/"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Server"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Delete a server",
        "operationId" : "projects_servers_delete",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "server",
          "in" : "path",
          "description" : "User unique identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Server deleted"
          },
          "404" : {
            "description" : "Server not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "projects" ],
        "summary" : "Update a server",
        "operationId" : "projects_servers_update",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Server updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Server"
                },
                "example" : {
                  "config" : {
                    "type" : "jupyter"
                  },
                  "connected" : [ ],
                  "created_at" : "2017-07-24T13:41:57.089722Z",
                  "endpoint" : "https://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/endpoint/jupyter/tree",
                  "host" : "",
                  "id" : "768f6eef-d07b-40ce-bce1-0dcce5bfbfc3",
                  "image_name" : "",
                  "logs_url" : "wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/logs/",
                  "name" : "testPatchServer",
                  "server_size" : "d16e2091-7596-481b-a50f-285812beb98c",
                  "startup_script" : "",
                  "status" : "Stopped",
                  "status_url" : "wss://api.illumidesk.com/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/status/"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Server"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerData"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerData"
                }
              }
            }
          },
          "404" : {
            "description" : "Server not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/servers/{server}/api-key/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Get server API key",
        "operationId" : "projects_servers_api-key",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Server API key",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JWT"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JWT"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/servers/{server}/auth/" : {
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Server api key validation",
        "operationId" : "projects_servers_auth",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Api key verified"
          },
          "401" : {
            "description" : "Invalid api key."
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/" : {
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Create a new server's run statistics",
        "operationId" : "projects_servers_run-stats_create",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerRunStatisticsData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "ServerRunStatistics created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerRunStatistics"
                },
                "example" : {
                  "exit_code" : 0,
                  "id" : "7d55fca5-2ba3-4af4-95ab-26dc141e6bfc",
                  "size" : 0,
                  "stacktrace" : "",
                  "start" : "2017-07-24T13:42:14.883820Z",
                  "stop" : ""
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerRunStatistics"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerRunStatisticsError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerRunStatisticsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Retrieve statistics for a server",
        "operationId" : "projects_servers_run-stats_read",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Run statistics unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ServerRunStatistics retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerRunStatistics"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerRunStatistics"
                }
              }
            }
          },
          "404" : {
            "description" : "ServerRunStatistics not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "projects" ],
        "summary" : "Replace a server's statistics",
        "operationId" : "projects_servers_run-stats_replace",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Server run statistics expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerRunStatisticsData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ServerRunStatistics updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerRunStatistics"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerRunStatistics"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerRunStatisticsError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerRunStatisticsError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Delete a server's statistics",
        "operationId" : "projects_servers_run-stats_delete",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Server run statistics unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ServerRunStatistics deleted."
          },
          "404" : {
            "description" : "ServerRunStatistics not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "projects" ],
        "summary" : "Update a server's statistics",
        "operationId" : "projects_servers_run-stats_update",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Server run statistics unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerRunStatisticsData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ServerRunStatistics updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerRunStatistics"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerRunStatistics"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerRunStatisticsError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerRunStatisticsError"
                }
              }
            }
          },
          "404" : {
            "description" : "ServerRunStatistics not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Get SSH Tunnels associated to a server",
        "operationId" : "projects_servers_ssh-tunnels_list",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit retrieved items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset retrieved items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Order retrieved items.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "SshTunnel list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshTunnel"
                  }
                },
                "example" : [ ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshTunnel"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Create SSH Tunnel associated to a server",
        "operationId" : "projects_servers_ssh-tunnels_create",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshTunnelData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "SSH Tunnel created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshTunnel"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshTunnel"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshTunnelError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshTunnelError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Get an SSH Tunnel associated to a server",
        "operationId" : "projects_servers_ssh-tunnels_read",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tunnel",
          "in" : "path",
          "description" : "SSH tunnel unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "SSH Tunnel retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshTunnel"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshTunnel"
                }
              }
            }
          },
          "404" : {
            "description" : "SSH Tunnel not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "projects" ],
        "summary" : "Replace SSH Tunnel associated to a server",
        "operationId" : "projects_servers_ssh-tunnels_replace",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tunnel",
          "in" : "path",
          "description" : "SSH tunnel unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshTunnelData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "SshTunnel updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshTunnel"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshTunnel"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshTunnelError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshTunnelError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Delete an SSH Tunnel associated to a server",
        "operationId" : "projects_servers_ssh-tunnels_delete",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tunnel",
          "in" : "path",
          "description" : "SSH tunnel unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "SSH tunnel deleted."
          },
          "404" : {
            "description" : "SSH tunnel not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "projects" ],
        "summary" : "Update an SSH Tunnel associated to a server",
        "operationId" : "projects_servers_ssh-tunnels_update",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tunnel",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshTunnelData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : " SSH Tunnel updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshTunnel"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshTunnel"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshTunnelError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshTunnelError"
                }
              }
            }
          },
          "404" : {
            "description" : "SSH tunnel not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/servers/{server}/start/" : {
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Start a server",
        "operationId" : "projects_servers_start",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Server started."
          },
          "400" : {
            "description" : "Invalid data supplied."
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Retrieve a server's statistics",
        "operationId" : "projects_servers_stats_read",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Server statistics unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ServerStatistics retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerStatistics"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerStatistics"
                }
              }
            }
          },
          "404" : {
            "description" : "ServerStatistics not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "projects" ],
        "summary" : "Replace a server's statistics",
        "operationId" : "projects_servers_stats_replace",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Server statistics unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerStatisticsData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ServerStatistics updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerStatistics"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerStatistics"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerStatisticsError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerStatisticsError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Delete a server's statistics",
        "operationId" : "projects_servers_stats_delete",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Stats unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ServerStatistics deleted."
          },
          "404" : {
            "description" : "ServerStatistics not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "projects" ],
        "summary" : "Update a server's statistics",
        "operationId" : "projects_servers_stats_update",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Server statistics unique identifier expressed as UUID.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerStatisticsData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ServerStatistics updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerStatistics"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerStatistics"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerStatisticsError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerStatisticsError"
                }
              }
            }
          },
          "404" : {
            "description" : "ServerStatistics not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/servers/{server}/stop/" : {
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Stop a server",
        "operationId" : "projects_servers_stop",
        "parameters" : [ {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Server stopped."
          },
          "400" : {
            "description" : "Invalid data supplied."
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/servers/{server}/triggers/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Retrieve server triggers",
        "operationId" : "service_trigger_list",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Trigger name.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit when getting triggers.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset when getting triggers.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ordering",
          "in" : "query",
          "description" : "Ordering when getting triggers.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ServerAction list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerAction"
                  }
                },
                "example" : [ ]
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerAction"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Create a new server trigger",
        "operationId" : "service_trigger_create",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Server action.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerActionData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Server action created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerAction"
                },
                "example" : {
                  "id" : "19938b2c-17f6-46ed-a506-f5b196853951",
                  "name" : "serverStartPost",
                  "operation" : "start",
                  "url" : "/v1/johndoe/service/ed81aac7-835d-4702-a58e-4eeda89d4a5a/trigger/19938b2c-17f6-46ed-a506-f5b196853951/call/"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerAction"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerActionError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerActionError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Get a server trigger",
        "operationId" : "service_trigger_read",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trigger",
          "in" : "path",
          "description" : "Trigger unique identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Server action retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerAction"
                },
                "example" : {
                  "id" : "19938b2c-17f6-46ed-a506-f5b196853951",
                  "name" : "serverStartPost",
                  "operation" : "start",
                  "url" : "/v1/johndoe/service/ed81aac7-835d-4702-a58e-4eeda89d4a5a/trigger/19938b2c-17f6-46ed-a506-f5b196853951/call/"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerAction"
                }
              }
            }
          },
          "404" : {
            "description" : "ServerAction not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "projects" ],
        "summary" : "Replace a server trigger",
        "operationId" : "service_trigger_replace",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trigger",
          "in" : "path",
          "description" : "Trigger unique identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerActionData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "ServerAction updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerAction"
                },
                "example" : {
                  "id" : "19938b2c-17f6-46ed-a506-f5b196853951",
                  "name" : "serverStartPut",
                  "operation" : "start",
                  "url" : "/v1/johndoe/service/ed81aac7-835d-4702-a58e-4eeda89d4a5a/trigger/19938b2c-17f6-46ed-a506-f5b196853951/call/"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerAction"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerActionError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerActionError"
                }
              }
            }
          },
          "404" : {
            "description" : "Server action not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Delete a server trigger",
        "operationId" : "service_trigger_delete",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trigger",
          "in" : "path",
          "description" : "Trigger identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ServerAction deleted"
          },
          "404" : {
            "description" : "ServerAction not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "projects" ],
        "summary" : "Update a server trigger",
        "operationId" : "service_trigger_update",
        "parameters" : [ {
          "name" : "server",
          "in" : "path",
          "description" : "Server unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "project",
          "in" : "path",
          "description" : "Project unique identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trigger",
          "in" : "path",
          "description" : "Trigger identifier expressed as UUID or name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerActionData"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Server action updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerAction"
                },
                "example" : {
                  "id" : "19938b2c-17f6-46ed-a506-f5b196853951",
                  "name" : "serverStartPatch",
                  "operation" : "start",
                  "url" : "/v1/johndoe/service/ed81aac7-835d-4702-a58e-4eeda89d4a5a/trigger/19938b2c-17f6-46ed-a506-f5b196853951/call/"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerAction"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerActionError"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerActionError"
                }
              }
            }
          },
          "404" : {
            "description" : "Server action not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              },
              "text/html" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{namespace}/search/" : {
      "get" : {
        "tags" : [ "search" ],
        "summary" : "Get a search results",
        "operationId" : "search",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "User or team name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search string.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Limit results to specific types.",
          "schema" : {
            "type" : "string",
            "enum" : [ "users", "projects", "servers" ]
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit data when getting items.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset data when getting items.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Search list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Search"
                  }
                }
              },
              "text/html" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Search"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Action" : {
        "required" : [ "action", "method", "state", "user_agent" ],
        "type" : "object",
        "properties" : {
          "action" : {
            "type" : "string",
            "description" : "Action name."
          },
          "action_name" : {
            "type" : "string",
            "description" : "Action name."
          },
          "can_be_cancelled" : {
            "type" : "boolean",
            "description" : "Can action be cancelled, or not."
          },
          "can_be_retried" : {
            "type" : "boolean",
            "description" : "May action be retried, or not."
          },
          "end_date" : {
            "type" : "string",
            "description" : "Action needs to end before a certain date and time."
          },
          "id" : {
            "type" : "string",
            "description" : "Action unique identifier, expressed as UUID."
          },
          "ip" : {
            "type" : "string",
            "description" : "IP address that action is related to."
          },
          "is_user_action" : {
            "type" : "boolean",
            "description" : "Is the action related to a user, or not."
          },
          "method" : {
            "type" : "string",
            "description" : "Action method."
          },
          "object" : {
            "type" : "string",
            "description" : "Action object."
          },
          "path" : {
            "type" : "string",
            "description" : "Action path."
          },
          "payload" : {
            "type" : "object",
            "description" : "Object action payload."
          },
          "resource_uri" : {
            "type" : "string",
            "description" : "Resource URI."
          },
          "start_date" : {
            "type" : "string",
            "description" : "Action date and time start."
          },
          "state" : {
            "type" : "string",
            "description" : "Action state."
          },
          "user" : {
            "type" : "string",
            "description" : "User that action is assigned to."
          },
          "user_agent" : {
            "type" : "string",
            "description" : "User agent that action is related to."
          }
        }
      },
      "Application" : {
        "type" : "object",
        "properties" : {
          "authorization_grant_type" : {
            "type" : "string",
            "description" : "OAuth2 authorization grant type",
            "enum" : [ "authorization-code", "implicit", "password", "client-credentials" ]
          },
          "client_id" : {
            "type" : "string",
            "description" : "OAuth2 client id"
          },
          "client_secret" : {
            "type" : "string",
            "description" : "OAuth2 client secret"
          },
          "client_type" : {
            "type" : "string",
            "description" : "OAuth2 client type",
            "enum" : [ "confidential", "public" ]
          },
          "id" : {
            "type" : "string",
            "description" : "Application unique identifier, expressed as UUID."
          },
          "name" : {
            "type" : "string",
            "description" : "Application name"
          },
          "redirect_uris" : {
            "type" : "string",
            "description" : "Uris to redirect auth request"
          }
        }
      },
      "ApplicationData" : {
        "required" : [ "authorization_grant_type", "client_type", "name" ],
        "type" : "object",
        "properties" : {
          "authorization_grant_type" : {
            "type" : "string",
            "description" : "OAuth2 authorization grant type",
            "enum" : [ "authorization-code", "implicit", "password", "client-credentials" ]
          },
          "client_type" : {
            "type" : "string",
            "description" : "OAuth2 client type",
            "enum" : [ "confidential", "public" ]
          },
          "name" : {
            "type" : "string",
            "description" : "Application name"
          },
          "redirect_uris" : {
            "type" : "string",
            "description" : "Uris to redirect auth request"
          }
        }
      },
      "ApplicationError" : {
        "type" : "object",
        "properties" : {
          "authorization_grant_type" : {
            "type" : "array",
            "description" : "Authorization grant type field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "client_type" : {
            "type" : "array",
            "description" : "Client type field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "array",
            "description" : "Name field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "redirect_uris" : {
            "type" : "array",
            "description" : "Redirect uris field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "AuthToken" : {
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string",
            "description" : "Unique JWT authorization token."
          }
        }
      },
      "AuthTokenData" : {
        "required" : [ "password", "username" ],
        "type" : "object",
        "properties" : {
          "password" : {
            "type" : "string",
            "description" : "User's password."
          },
          "username" : {
            "type" : "string",
            "description" : "User's username."
          }
        }
      },
      "AuthTokenError" : {
        "type" : "object",
        "properties" : {
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "password" : {
            "type" : "array",
            "description" : "Password field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "token" : {
            "type" : "array",
            "description" : "Token field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "username" : {
            "type" : "array",
            "description" : "Username field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Card" : {
        "type" : "object",
        "properties" : {
          "address_city" : {
            "type" : "string",
            "description" : "Address city."
          },
          "address_country" : {
            "type" : "string",
            "description" : "Address country."
          },
          "address_line1" : {
            "type" : "string",
            "description" : "Address line 1."
          },
          "address_line1_check" : {
            "type" : "string",
            "description" : "Address line 1 check, when processing card."
          },
          "address_line2" : {
            "type" : "string",
            "description" : "Address line 2."
          },
          "address_state" : {
            "type" : "string",
            "description" : "Address state."
          },
          "address_zip" : {
            "type" : "string",
            "description" : "Address zip code."
          },
          "address_zip_check" : {
            "type" : "string",
            "description" : "Address check, when processing card."
          },
          "brand" : {
            "type" : "string",
            "description" : "Credit or debit card brand."
          },
          "created" : {
            "type" : "string",
            "description" : "Card date and time creation."
          },
          "customer" : {
            "type" : "string",
            "description" : "Card customer."
          },
          "cvc_check" : {
            "type" : "string",
            "description" : "Security code check."
          },
          "exp_month" : {
            "type" : "integer",
            "description" : "Card expiration month."
          },
          "exp_year" : {
            "type" : "integer",
            "description" : "Card expiration year."
          },
          "fingerprint" : {
            "type" : "string",
            "description" : "Card fingerprint."
          },
          "funding" : {
            "type" : "string",
            "description" : "Funding."
          },
          "id" : {
            "type" : "string",
            "description" : "Card unique identifier, expressed as UUID."
          },
          "last4" : {
            "type" : "string",
            "description" : "Last four digits of credit or debit card."
          },
          "name" : {
            "type" : "string",
            "description" : "Card name."
          },
          "stripe_id" : {
            "type" : "string",
            "description" : "Unique stripe identifier."
          },
          "token" : {
            "type" : "string",
            "description" : "Card unique token."
          }
        }
      },
      "CardDataPost" : {
        "type" : "object",
        "properties" : {
          "address_city" : {
            "type" : "string",
            "description" : "Address city."
          },
          "address_country" : {
            "type" : "string",
            "description" : "Address country."
          },
          "address_line1" : {
            "type" : "string",
            "description" : "Address line 1."
          },
          "address_line2" : {
            "type" : "string",
            "description" : "Address line 2."
          },
          "address_state" : {
            "type" : "string",
            "description" : "Address state."
          },
          "address_zip" : {
            "type" : "string",
            "description" : "Address zip code."
          },
          "exp_month" : {
            "type" : "integer",
            "description" : "Card expiration month."
          },
          "exp_year" : {
            "type" : "integer",
            "description" : "Card expiration year."
          },
          "name" : {
            "type" : "string",
            "description" : "Card name."
          },
          "token" : {
            "type" : "string",
            "description" : "Card unique token."
          }
        }
      },
      "CardDataPutandPatch" : {
        "type" : "object",
        "properties" : {
          "address_city" : {
            "type" : "string",
            "description" : "Address city."
          },
          "address_country" : {
            "type" : "string",
            "description" : "Address country."
          },
          "address_line1" : {
            "type" : "string",
            "description" : "Address line 1."
          },
          "address_line2" : {
            "type" : "string",
            "description" : "Address line 2."
          },
          "address_state" : {
            "type" : "string",
            "description" : "Address state."
          },
          "address_zip" : {
            "type" : "string",
            "description" : "Address zip code."
          },
          "exp_month" : {
            "type" : "integer",
            "description" : "Card expiration month."
          },
          "exp_year" : {
            "type" : "integer",
            "description" : "Card expiration year."
          },
          "name" : {
            "type" : "string",
            "description" : "Card name."
          }
        }
      },
      "CardError" : {
        "type" : "object",
        "properties" : {
          "address_city" : {
            "type" : "array",
            "description" : "address_city field errors",
            "items" : {
              "type" : "string"
            }
          },
          "address_country" : {
            "type" : "array",
            "description" : "address_country field errors",
            "items" : {
              "type" : "string"
            }
          },
          "address_line1" : {
            "type" : "array",
            "description" : "address_line1 field errors",
            "items" : {
              "type" : "string"
            }
          },
          "address_line1_check" : {
            "type" : "array",
            "description" : "address_line1_check field errors",
            "items" : {
              "type" : "string"
            }
          },
          "address_line2" : {
            "type" : "array",
            "description" : "address_line2 field errors",
            "items" : {
              "type" : "string"
            }
          },
          "address_state" : {
            "type" : "array",
            "description" : "address_state field errors",
            "items" : {
              "type" : "string"
            }
          },
          "address_zip" : {
            "type" : "array",
            "description" : "address_zip field errors",
            "items" : {
              "type" : "string"
            }
          },
          "address_zip_check" : {
            "type" : "array",
            "description" : "address_zip_check field errors",
            "items" : {
              "type" : "string"
            }
          },
          "brand" : {
            "type" : "array",
            "description" : "brand field errors",
            "items" : {
              "type" : "string"
            }
          },
          "created" : {
            "type" : "array",
            "description" : "created field errors",
            "items" : {
              "type" : "string"
            }
          },
          "customer" : {
            "type" : "array",
            "description" : "customer field errors",
            "items" : {
              "type" : "string"
            }
          },
          "cvc_check" : {
            "type" : "array",
            "description" : "cvc_check field errors",
            "items" : {
              "type" : "string"
            }
          },
          "exp_month" : {
            "type" : "array",
            "description" : "exp_month field errors",
            "items" : {
              "type" : "string"
            }
          },
          "exp_year" : {
            "type" : "array",
            "description" : "exp_year field errors",
            "items" : {
              "type" : "string"
            }
          },
          "fingerprint" : {
            "type" : "array",
            "description" : "fingerprint field errors",
            "items" : {
              "type" : "string"
            }
          },
          "funding" : {
            "type" : "array",
            "description" : "funding field errors",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "array",
            "description" : "id field errors",
            "items" : {
              "type" : "string"
            }
          },
          "last4" : {
            "type" : "array",
            "description" : "last4 field errors",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "array",
            "description" : "name field errors",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field",
            "items" : {
              "type" : "string"
            }
          },
          "stripe_id" : {
            "type" : "array",
            "description" : "stripe_id field errors",
            "items" : {
              "type" : "string"
            }
          },
          "token" : {
            "type" : "array",
            "description" : "token field errors",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "CardUpdateError" : {
        "type" : "object",
        "properties" : {
          "address_city" : {
            "type" : "array",
            "description" : "address_city field errors",
            "items" : {
              "type" : "string"
            }
          },
          "address_country" : {
            "type" : "array",
            "description" : "address_country field errors",
            "items" : {
              "type" : "string"
            }
          },
          "address_line1" : {
            "type" : "array",
            "description" : "address_line1 field errors",
            "items" : {
              "type" : "string"
            }
          },
          "address_line1_check" : {
            "type" : "array",
            "description" : "address_line1_check field errors",
            "items" : {
              "type" : "string"
            }
          },
          "address_line2" : {
            "type" : "array",
            "description" : "address_line2 field errors",
            "items" : {
              "type" : "string"
            }
          },
          "address_state" : {
            "type" : "array",
            "description" : "address_state field errors",
            "items" : {
              "type" : "string"
            }
          },
          "address_zip" : {
            "type" : "array",
            "description" : "address_zip field errors",
            "items" : {
              "type" : "string"
            }
          },
          "address_zip_check" : {
            "type" : "array",
            "description" : "address_zip_check field errors",
            "items" : {
              "type" : "string"
            }
          },
          "brand" : {
            "type" : "array",
            "description" : "brand field errors",
            "items" : {
              "type" : "string"
            }
          },
          "created" : {
            "type" : "array",
            "description" : "created field errors",
            "items" : {
              "type" : "string"
            }
          },
          "customer" : {
            "type" : "array",
            "description" : "customer field errors",
            "items" : {
              "type" : "string"
            }
          },
          "cvc_check" : {
            "type" : "array",
            "description" : "cvc_check field errors",
            "items" : {
              "type" : "string"
            }
          },
          "exp_month" : {
            "type" : "array",
            "description" : "exp_month field errors",
            "items" : {
              "type" : "string"
            }
          },
          "exp_year" : {
            "type" : "array",
            "description" : "exp_year field errors",
            "items" : {
              "type" : "string"
            }
          },
          "fingerprint" : {
            "type" : "array",
            "description" : "fingerprint field errors",
            "items" : {
              "type" : "string"
            }
          },
          "funding" : {
            "type" : "array",
            "description" : "funding field errors",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "array",
            "description" : "id field errors",
            "items" : {
              "type" : "string"
            }
          },
          "last4" : {
            "type" : "array",
            "description" : "last4 field errors",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "array",
            "description" : "name field errors",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field",
            "items" : {
              "type" : "string"
            }
          },
          "stripe_id" : {
            "type" : "array",
            "description" : "stripe_id field errors",
            "items" : {
              "type" : "string"
            }
          },
          "token" : {
            "type" : "array",
            "description" : "token field errors",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Collaborator" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Collaborator's valid email address."
          },
          "first_name" : {
            "type" : "string",
            "description" : "Collaborator's first name."
          },
          "id" : {
            "type" : "string",
            "description" : "Collaborator unique identifier in UUID format."
          },
          "joined" : {
            "type" : "string",
            "description" : "Date time of when collaborator joined."
          },
          "last_name" : {
            "type" : "string",
            "description" : "Collaborator's last name."
          },
          "owner" : {
            "type" : "boolean",
            "description" : "Boolean that states whether collaborator is project owner, or not.\n"
          },
          "permissions" : {
            "type" : "array",
            "description" : "Collaborator permissions. Project creators are assigned owner\npriviledges by default. Permissions are write and read.\n",
            "items" : {
              "type" : "string",
              "enum" : [ "write_project", "read_project" ]
            }
          },
          "project" : {
            "type" : "string",
            "description" : "Collaborator project name."
          },
          "user" : {
            "type" : "string",
            "description" : "Collaborator user name."
          },
          "username" : {
            "type" : "string",
            "description" : "Collaborator's user name. This must be a valid user name within the\nsystem.\n"
          }
        }
      },
      "CollaboratorData" : {
        "required" : [ "member", "permissions" ],
        "type" : "object",
        "properties" : {
          "member" : {
            "type" : "string",
            "description" : "Project member username."
          },
          "owner" : {
            "type" : "boolean",
            "description" : "Project owner. Defaults to false."
          },
          "permissions" : {
            "type" : "string",
            "description" : "Permissions assigned to collaborator.",
            "enum" : [ "read_project", "write_project" ]
          }
        }
      },
      "CollaboratorError" : {
        "required" : [ "member", "permissions" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "array",
            "description" : "Email field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "first_name" : {
            "type" : "array",
            "description" : "First name field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "array",
            "description" : "Id field errors this",
            "items" : {
              "type" : "string"
            }
          },
          "joined" : {
            "type" : "array",
            "description" : "Joined field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "last_name" : {
            "type" : "array",
            "description" : "Last name field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "member" : {
            "type" : "array",
            "description" : "Member field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "owner" : {
            "type" : "array",
            "description" : "Owner field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "permissions" : {
            "type" : "array",
            "description" : "Permissions field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "username" : {
            "type" : "array",
            "description" : "Username field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Deployment" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "$ref" : "#/components/schemas/DeploymentConfig"
          },
          "created_at" : {
            "type" : "string",
            "description" : "Date and time when server was created."
          },
          "created_by" : {
            "type" : "string",
            "description" : "User that created server."
          },
          "framework" : {
            "type" : "string",
            "description" : "Framework that the deployment will have access to.",
            "enum" : [ "tensorflow" ]
          },
          "id" : {
            "type" : "string",
            "description" : "Deploymeny unique identifier"
          },
          "name" : {
            "type" : "string",
            "description" : "Deployment name."
          },
          "project" : {
            "type" : "string",
            "description" : "Project name."
          },
          "runtime" : {
            "type" : "string",
            "description" : "Language runtime the deployment will use.",
            "enum" : [ "python2.7" ]
          }
        }
      },
      "DeploymentConfig" : {
        "type" : "object",
        "properties" : {
          "files" : {
            "type" : "array",
            "description" : "An array of ProjectFile names that should be included in the deployment.",
            "items" : {
              "type" : "string"
            }
          },
          "handler" : {
            "type" : "string",
            "description" : "The filename and handler function defined by the user that will handle requests to the deployment. Ex: handler.predict"
          }
        }
      },
      "DeploymentData" : {
        "required" : [ "config", "framework", "name", "runtime" ],
        "type" : "object",
        "properties" : {
          "config" : {
            "$ref" : "#/components/schemas/DeploymentConfig"
          },
          "framework" : {
            "type" : "string",
            "description" : "Framework that the deployment will have access to.",
            "enum" : [ "tensorflow" ]
          },
          "name" : {
            "type" : "string",
            "description" : "Deployment name."
          },
          "runtime" : {
            "type" : "string",
            "description" : "Language runtime the deployment will use.",
            "enum" : [ "python2.7" ]
          }
        }
      },
      "DeploymentError" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "array",
            "description" : "Invalid deployment configuration.",
            "items" : {
              "type" : "string"
            }
          },
          "framework" : {
            "type" : "array",
            "description" : "Invalid framework.",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "array",
            "description" : "Invalid deployment name.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "runtime" : {
            "type" : "array",
            "description" : "Invalid runtime.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Email" : {
        "required" : [ "address" ],
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "description" : "Email address."
          },
          "id" : {
            "type" : "string",
            "description" : "Email unique identifier expressed as UUID."
          },
          "public" : {
            "type" : "boolean",
            "description" : "Boolean to determine if email is public or private."
          },
          "unsubscribed" : {
            "type" : "boolean",
            "description" : "Boolean to determine whether user is suscribed or unsubscribed to out going email campaigns."
          },
          "user" : {
            "type" : "string",
            "description" : "User name for email."
          }
        }
      },
      "EmailData" : {
        "required" : [ "address" ],
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "description" : "Email address."
          },
          "public" : {
            "type" : "boolean",
            "description" : "Public or private email address."
          },
          "unsubscribed" : {
            "type" : "boolean",
            "description" : "Unsubscribed or suscribed."
          }
        }
      },
      "EmailError" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "array",
            "description" : "Address field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "public" : {
            "type" : "array",
            "description" : "Public field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "unsubscribed" : {
            "type" : "array",
            "description" : "Unsubscribed field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Group" : {
        "type" : "object",
        "properties" : {
          "created_by" : {
            "type" : "string",
            "description" : "UUID of a user that created this group."
          },
          "description" : {
            "type" : "string",
            "description" : "Group description"
          },
          "id" : {
            "type" : "string",
            "description" : "Group unique identifier expressed as UUID."
          },
          "members" : {
            "type" : "array",
            "description" : "List of group members usernames.",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "string",
            "description" : "Group name"
          },
          "parent" : {
            "type" : "string",
            "description" : "Parent group"
          },
          "permissions" : {
            "type" : "array",
            "description" : "List of group permissions.",
            "items" : {
              "type" : "string"
            }
          },
          "private" : {
            "type" : "boolean",
            "description" : "States whether group is visible to all users."
          }
        }
      },
      "GroupData" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Group description"
          },
          "name" : {
            "type" : "string",
            "description" : "Group name"
          },
          "parent" : {
            "type" : "string",
            "description" : "Parent group"
          },
          "private" : {
            "type" : "boolean",
            "description" : "States whether group is visible to all users."
          }
        }
      },
      "GroupError" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "array",
            "description" : "Description field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "array",
            "description" : "Id field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "array",
            "description" : "Name field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "parent" : {
            "type" : "array",
            "description" : "Private field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "private" : {
            "type" : "array",
            "description" : "Private field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "GroupUser" : {
        "type" : "object",
        "properties" : {
          "user" : {
            "type" : "string",
            "description" : "User username"
          }
        }
      },
      "GroupUserError" : {
        "type" : "object",
        "properties" : {
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "user" : {
            "type" : "array",
            "description" : "User field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Invoice" : {
        "required" : [ "amount_due", "created", "currency", "customer", "invoice_date", "period_end", "period_start", "reciept_number", "starting_balance", "stripe_id", "subtotal", "total" ],
        "type" : "object",
        "properties" : {
          "amount_due" : {
            "type" : "integer",
            "description" : "Amount due set in invoice."
          },
          "application_fee" : {
            "type" : "integer",
            "description" : "Application fee set in invoice."
          },
          "attempt_count" : {
            "type" : "integer",
            "description" : "Number of attempts to deliver invoice."
          },
          "attempted" : {
            "type" : "boolean",
            "description" : "Boolean to determine whether delivery attempt executed, or not."
          },
          "closed" : {
            "type" : "boolean",
            "description" : "Invoice closed, or pending."
          },
          "created" : {
            "type" : "string",
            "description" : "Date and time when invoice was created."
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency used in invoice."
          },
          "customer" : {
            "type" : "string",
            "description" : "Customer name."
          },
          "description" : {
            "type" : "string",
            "description" : "Invoice description."
          },
          "id" : {
            "type" : "string",
            "description" : "Invoice unique identifier expressed as UUID."
          },
          "invoice_date" : {
            "type" : "string",
            "description" : "Invoice issue date."
          },
          "livemode" : {
            "type" : "boolean",
            "description" : "Boolean that determines whether invoice is live, or not."
          },
          "metadata" : {
            "type" : "object",
            "description" : "Optional metadata object of invoice."
          },
          "next_payment_attempt" : {
            "type" : "string",
            "description" : "Next payment attempt."
          },
          "paid" : {
            "type" : "boolean",
            "description" : "Determines whether invoice has been paid, or not."
          },
          "period_end" : {
            "type" : "string",
            "description" : "Invoice end period."
          },
          "period_start" : {
            "type" : "string",
            "description" : "Invoice start period."
          },
          "reciept_number" : {
            "type" : "string",
            "description" : "Invoice receipt number."
          },
          "starting_balance" : {
            "type" : "integer",
            "description" : "Invoice starting balance."
          },
          "statement_descriptor" : {
            "type" : "string",
            "description" : "Invoice statement descriptor."
          },
          "stripe_id" : {
            "type" : "string",
            "description" : "Stripe account identifier."
          },
          "subscription" : {
            "type" : "string",
            "description" : "Suscription name."
          },
          "subtotal" : {
            "type" : "integer",
            "description" : "Invoice sub total."
          },
          "tax" : {
            "type" : "integer",
            "description" : "Tax, if applicable."
          },
          "total" : {
            "type" : "integer",
            "description" : "Invoice total."
          }
        }
      },
      "InvoiceItem" : {
        "required" : [ "amount", "created", "currency", "invoice", "invoice_date", "quantity", "stripe_id" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "integer",
            "description" : "Amount the the invoice item will be billed for."
          },
          "created" : {
            "type" : "string",
            "description" : "Date and time when invoice was created."
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency used in invoice."
          },
          "description" : {
            "type" : "string",
            "description" : "Item description."
          },
          "id" : {
            "type" : "string",
            "description" : "InvoiceItem unique identifier expressed as UUID."
          },
          "invoice" : {
            "type" : "string",
            "description" : "Invoice unique identifier expressed as UUID."
          },
          "invoice_date" : {
            "type" : "string",
            "description" : "Date the item was added to the invoice."
          },
          "livemode" : {
            "type" : "boolean",
            "description" : "Boolean that determines whether invoice is live, or not."
          },
          "metadata" : {
            "type" : "object",
            "description" : "Optional metadata object of invoice."
          },
          "proration" : {
            "type" : "boolean",
            "description" : "Whether or not the items cost will be prorated for the billing period."
          },
          "quantity" : {
            "type" : "integer",
            "description" : "Number of units for this item."
          },
          "stripe_id" : {
            "type" : "string",
            "description" : "Stripe account identifier."
          }
        }
      },
      "JWT" : {
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string",
            "description" : "Unique JSON Web Token (JWT)."
          }
        }
      },
      "JWTData" : {
        "required" : [ "password", "username" ],
        "type" : "object",
        "properties" : {
          "password" : {
            "type" : "string",
            "description" : "User password."
          },
          "username" : {
            "type" : "string",
            "description" : "User name."
          }
        }
      },
      "JWTError" : {
        "type" : "object",
        "properties" : {
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field",
            "items" : {
              "type" : "string"
            }
          },
          "password" : {
            "type" : "array",
            "description" : "password field errors",
            "items" : {
              "type" : "string"
            }
          },
          "token" : {
            "type" : "array",
            "description" : "token field errors",
            "items" : {
              "type" : "string"
            }
          },
          "username" : {
            "type" : "array",
            "description" : "username field errors",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "NotFound" : {
        "type" : "object",
        "properties" : {
          "detail" : {
            "type" : "string",
            "description" : "Requested item not found."
          }
        }
      },
      "Notification" : {
        "required" : [ "read" ],
        "type" : "object",
        "properties" : {
          "actor" : {
            "type" : "string",
            "description" : "Unique identifier of the object that triggered the notification."
          },
          "id" : {
            "type" : "string",
            "description" : "Notification unique identifier expressed as a UUID"
          },
          "read" : {
            "type" : "boolean",
            "description" : "Whether or not the notification has been marked as read by the user."
          },
          "target" : {
            "type" : "string",
            "description" : "Unique identifier of the object that was acted upon by the object referred to in actor."
          },
          "timestamp" : {
            "type" : "string",
            "description" : "Timestamp that the notification was created at."
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the notification, e.g. invoice.created, subscription.created, etc."
          },
          "user" : {
            "type" : "string",
            "description" : "User the notification is for."
          }
        }
      },
      "NotificationError" : {
        "type" : "object",
        "properties" : {
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field",
            "items" : {
              "type" : "string"
            }
          },
          "read" : {
            "type" : "array",
            "description" : "read field errors",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "NotificationListUpdateData" : {
        "required" : [ "notifications", "read" ],
        "type" : "object",
        "properties" : {
          "notifications" : {
            "type" : "array",
            "description" : "An array of notification IDs to update.",
            "items" : {
              "type" : "string"
            }
          },
          "read" : {
            "type" : "boolean",
            "description" : "Mark the notification as either read or unread"
          }
        }
      },
      "NotificationSettings" : {
        "required" : [ "emails_enabled", "enabled" ],
        "type" : "object",
        "properties" : {
          "email_address" : {
            "type" : "string",
            "description" : "Email address to send notifications."
          },
          "emails_enabled" : {
            "type" : "boolean",
            "description" : "Turn emails on or off."
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Turn notifications on or off entirely."
          },
          "entity" : {
            "type" : "string",
            "description" : "The entity type that the settings pertain to.",
            "enum" : [ "global", "billing" ]
          },
          "id" : {
            "type" : "string",
            "description" : "Notification unique identifier expressed as a UUID"
          },
          "user" : {
            "type" : "string",
            "description" : "User the notification settings is for."
          }
        }
      },
      "NotificationSettingsData" : {
        "required" : [ "emails_enabled", "enabled" ],
        "type" : "object",
        "properties" : {
          "emails_enabled" : {
            "type" : "boolean",
            "description" : "Turn emails on or off."
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Turn notifications on or off entirely."
          }
        }
      },
      "NotificationSettingsError" : {
        "type" : "object",
        "properties" : {
          "emails_enabled" : {
            "type" : "boolean",
            "description" : "emails_enabled field errors"
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "enabled field errors"
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "NotificationUpdateData" : {
        "required" : [ "read" ],
        "type" : "object",
        "properties" : {
          "read" : {
            "type" : "boolean",
            "description" : "Mark the notification as either read or unread"
          }
        }
      },
      "Plan" : {
        "required" : [ "amount", "interval", "interval_count", "name" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "integer",
            "description" : "Amount (cost/price) of plan."
          },
          "created" : {
            "type" : "string",
            "description" : "Date and time when plan was created."
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency used to specify amount."
          },
          "id" : {
            "type" : "string",
            "description" : "Plan unique identifier as UUID."
          },
          "interval" : {
            "type" : "string",
            "description" : "Interval for plan, such as montly or yearly."
          },
          "interval_count" : {
            "type" : "integer",
            "description" : ""
          },
          "livemode" : {
            "type" : "boolean",
            "description" : "Boolean to determine whether plan is live, or not."
          },
          "metadata" : {
            "type" : "object",
            "description" : "Optional meta data object."
          },
          "name" : {
            "type" : "string",
            "description" : "Plan name."
          },
          "statement_descriptor" : {
            "type" : "string",
            "description" : "Statement that describes plan to users."
          },
          "stripe_id" : {
            "type" : "string",
            "description" : "Stripe identifier to identify entity charging for plans."
          },
          "trial_period_days" : {
            "type" : "integer",
            "description" : "Number of days for plan trial, used for try and buy campaigns."
          }
        }
      },
      "Project" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "collaborators" : {
            "type" : "array",
            "description" : "Array of project collaborators.",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "string",
            "description" : "Project description."
          },
          "id" : {
            "type" : "string",
            "description" : "Unique identifier for project as UUID."
          },
          "last_updated" : {
            "type" : "string",
            "description" : "Date and time when project was last updated."
          },
          "name" : {
            "type" : "string",
            "description" : "Project name."
          },
          "owner" : {
            "type" : "string",
            "description" : "Username of project owner."
          },
          "private" : {
            "type" : "boolean",
            "description" : "Value that states whether project is private or public."
          },
          "team" : {
            "type" : "string",
            "description" : "Project team name."
          }
        }
      },
      "ProjectData" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Project description."
          },
          "name" : {
            "type" : "string",
            "description" : "Project name."
          },
          "private" : {
            "type" : "boolean",
            "description" : "Private project true, otherwise public."
          }
        }
      },
      "ProjectError" : {
        "type" : "object",
        "properties" : {
          "collaborators" : {
            "type" : "array",
            "description" : "Collaborators field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "array",
            "description" : "Description field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "array",
            "description" : "Id field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "last_updated" : {
            "type" : "array",
            "description" : "Last_updated field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "array",
            "description" : "Name field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "owner" : {
            "type" : "array",
            "description" : "Owner field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "private" : {
            "type" : "array",
            "description" : "Private field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ProjectFile" : {
        "required" : [ "project" ],
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "string",
            "description" : "Data sent as string, in base64 format."
          },
          "id" : {
            "type" : "string",
            "description" : "File unique identifier in UUID format."
          },
          "name" : {
            "type" : "string",
            "description" : "File name and extension."
          },
          "path" : {
            "type" : "string",
            "description" : "File path. Defaults to root (/)."
          },
          "project" : {
            "type" : "string",
            "description" : "Project name where file is located."
          }
        }
      },
      "ProjectFileError" : {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "array",
            "description" : "base64_data field errors",
            "items" : {
              "type" : "string"
            }
          },
          "file" : {
            "type" : "array",
            "description" : "file field errors",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "array",
            "description" : "id field errors",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "array",
            "description" : "name field errors",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field",
            "items" : {
              "type" : "string"
            }
          },
          "path" : {
            "type" : "array",
            "description" : "path field errors",
            "items" : {
              "type" : "string"
            }
          },
          "project" : {
            "type" : "array",
            "description" : "project field errors",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RefreshJSONWebToken" : {
        "required" : [ "token" ],
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string",
            "description" : "Refresh JWT token."
          }
        }
      },
      "RefreshJSONWebTokenData" : {
        "required" : [ "token" ],
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string",
            "description" : "Refreshed token."
          }
        }
      },
      "RefreshJSONWebTokenError" : {
        "type" : "object",
        "properties" : {
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "token" : {
            "type" : "array",
            "description" : "Token field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Search" : {
        "type" : "object"
      },
      "Server" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "object",
            "description" : "Server configuration option. Values are jupyter, restful and cron."
          },
          "connected" : {
            "type" : "array",
            "description" : "Array that represents what other servers the server is connected to.",
            "items" : {
              "type" : "string"
            }
          },
          "created_at" : {
            "type" : "string",
            "description" : "Date and time when server was created."
          },
          "created_by" : {
            "type" : "string",
            "description" : "User that created server."
          },
          "endpoint" : {
            "type" : "string",
            "description" : "Server endpoint path."
          },
          "host" : {
            "type" : "string",
            "description" : "Value that represents user defined host, otherwise known as BYON (Bring Your Own Node).\n"
          },
          "id" : {
            "type" : "string",
            "description" : "Server unique identifier in UUID format."
          },
          "image_name" : {
            "type" : "string",
            "description" : "Server image source, such as 3blades/tensorflow-notebook.\n"
          },
          "logs_url" : {
            "type" : "string",
            "description" : "A WebSocket URL for streaming stdout and stderr logs from the server.\n"
          },
          "name" : {
            "type" : "string",
            "description" : "Server name."
          },
          "project" : {
            "type" : "string",
            "description" : "Project name."
          },
          "server_size" : {
            "type" : "string",
            "description" : "Server size unique identifier."
          },
          "startup_script" : {
            "type" : "string",
            "description" : "Optional startup script to use when launching server."
          },
          "status" : {
            "type" : "string",
            "description" : "Server status, such as Running or Error.",
            "enum" : [ "Stopped", "Running", "Error" ]
          },
          "status_url" : {
            "type" : "string",
            "description" : "A WebSocket URL for listening to server status changes.\n"
          }
        }
      },
      "ServerAction" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Server trigger unique identifier."
          },
          "name" : {
            "type" : "string",
            "description" : "Name for server action."
          },
          "operation" : {
            "type" : "string",
            "description" : "Manage server state. Starting a server changes state from Pending to Running. Terminating a server changes state from Running to Terminated. If the action results in Error, status will change to Error.\n",
            "enum" : [ "start", "stop", "terminate" ]
          },
          "webhook" : {
            "$ref" : "#/components/schemas/Webhook"
          }
        }
      },
      "ServerActionData" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of server action."
          },
          "operation" : {
            "type" : "string",
            "description" : "Manage server state. Starting a server changes state from Pending to Running. Terminating a server changes state from Running to Terminated. Stopping a server changes state from Running to Stopped. If the action results in Error, status will change to Error.\n",
            "enum" : [ "start", "stop", "terminate" ]
          },
          "webhook" : {
            "$ref" : "#/components/schemas/Webhook"
          }
        }
      },
      "ServerActionError" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "array",
            "description" : "Id field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "array",
            "description" : "Name field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "operation" : {
            "type" : "array",
            "description" : "Operation field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ServerConfig" : {
        "type" : "object",
        "properties" : {
          "command" : {
            "type" : "string",
            "description" : "Command to run"
          },
          "function" : {
            "type" : "string",
            "description" : "Server function."
          },
          "script" : {
            "type" : "string",
            "description" : "Server script file."
          },
          "type" : {
            "type" : "string",
            "description" : "Server type.",
            "enum" : [ "jupyter", "restful", "cron" ]
          }
        }
      },
      "ServerData" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "config" : {
            "$ref" : "#/components/schemas/ServerConfig"
          },
          "connected" : {
            "type" : "array",
            "description" : "Array of other servers the server is connected to.",
            "items" : {
              "type" : "string"
            }
          },
          "host" : {
            "type" : "string",
            "description" : "External host IPv4 address or hostname."
          },
          "image_name" : {
            "type" : "string",
            "description" : "Image name."
          },
          "name" : {
            "type" : "string",
            "description" : "Server name."
          },
          "server_size" : {
            "type" : "string",
            "description" : "Server size unique identifier."
          },
          "startup_script" : {
            "type" : "string",
            "description" : "Startup script to run when launching server."
          }
        }
      },
      "ServerError" : {
        "type" : "object",
        "properties" : {
          "config" : {
            "type" : "array",
            "description" : "config field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "connected" : {
            "type" : "array",
            "description" : "connected field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "created_at" : {
            "type" : "array",
            "description" : "created_at field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "endpoint" : {
            "type" : "array",
            "description" : "endpoint field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "host" : {
            "type" : "array",
            "description" : "host field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "array",
            "description" : "id field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "image_name" : {
            "type" : "array",
            "description" : "image_name field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "logs_url" : {
            "type" : "array",
            "description" : "logs_url field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "array",
            "description" : "name field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "server_size" : {
            "type" : "array",
            "description" : "server_size field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "startup_script" : {
            "type" : "array",
            "description" : "startup_script field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "status" : {
            "type" : "array",
            "description" : "status field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "status_url" : {
            "type" : "array",
            "description" : "status_url field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ServerRunStatistics" : {
        "type" : "object",
        "properties" : {
          "exit_code" : {
            "type" : "integer",
            "description" : "Exit code, such as Exit 0 or Exit 1."
          },
          "id" : {
            "type" : "string",
            "description" : "Server run statistics object unique identifier in UUID format."
          },
          "server" : {
            "type" : "string",
            "description" : "Server name."
          },
          "size" : {
            "type" : "integer",
            "description" : "Size of server."
          },
          "stacktrace" : {
            "type" : "string",
            "description" : "Stacktrace, if there was one."
          },
          "start" : {
            "type" : "string",
            "description" : "Date and time that represents when server started."
          },
          "stop" : {
            "type" : "string",
            "description" : "Date and time that represents when server stopped."
          }
        }
      },
      "ServerRunStatisticsData" : {
        "type" : "object",
        "properties" : {
          "exit_code" : {
            "type" : "integer",
            "description" : "Server exit code."
          },
          "size" : {
            "type" : "integer",
            "description" : "Server size."
          },
          "stacktrace" : {
            "type" : "string",
            "description" : "Server stacktrace."
          },
          "start" : {
            "type" : "string",
            "description" : "Server start."
          },
          "stop" : {
            "type" : "string",
            "description" : "Server stop."
          }
        }
      },
      "ServerRunStatisticsError" : {
        "type" : "object",
        "properties" : {
          "exit_code" : {
            "type" : "array",
            "description" : "exit_code field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "array",
            "description" : "id field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "size" : {
            "type" : "array",
            "description" : "size field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "stacktrace" : {
            "type" : "array",
            "description" : "stacktrace field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "start" : {
            "type" : "array",
            "description" : "start field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "stop" : {
            "type" : "array",
            "description" : "stop field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ServerSize" : {
        "required" : [ "cpu", "memory", "name" ],
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "States whether the Server size is active, or not."
          },
          "cpu" : {
            "type" : "integer",
            "description" : "CPU availability, equivalent to --cpus=<value>. For example if a host has\n2 CPU's, then a value of 1.5 would be limit the container to using all of the\nfirst CPU and half of the second CPU.\n"
          },
          "id" : {
            "type" : "string",
            "description" : "Server size unique identifier."
          },
          "memory" : {
            "type" : "integer",
            "description" : "Memory restriction for container."
          },
          "name" : {
            "type" : "string",
            "description" : "Server size name."
          }
        }
      },
      "ServerSizeData" : {
        "required" : [ "active", "cpu", "memory", "name" ],
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "Active or not active."
          },
          "cpu" : {
            "type" : "integer",
            "description" : "CPU set for server size."
          },
          "memory" : {
            "type" : "integer",
            "description" : "Memory set for server size."
          },
          "name" : {
            "type" : "string",
            "description" : "Server size name."
          }
        }
      },
      "ServerSizeError" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "array",
            "description" : "Active field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "cpu" : {
            "type" : "array",
            "description" : "CPU field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "array",
            "description" : "Id field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "memory" : {
            "type" : "array",
            "description" : "Memory field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "array",
            "description" : "Name field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ServerStatistics" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Server statistics unique identifier in UUID format."
          },
          "server" : {
            "type" : "string",
            "description" : "Server name."
          },
          "size" : {
            "type" : "integer",
            "description" : "Size of statistics."
          },
          "start" : {
            "type" : "string",
            "description" : "Start statistics, such as start time and date."
          },
          "stop" : {
            "type" : "string",
            "description" : "Stop statistics, such as stop time and date."
          }
        }
      },
      "ServerStatisticsData" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "array",
            "description" : "id field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "size" : {
            "type" : "array",
            "description" : "size field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "start" : {
            "type" : "array",
            "description" : "start field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "stop" : {
            "type" : "array",
            "description" : "stop field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ServerStatisticsError" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "array",
            "description" : "Id field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "size" : {
            "type" : "array",
            "description" : "Size field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "start" : {
            "type" : "array",
            "description" : "Start field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "stop" : {
            "type" : "array",
            "description" : "Stop field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ServerStatus" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Server unique identifier in UUID format."
          },
          "status" : {
            "type" : "string",
            "enum" : [ "Stopped", "Running", "Error" ]
          }
        }
      },
      "SshTunnel" : {
        "required" : [ "endpoint", "host", "local_port", "name", "remote_port", "username" ],
        "type" : "object",
        "properties" : {
          "endpoint" : {
            "type" : "string",
            "description" : "SSH tunnel destination endpoint."
          },
          "host" : {
            "type" : "string",
            "description" : "Host, usually IPv4, for SSH tunnel."
          },
          "id" : {
            "type" : "string",
            "description" : "SSH tunnel unique identifier in UUID format."
          },
          "local_port" : {
            "type" : "integer",
            "description" : "Local source port for SSH tunnel."
          },
          "name" : {
            "type" : "string",
            "description" : "SSH tunnel name."
          },
          "remote_port" : {
            "type" : "integer",
            "description" : "Remote port to establish SSH tunnel."
          },
          "server" : {
            "type" : "string",
            "description" : "Server name."
          },
          "username" : {
            "type" : "string",
            "description" : "SSH tunnel user name."
          }
        }
      },
      "SshTunnelData" : {
        "required" : [ "endpoint", "host", "local_port", "name", "remote_port", "username" ],
        "type" : "object",
        "properties" : {
          "endpoint" : {
            "type" : "string",
            "description" : "SSH tunnel endpoint."
          },
          "host" : {
            "type" : "string",
            "description" : "SSH tunnel host."
          },
          "local_port" : {
            "type" : "integer",
            "description" : "SSH tunnel local port."
          },
          "name" : {
            "type" : "string",
            "description" : "SSH tunnel name."
          },
          "remote_port" : {
            "type" : "integer",
            "description" : "SSH tunnel remote port."
          },
          "username" : {
            "type" : "string",
            "description" : "User name to establish SSH tunnel."
          }
        }
      },
      "SshTunnelError" : {
        "type" : "object",
        "properties" : {
          "endpoint" : {
            "type" : "array",
            "description" : "endpoint field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "host" : {
            "type" : "array",
            "description" : "host field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "array",
            "description" : "id field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "local_port" : {
            "type" : "array",
            "description" : "local_port field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "array",
            "description" : "name field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "remote_port" : {
            "type" : "array",
            "description" : "remote_port field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "username" : {
            "type" : "array",
            "description" : "username field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Subscription" : {
        "required" : [ "plan" ],
        "type" : "object",
        "properties" : {
          "application_fee_percent" : {
            "type" : "number",
            "description" : "Application fee percent."
          },
          "cancel_at_period_end" : {
            "type" : "boolean",
            "description" : "Boolean value to determine whether plan cancels at the end of the period, or not."
          },
          "canceled_at" : {
            "type" : "string",
            "description" : "Date and time when plan was cancelled."
          },
          "created" : {
            "type" : "string",
            "description" : "Date and time suscription was created."
          },
          "current_period_end" : {
            "type" : "string",
            "description" : "Current suscription plan end date."
          },
          "current_period_start" : {
            "type" : "string",
            "description" : "Current suscription plan start date."
          },
          "ended_at" : {
            "type" : "string",
            "description" : "Date and time for when plan ended."
          },
          "id" : {
            "type" : "string",
            "description" : "Unique identifier for suscription as UUID."
          },
          "livemode" : {
            "type" : "boolean",
            "description" : "Suscription live, or not."
          },
          "plan" : {
            "type" : "string",
            "description" : "Plan name."
          },
          "quantity" : {
            "type" : "integer",
            "description" : "Quantity purchased as integer."
          },
          "start" : {
            "type" : "string",
            "description" : "Date and time for when plan started."
          },
          "status" : {
            "type" : "string",
            "description" : "Suscription status."
          },
          "stripe_id" : {
            "type" : "string",
            "description" : "Stripe (payment processor) identifier."
          },
          "trial_end" : {
            "type" : "string",
            "description" : "Date and time for trial end."
          },
          "trial_start" : {
            "type" : "string",
            "description" : "Date and time for trial start."
          }
        }
      },
      "SubscriptionData" : {
        "required" : [ "plan" ],
        "type" : "object",
        "properties" : {
          "plan" : {
            "type" : "string",
            "description" : "Plan unique identifier."
          }
        }
      },
      "SubscriptionError" : {
        "type" : "object",
        "properties" : {
          "application_fee_percent" : {
            "type" : "array",
            "description" : "application_fee_percent field errors",
            "items" : {
              "type" : "string"
            }
          },
          "cancel_at_period_end" : {
            "type" : "array",
            "description" : "cancel_at_period_end field errors",
            "items" : {
              "type" : "string"
            }
          },
          "canceled_at" : {
            "type" : "array",
            "description" : "canceled_at field errors",
            "items" : {
              "type" : "string"
            }
          },
          "created" : {
            "type" : "array",
            "description" : "created field errors",
            "items" : {
              "type" : "string"
            }
          },
          "current_period_end" : {
            "type" : "array",
            "description" : "current_period_end field errors",
            "items" : {
              "type" : "string"
            }
          },
          "current_period_start" : {
            "type" : "array",
            "description" : "current_period_start field errors",
            "items" : {
              "type" : "string"
            }
          },
          "ended_at" : {
            "type" : "array",
            "description" : "ended_at field errors",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "array",
            "description" : "id field errors",
            "items" : {
              "type" : "string"
            }
          },
          "livemode" : {
            "type" : "array",
            "description" : "livemode field errors",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field",
            "items" : {
              "type" : "string"
            }
          },
          "plan" : {
            "type" : "array",
            "description" : "plan field errors",
            "items" : {
              "type" : "string"
            }
          },
          "quantity" : {
            "type" : "array",
            "description" : "quantity field errors",
            "items" : {
              "type" : "string"
            }
          },
          "start" : {
            "type" : "array",
            "description" : "start field errors",
            "items" : {
              "type" : "string"
            }
          },
          "status" : {
            "type" : "array",
            "description" : "status field errors",
            "items" : {
              "type" : "string"
            }
          },
          "stripe_id" : {
            "type" : "array",
            "description" : "stripe_id field errors",
            "items" : {
              "type" : "string"
            }
          },
          "trial_end" : {
            "type" : "array",
            "description" : "trial_end field errors",
            "items" : {
              "type" : "string"
            }
          },
          "trial_start" : {
            "type" : "array",
            "description" : "trial_start field errors",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Team" : {
        "type" : "object",
        "properties" : {
          "avatar" : {
            "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type" : "string",
            "description" : "Team avatar image.",
            "format" : "byte"
          },
          "avatar_url" : {
            "type" : "string",
            "description" : "Team avatar url."
          },
          "created_by" : {
            "type" : "string",
            "description" : "UUID of a user that created this team."
          },
          "description" : {
            "type" : "string",
            "description" : "Team description"
          },
          "id" : {
            "type" : "string",
            "description" : "Team unique identifier expressed as UUID."
          },
          "location" : {
            "type" : "string",
            "description" : "Team location."
          },
          "name" : {
            "type" : "string",
            "description" : "Team name"
          },
          "website" : {
            "type" : "string",
            "description" : "Teams website."
          }
        }
      },
      "TeamData" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "avatar" : {
            "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type" : "string",
            "description" : "Team avatar image.",
            "format" : "byte"
          },
          "avatar_url" : {
            "type" : "string",
            "description" : "Team avatar url."
          },
          "description" : {
            "type" : "string",
            "description" : "Team description"
          },
          "location" : {
            "type" : "string",
            "description" : "Team location."
          },
          "name" : {
            "type" : "string",
            "description" : "Team name"
          },
          "website" : {
            "type" : "string",
            "description" : "Teams website."
          }
        }
      },
      "TeamError" : {
        "type" : "object",
        "properties" : {
          "avatar" : {
            "type" : "array",
            "description" : "Avatar field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "avatar_url" : {
            "type" : "array",
            "description" : "Avatar url field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "description" : {
            "type" : "array",
            "description" : "Description field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "array",
            "description" : "Id field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "location" : {
            "type" : "array",
            "description" : "Location field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "array",
            "description" : "Name field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "website" : {
            "type" : "array",
            "description" : "Website field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "User" : {
        "required" : [ "profile", "username" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "User email address."
          },
          "first_name" : {
            "type" : "string",
            "description" : "User first name."
          },
          "id" : {
            "type" : "string",
            "description" : "User unique identifier, expressed as UUID."
          },
          "last_name" : {
            "type" : "string",
            "description" : "User last name."
          },
          "profile" : {
            "$ref" : "#/components/schemas/UserProfile"
          },
          "username" : {
            "maxLength" : 64,
            "minLength" : 6,
            "pattern" : "[a-z0-9]{6,64}",
            "type" : "string",
            "description" : "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
          }
        }
      },
      "UserData" : {
        "required" : [ "password", "profile", "username" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "User email."
          },
          "first_name" : {
            "type" : "string",
            "description" : "User first name."
          },
          "last_name" : {
            "type" : "string",
            "description" : "User last name."
          },
          "password" : {
            "type" : "string",
            "description" : "User password."
          },
          "profile" : {
            "$ref" : "#/components/schemas/UserProfile"
          },
          "username" : {
            "type" : "string",
            "description" : "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
          }
        }
      },
      "UserError" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "array",
            "description" : "Email field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "first_name" : {
            "type" : "array",
            "description" : "First name field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "array",
            "description" : "id field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "last_name" : {
            "type" : "array",
            "description" : "Last name field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "password" : {
            "type" : "array",
            "description" : "Password field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "profile" : {
            "$ref" : "#/components/schemas/UserProfileError"
          },
          "username" : {
            "type" : "array",
            "description" : "Username field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "UserProfile" : {
        "type" : "object",
        "properties" : {
          "avatar" : {
            "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type" : "string",
            "description" : "Avatar image",
            "format" : "byte"
          },
          "bio" : {
            "type" : "string",
            "description" : "Description of user's biography."
          },
          "company" : {
            "type" : "string",
            "description" : "User's company."
          },
          "location" : {
            "type" : "string",
            "description" : "User location."
          },
          "timezone" : {
            "type" : "string",
            "description" : "User's time zone."
          },
          "url" : {
            "type" : "string",
            "description" : "Users's personal website."
          }
        }
      },
      "UserProfileError" : {
        "type" : "object",
        "properties" : {
          "bio" : {
            "type" : "array",
            "description" : "Bio field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "company" : {
            "type" : "array",
            "description" : "Company field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "location" : {
            "type" : "array",
            "description" : "Location field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "timezone" : {
            "type" : "array",
            "description" : "Timezone field errors.",
            "items" : {
              "type" : "string"
            }
          },
          "url" : {
            "type" : "array",
            "description" : "URL field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "VerifyJSONWebToken" : {
        "required" : [ "token" ],
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string",
            "description" : "Varify JWT token."
          }
        }
      },
      "VerifyJSONWebTokenData" : {
        "required" : [ "token" ],
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string",
            "description" : "JSON Web Token (JWT)."
          }
        }
      },
      "VerifyJSONWebTokenError" : {
        "type" : "object",
        "properties" : {
          "non_field_errors" : {
            "type" : "array",
            "description" : "Errors not connected to any field.",
            "items" : {
              "type" : "string"
            }
          },
          "token" : {
            "type" : "array",
            "description" : "Token field errors.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Webhook" : {
        "required" : [ "url" ],
        "type" : "object",
        "properties" : {
          "payload" : {
            "type" : "object",
            "description" : "JSON with payload and webhook configurations."
          },
          "url" : {
            "type" : "string",
            "description" : "URL for webhook."
          }
        }
      }
    },
    "securitySchemes" : {
      "jwt" : {
        "type" : "apiKey",
        "description" : "A valid JSON Web Token (JWT) must be passed for all operations except for those in the `/auth` route. A JWT can be retrieved from the `/auth/jwt-token-auth` endpoint.\n\nThe following syntax is required:\n\n  Authorization: Bearer <token>\n",
        "name" : "Authorization",
        "in" : "header"
      }
    }
  }
}