{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "AzureDeploymentManager",
    "description" : "REST APIs for orchestrating deployments using the Azure Deployment Manager (ADM). See https://docs.microsoft.com/en-us/azure/azure-resource-manager/deployment-manager-overview for more information.",
    "version" : "2019-11-01-preview"
  },
  "servers" : [ {
    "url" : "https://management.azure.com/"
  } ],
  "security" : [ {
    "azure_auth" : [ "user_impersonation" ]
  } ],
  "paths" : {
    "/providers/Microsoft.DeploymentManager/operations" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Lists the supported operations.",
        "operationId" : "Operations_List",
        "parameters" : [ {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The operations are successfully returned. The response code does not determine if the request which this operation corresponds to is successful. Check the response content for the status and any error information on failures.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OperationsList"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources" : {
      "get" : {
        "tags" : [ "ArtifactSources" ],
        "summary" : "Lists the artifact sources in a resource group.",
        "operationId" : "ArtifactSources_List",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArtifactSourceListResult"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources/{artifactSourceName}" : {
      "get" : {
        "tags" : [ "ArtifactSources" ],
        "summary" : "Gets an artifact source.",
        "operationId" : "ArtifactSources_Get",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "artifactSourceName",
          "in" : "path",
          "description" : "The name of the artifact source.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArtifactSource"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ArtifactSources" ],
        "summary" : "Creates or updates an artifact source.",
        "description" : "Synchronously creates a new artifact source or updates an existing artifact source.",
        "operationId" : "ArtifactSources_CreateOrUpdate",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "artifactSourceName",
          "in" : "path",
          "description" : "The name of the artifact source.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Source object that defines the resource.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArtifactSource"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArtifactSource"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ArtifactSources" ],
        "summary" : "Deletes an artifact source.",
        "operationId" : "ArtifactSources_Delete",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "artifactSourceName",
          "in" : "path",
          "description" : "The name of the artifact source.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The artifact source was successfully deleted."
          },
          "204" : {
            "description" : "The artifact source was not found and the operation is considered success."
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts" : {
      "get" : {
        "tags" : [ "Rollouts" ],
        "summary" : "Lists the rollouts in a resource group.",
        "operationId" : "Rollouts_List",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RolloutListResult"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}" : {
      "get" : {
        "tags" : [ "Rollouts" ],
        "summary" : "Gets detailed information of a rollout.",
        "operationId" : "Rollouts_Get",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "rolloutName",
          "in" : "path",
          "description" : "The rollout name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "retryAttempt",
          "in" : "query",
          "description" : "Rollout retry attempt ordinal to get the result of. If not specified, result of the latest attempt will be returned.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Rollout"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Rollouts" ],
        "summary" : "Creates or updates a rollout.",
        "description" : "This is an asynchronous operation and can be polled to completion using the location header returned by this operation.",
        "operationId" : "Rollouts_CreateOrUpdate",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "rolloutName",
          "in" : "path",
          "description" : "The rollout name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Source rollout request object that defines the rollout.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RolloutRequest"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "This is a long running operation. The operation returns a 201 if the request was successfully registered and basic validation is successful. The response includes an Azure-AsyncOperation header that contains the operation status URL. Clients are expected to poll the status URL for the status of the operation.",
            "headers" : {
              "Azure-AsyncOperation" : {
                "description" : "Contains the status URL on which clients are expected to poll the status of the operation.",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RolloutRequest"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Rollouts" ],
        "summary" : "Deletes a rollout resource.",
        "description" : "Only rollouts in terminal state can be deleted.",
        "operationId" : "Rollouts_Delete",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "rolloutName",
          "in" : "path",
          "description" : "The rollout name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The rollout was successfully deleted."
          },
          "204" : {
            "description" : "The rollout was not found and the operation is considered success."
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}/cancel" : {
      "post" : {
        "tags" : [ "Rollouts" ],
        "summary" : "Stops a running rollout.",
        "description" : "Only running rollouts can be canceled.",
        "operationId" : "Rollouts_Cancel",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "rolloutName",
          "in" : "path",
          "description" : "The rollout name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Rollout"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}/restart" : {
      "post" : {
        "tags" : [ "Rollouts" ],
        "summary" : "Restarts a failed rollout and optionally skips all succeeded steps.",
        "description" : "Only failed rollouts can be restarted.",
        "operationId" : "Rollouts_Restart",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "rolloutName",
          "in" : "path",
          "description" : "The rollout name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "skipSucceeded",
          "in" : "query",
          "description" : "If true, will skip all succeeded steps so far in the rollout. If false, will execute the entire rollout again regardless of the current state of individual resources. Defaults to false if not specified.",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Rollout"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies" : {
      "get" : {
        "tags" : [ "ServiceTopologies" ],
        "summary" : "Lists the service topologies in the resource group.",
        "operationId" : "ServiceTopologies_List",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceTopologiesListResult"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}" : {
      "get" : {
        "tags" : [ "ServiceTopologies" ],
        "summary" : "Gets the service topology.",
        "operationId" : "ServiceTopologies_Get",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "serviceTopologyName",
          "in" : "path",
          "description" : "The name of the service topology .",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceTopologyResource"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ServiceTopologies" ],
        "summary" : "Creates or updates a service topology.",
        "description" : "Synchronously creates a new service topology or updates an existing service topology.",
        "operationId" : "ServiceTopologies_CreateOrUpdate",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "serviceTopologyName",
          "in" : "path",
          "description" : "The name of the service topology .",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Source topology object defines the resource.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceTopologyResource"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceTopologyResource"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard Error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ServiceTopologies" ],
        "summary" : "Deletes the service topology.",
        "operationId" : "ServiceTopologies_Delete",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "serviceTopologyName",
          "in" : "path",
          "description" : "The name of the service topology .",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The topology was successfully deleted."
          },
          "204" : {
            "description" : "The topology was not found and the operation is considered success."
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services" : {
      "get" : {
        "tags" : [ "Services" ],
        "summary" : "Lists the services in the service topology.",
        "operationId" : "Services_List",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "serviceTopologyName",
          "in" : "path",
          "description" : "The name of the service topology .",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceListResult"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}" : {
      "get" : {
        "tags" : [ "Services" ],
        "summary" : "Gets the service.",
        "operationId" : "Services_Get",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "serviceTopologyName",
          "in" : "path",
          "description" : "The name of the service topology .",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "The name of the service resource.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceResource"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Services" ],
        "summary" : "Creates or updates a service in the service topology.",
        "description" : "Synchronously creates a new service or updates an existing service.",
        "operationId" : "Services_CreateOrUpdate",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "serviceTopologyName",
          "in" : "path",
          "description" : "The name of the service topology .",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "The name of the service resource.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The service object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceResource"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceResource"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Services" ],
        "summary" : "Deletes the service.",
        "operationId" : "Services_Delete",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "serviceTopologyName",
          "in" : "path",
          "description" : "The name of the service topology .",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "The name of the service resource.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The service was successfully deleted."
          },
          "204" : {
            "description" : "The service was not found and the operation is considered success."
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits" : {
      "get" : {
        "tags" : [ "ServiceUnits" ],
        "summary" : "Lists the service units under a service in the service topology.",
        "operationId" : "ServiceUnits_List",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "serviceTopologyName",
          "in" : "path",
          "description" : "The name of the service topology .",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "The name of the service resource.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceUnitListResult"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}" : {
      "get" : {
        "tags" : [ "ServiceUnits" ],
        "summary" : "Gets the service unit.",
        "operationId" : "ServiceUnits_Get",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "serviceTopologyName",
          "in" : "path",
          "description" : "The name of the service topology .",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "The name of the service resource.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceUnitName",
          "in" : "path",
          "description" : "The name of the service unit resource.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceUnitResource"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ServiceUnits" ],
        "summary" : "Creates or updates a service unit under the service in the service topology.",
        "description" : "This is an asynchronous operation and can be polled to completion using the operation resource returned by this operation.",
        "operationId" : "ServiceUnits_CreateOrUpdate",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "serviceTopologyName",
          "in" : "path",
          "description" : "The name of the service topology .",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "The name of the service resource.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceUnitName",
          "in" : "path",
          "description" : "The name of the service unit resource.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The service unit resource object.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceUnitResource"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "This is a long running operation. The operation returns a 201 if the validation is complete. The response includes an Azure-AsyncOperation header that contains a status URL. Clients are expected to poll the status URL for the status of the operation.",
            "headers" : {
              "Azure-AsyncOperation" : {
                "description" : "Contains the status URL on which clients are expected to poll the status of the operation.",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceUnitResource"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ServiceUnits" ],
        "summary" : "Deletes the service unit.",
        "operationId" : "ServiceUnits_Delete",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "serviceTopologyName",
          "in" : "path",
          "description" : "The name of the service topology .",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "The name of the service resource.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceUnitName",
          "in" : "path",
          "description" : "The name of the service unit resource.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The service unit was successfully deleted."
          },
          "204" : {
            "description" : "The service unit was not found and the operation is considered success."
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps" : {
      "get" : {
        "tags" : [ "Steps" ],
        "summary" : "Lists the steps in a resource group.",
        "operationId" : "Steps_List",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StepResourceListResult"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}" : {
      "get" : {
        "tags" : [ "Steps" ],
        "summary" : "Gets the step.",
        "operationId" : "Steps_Get",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "stepName",
          "in" : "path",
          "description" : "The name of the deployment step.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StepResource"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Steps" ],
        "summary" : "Creates or updates a rollout step with the given step properties.",
        "description" : "Synchronously creates a new step or updates an existing step.",
        "operationId" : "Steps_CreateOrUpdate",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "stepName",
          "in" : "path",
          "description" : "The name of the deployment step.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The step object.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StepResource"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "201" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StepResource"
                }
              }
            }
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Steps" ],
        "summary" : "Deletes the step.",
        "operationId" : "Steps_Delete",
        "parameters" : [ {
          "name" : "subscriptionId",
          "in" : "path",
          "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "resourceGroupName",
          "in" : "path",
          "description" : "The name of the resource group. The name is case insensitive.",
          "required" : true,
          "schema" : {
            "maxLength" : 90,
            "minLength" : 1,
            "pattern" : "^[-\\w\\._\\(\\)]+$",
            "type" : "string"
          }
        }, {
          "name" : "stepName",
          "in" : "path",
          "description" : "The name of the deployment step.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "api-version",
          "in" : "query",
          "description" : "The API version to use for this operation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The step was successfully deleted."
          },
          "204" : {
            "description" : "The step was not found and the operation is considered success."
          },
          "default" : {
            "description" : "All non-success conditions are handled using the standard error contract.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ApiKeyAuthentication" : {
        "required" : [ "in", "name", "value" ],
        "properties" : {
          "in" : {
            "type" : "string",
            "description" : "The location of the authentication key/value pair in the request.",
            "enum" : [ "Query", "Header" ]
          },
          "name" : {
            "type" : "string",
            "description" : "The key name of the authentication key/value pair."
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the authentication key/value pair."
          }
        },
        "description" : "ApiKey authentication gives a name and a value that can be included in either the request header or query parameters.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/RestRequestAuthentication"
        } ]
      },
      "ArtifactSource" : {
        "properties" : {
          "properties" : {
            "type" : "object",
            "description" : "The properties that define the artifact source.",
            "allOf" : [ {
              "$ref" : "#/definitions/ArtifactSourceProperties"
            } ]
          }
        },
        "description" : "The resource that defines the source location where the artifacts are located.",
        "allOf" : [ {
          "required" : [ "location" ],
          "properties" : {
            "location" : {
              "type" : "string",
              "description" : "The geo-location where the resource lives"
            },
            "tags" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Resource tags."
            }
          },
          "description" : "The resource model definition for a ARM tracked top level resource",
          "allOf" : [ {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string",
                "description" : "Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly" : true
              },
              "name" : {
                "type" : "string",
                "description" : "The name of the resource",
                "readOnly" : true
              },
              "type" : {
                "type" : "string",
                "description" : "The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.",
                "readOnly" : true
              }
            }
          } ]
        } ]
      },
      "ArtifactSourceListResult" : {
        "type" : "array",
        "description" : "The list of artifact sources.",
        "items" : {
          "$ref" : "#/components/schemas/ArtifactSource"
        }
      },
      "ArtifactSourceProperties" : {
        "required" : [ "authentication", "sourceType" ],
        "type" : "object",
        "properties" : {
          "artifactRoot" : {
            "type" : "string",
            "description" : "The path from the location that the 'authentication' property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to differentiate different versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with this optional artifactRoot path forms the artifact source location where the artifacts are expected to be found.",
            "example" : "binaries/2018.09.24"
          },
          "authentication" : {
            "$ref" : "#/components/schemas/Authentication"
          },
          "sourceType" : {
            "type" : "string",
            "description" : "The type of artifact source used.",
            "example" : "AzureStorage"
          }
        },
        "description" : "The properties that define the source location where the artifacts are located."
      },
      "Authentication" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The authentication type"
          }
        },
        "description" : "Defines the authentication method and properties to access the artifacts.",
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "CloudError" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "$ref" : "#/components/schemas/CloudErrorBody"
          }
        },
        "description" : "The error information object."
      },
      "CloudErrorBody" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Error code string.",
            "readOnly" : true
          },
          "details" : {
            "type" : "array",
            "description" : "More detailed error information.",
            "items" : {
              "$ref" : "#/components/schemas/CloudErrorBody"
            }
          },
          "message" : {
            "type" : "string",
            "description" : "Descriptive error information.",
            "readOnly" : true
          },
          "target" : {
            "type" : "string",
            "description" : "Error target"
          }
        },
        "description" : "Detailed error information of any failure."
      },
      "HealthCheckStepAttributes" : {
        "required" : [ "healthyStateDuration", "type" ],
        "type" : "object",
        "properties" : {
          "healthyStateDuration" : {
            "type" : "string",
            "description" : "The duration in ISO 8601 format for which the resource is expected to be continuously healthy. If maxElasticDuration is specified, healthy state duration is enforced after the detection of first healthy signal.",
            "example" : "PT60M"
          },
          "maxElasticDuration" : {
            "type" : "string",
            "description" : "The duration in ISO 8601 format for which the health check waits for the resource to become healthy. Health check fails if it doesn't. Health check starts to enforce healthyStateDuration once resource becomes healthy.",
            "example" : "PT30M"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of health check.",
            "example" : "REST"
          },
          "waitDuration" : {
            "type" : "string",
            "description" : "The duration in ISO 8601 format for which health check waits idly without any checks.",
            "example" : "PT15M"
          }
        },
        "description" : "The attributes for the health check step.",
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "HealthCheckStepProperties" : {
        "required" : [ "attributes" ],
        "properties" : {
          "attributes" : {
            "$ref" : "#/components/schemas/HealthCheckStepAttributes"
          }
        },
        "description" : "Defines the properties of a health check step.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/StepProperties"
        } ]
      },
      "Identity" : {
        "required" : [ "identityIds", "type" ],
        "type" : "object",
        "properties" : {
          "identityIds" : {
            "type" : "array",
            "description" : "The list of identities.",
            "items" : {
              "type" : "string",
              "example" : "/subscriptions/mySubId/resourcegroups/myRG/providers/Microsoft.ManagedIdentity/userassignedidentities/myIdentity"
            }
          },
          "type" : {
            "type" : "string",
            "description" : "The identity type.",
            "example" : "userAssigned"
          }
        },
        "description" : "Identity for the resource."
      },
      "Message" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "The actual message text.",
            "readOnly" : true
          },
          "timeStamp" : {
            "type" : "string",
            "description" : "Time in UTC this message was provided.",
            "format" : "date-time",
            "readOnly" : true
          }
        },
        "description" : "Supplementary contextual messages during a rollout."
      },
      "Operation" : {
        "type" : "object",
        "properties" : {
          "display" : {
            "$ref" : "#/components/schemas/OperationDetail"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the operation."
          },
          "origin" : {
            "type" : "string",
            "description" : "The origin of the operation."
          },
          "properties" : {
            "type" : "object",
            "description" : "The properties of the operation."
          }
        },
        "description" : "Represents an operation that can be performed on the service."
      },
      "OperationDetail" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of the operation."
          },
          "operation" : {
            "type" : "string",
            "description" : "The name of the operation."
          },
          "provider" : {
            "type" : "string",
            "description" : "The name of the provider that supports the operation."
          },
          "resource" : {
            "type" : "string",
            "description" : "The resource type on which this operation can be performed."
          }
        },
        "description" : "The detail about an operation."
      },
      "OperationsList" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/components/schemas/Operation"
          }
        },
        "description" : "The operations response."
      },
      "PrePostStep" : {
        "required" : [ "stepId" ],
        "type" : "object",
        "properties" : {
          "stepId" : {
            "type" : "string",
            "description" : "The resource Id of the step to be run.",
            "example" : "Microsoft.DeploymentManager/steps/healthCheckStep1"
          }
        },
        "description" : "The properties that define a step."
      },
      "ResourceOperation" : {
        "type" : "object",
        "properties" : {
          "operationId" : {
            "type" : "string",
            "description" : "Unique identifier of the operation. For ARM resources, this is the operationId obtained from ARM service.",
            "readOnly" : true
          },
          "provisioningState" : {
            "type" : "string",
            "description" : "State of the resource deployment. For ARM resources, this is the current provisioning state of the resource.",
            "readOnly" : true
          },
          "resourceName" : {
            "type" : "string",
            "description" : "Name of the resource as specified in the artifacts. For ARM resources, this is the name of the resource specified in the template."
          },
          "resourceType" : {
            "type" : "string",
            "description" : "Type of the resource as specified in the artifacts. For ARM resources, this is the type of the resource specified in the template."
          },
          "statusCode" : {
            "type" : "string",
            "description" : "Http status code of the operation.",
            "readOnly" : true
          },
          "statusMessage" : {
            "type" : "string",
            "description" : "Descriptive information of the resource operation.",
            "readOnly" : true
          }
        },
        "description" : "Individual resource operation information."
      },
      "RestHealthCheck" : {
        "required" : [ "name", "request" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "A unique name for this check."
          },
          "request" : {
            "$ref" : "#/components/schemas/RestRequest"
          },
          "response" : {
            "$ref" : "#/components/schemas/RestResponse"
          }
        },
        "description" : "A REST based health check"
      },
      "RestHealthCheckStepAttributes" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/RestParameters"
          }
        },
        "description" : "Defines the REST health check step properties.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/HealthCheckStepAttributes"
        } ]
      },
      "RestParameters" : {
        "required" : [ "healthChecks" ],
        "type" : "object",
        "properties" : {
          "healthChecks" : {
            "type" : "array",
            "description" : "The list of checks that form the health check step.",
            "items" : {
              "$ref" : "#/components/schemas/RestHealthCheck"
            }
          }
        },
        "description" : "The parameters for the REST health check."
      },
      "RestRequest" : {
        "required" : [ "authentication", "method", "uri" ],
        "type" : "object",
        "properties" : {
          "authentication" : {
            "$ref" : "#/components/schemas/RestRequestAuthentication"
          },
          "method" : {
            "type" : "string",
            "description" : "The HTTP method to use for the request.",
            "enum" : [ "GET", "POST" ]
          },
          "uri" : {
            "type" : "string",
            "description" : "The HTTP URI to use for the request."
          }
        },
        "description" : "The properties that make up a REST request"
      },
      "RestRequestAuthentication" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The authentication type.",
            "example" : "ApiKey",
            "enum" : [ "ApiKey", "RolloutIdentity" ]
          }
        },
        "description" : "The authentication information required in the REST health check request to the health provider.",
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "RestResponse" : {
        "type" : "object",
        "properties" : {
          "regex" : {
            "type" : "object",
            "properties" : {
              "matchQuantifier" : {
                "type" : "string",
                "description" : "Indicates whether any or all of the expressions should match with the response content.",
                "enum" : [ "All", "Any" ]
              },
              "matches" : {
                "type" : "array",
                "description" : "The list of regular expressions.",
                "example" : [ "Contoso-Service-EndToEnd", "(?i)\"health_status\":((.|\n)*)\"(green|yellow)\"", "(?mi)^(\"application_host\": 94781052)$" ],
                "items" : {
                  "type" : "string"
                }
              }
            },
            "description" : "The regular expressions to match the response content with."
          },
          "successStatusCodes" : {
            "type" : "array",
            "description" : "The HTTP status codes expected in a successful health check response. The response is expected to match one of the given status codes. If no expected status codes are provided, default expected status code is 200 OK.",
            "example" : [ "Ok", "No Content" ],
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "The properties that make up the expected REST response"
      },
      "Rollout" : {
        "properties" : {
          "identity" : {
            "$ref" : "#/components/schemas/Identity"
          },
          "properties" : {
            "type" : "object",
            "description" : "The properties that define a rollout.",
            "allOf" : [ {
              "$ref" : "#/definitions/RolloutRequestProperties"
            }, {
              "$ref" : "#/definitions/RolloutProperties"
            } ]
          }
        },
        "description" : "Defines the rollout.",
        "allOf" : [ {
          "required" : [ "location" ],
          "properties" : {
            "location" : {
              "type" : "string",
              "description" : "The geo-location where the resource lives"
            },
            "tags" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Resource tags."
            }
          },
          "description" : "The resource model definition for a ARM tracked top level resource",
          "allOf" : [ {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string",
                "description" : "Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly" : true
              },
              "name" : {
                "type" : "string",
                "description" : "The name of the resource",
                "readOnly" : true
              },
              "type" : {
                "type" : "string",
                "description" : "The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.",
                "readOnly" : true
              }
            }
          } ]
        } ]
      },
      "RolloutIdentityAuthentication" : {
        "description" : "RolloutIdentity uses the user-assigned managed identity authentication context specified in the Identity property during rollout creation.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/RestRequestAuthentication"
        } ]
      },
      "RolloutListResult" : {
        "type" : "array",
        "description" : "The list of rollouts.",
        "items" : {
          "$ref" : "#/components/schemas/Rollout"
        }
      },
      "RolloutOperationInfo" : {
        "type" : "object",
        "properties" : {
          "endTime" : {
            "type" : "string",
            "description" : "The start time of the rollout in UTC. This property will not be set if the rollout has not completed yet.",
            "format" : "date-time",
            "readOnly" : true
          },
          "error" : {
            "$ref" : "#/components/schemas/CloudErrorBody"
          },
          "retryAttempt" : {
            "type" : "integer",
            "description" : "The ordinal count of the number of retry attempts on a rollout. 0 if no retries of the rollout have been performed. If the rollout is updated with a PUT, this count is reset to 0.",
            "format" : "int32",
            "readOnly" : true
          },
          "skipSucceededOnRetry" : {
            "type" : "boolean",
            "description" : "True, if all steps that succeeded on the previous run/attempt were chosen to be skipped in this retry attempt. False, otherwise.",
            "readOnly" : true
          },
          "startTime" : {
            "type" : "string",
            "description" : "The start time of the rollout in UTC.",
            "format" : "date-time",
            "readOnly" : true
          }
        },
        "description" : "Detailed runtime information of the rollout."
      },
      "RolloutProperties" : {
        "type" : "object",
        "properties" : {
          "operationInfo" : {
            "$ref" : "#/components/schemas/RolloutOperationInfo"
          },
          "services" : {
            "type" : "array",
            "description" : "The detailed information on the services being deployed.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Service"
            }
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of the rollout.",
            "readOnly" : true
          },
          "totalRetryAttempts" : {
            "type" : "integer",
            "description" : "The cardinal count of total number of retries performed on the rollout at a given time.",
            "format" : "int32",
            "readOnly" : true
          }
        },
        "description" : "Defines the properties of a rollout."
      },
      "RolloutRequest" : {
        "required" : [ "identity", "properties" ],
        "properties" : {
          "identity" : {
            "$ref" : "#/components/schemas/Identity"
          },
          "properties" : {
            "$ref" : "#/components/schemas/RolloutRequestProperties"
          }
        },
        "description" : "Defines the PUT rollout request body.",
        "allOf" : [ {
          "required" : [ "location" ],
          "properties" : {
            "location" : {
              "type" : "string",
              "description" : "The geo-location where the resource lives"
            },
            "tags" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Resource tags."
            }
          },
          "description" : "The resource model definition for a ARM tracked top level resource",
          "allOf" : [ {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string",
                "description" : "Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly" : true
              },
              "name" : {
                "type" : "string",
                "description" : "The name of the resource",
                "readOnly" : true
              },
              "type" : {
                "type" : "string",
                "description" : "The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.",
                "readOnly" : true
              }
            }
          } ]
        } ]
      },
      "RolloutRequestProperties" : {
        "required" : [ "buildVersion", "stepGroups", "targetServiceTopologyId" ],
        "type" : "object",
        "properties" : {
          "artifactSourceId" : {
            "type" : "string",
            "description" : "The reference to the artifact source resource Id where the payload is located.",
            "example" : "Microsoft.DeploymentManager/artifactSources/payloadStore1"
          },
          "buildVersion" : {
            "type" : "string",
            "description" : "The version of the build being deployed.",
            "example" : "1.0.0.1"
          },
          "stepGroups" : {
            "type" : "array",
            "description" : "The list of step groups that define the orchestration.",
            "items" : {
              "$ref" : "#/components/schemas/StepGroup"
            }
          },
          "targetServiceTopologyId" : {
            "type" : "string",
            "description" : "The resource Id of the service topology from which service units are being referenced in step groups to be deployed.",
            "example" : "Microsoft.DeploymentManager/serviceTopologies/myServiceTopology"
          }
        },
        "description" : "The properties for defining a rollout."
      },
      "RolloutStep" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "messages" : {
            "type" : "array",
            "description" : "Supplementary informative messages during rollout.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Message"
            }
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the step."
          },
          "operationInfo" : {
            "$ref" : "#/components/schemas/StepOperationInfo"
          },
          "resourceOperations" : {
            "type" : "array",
            "description" : "Set of resource operations that were performed, if any, on an Azure resource.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceOperation"
            }
          },
          "status" : {
            "type" : "string",
            "description" : "Current state of the step.",
            "readOnly" : true
          },
          "stepGroup" : {
            "type" : "string",
            "description" : "The step group the current step is part of."
          }
        },
        "description" : "Defines a specific step on a target service unit."
      },
      "SasAuthentication" : {
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/SasProperties"
          }
        },
        "description" : "Defines the properties to access the artifacts using an Azure Storage SAS URI.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Authentication"
        } ]
      },
      "SasProperties" : {
        "required" : [ "sasUri" ],
        "type" : "object",
        "properties" : {
          "sasUri" : {
            "type" : "string",
            "description" : "The SAS URI to the Azure Storage blob container. Any offset from the root of the container to where the artifacts are located can be defined in the artifactRoot."
          }
        },
        "description" : "The properties that define SAS authentication."
      },
      "Service" : {
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the service."
          },
          "serviceUnits" : {
            "type" : "array",
            "description" : "The detailed information about the units that make up the service.",
            "items" : {
              "$ref" : "#/components/schemas/ServiceUnit"
            }
          }
        },
        "description" : "Defines a service.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ServiceProperties"
        } ]
      },
      "ServiceListResult" : {
        "type" : "array",
        "description" : "The list of services.",
        "items" : {
          "$ref" : "#/components/schemas/ServiceResource"
        }
      },
      "ServiceProperties" : {
        "required" : [ "targetLocation", "targetSubscriptionId" ],
        "type" : "object",
        "properties" : {
          "targetLocation" : {
            "type" : "string",
            "description" : "The Azure location to which the resources in the service belong to or should be deployed to."
          },
          "targetSubscriptionId" : {
            "type" : "string",
            "description" : "The subscription to which the resources in the service belong to or should be deployed to."
          }
        },
        "description" : "The properties of a service."
      },
      "ServiceResource" : {
        "required" : [ "properties" ],
        "properties" : {
          "properties" : {
            "type" : "object",
            "description" : "The properties that define a service in a service topology.",
            "allOf" : [ {
              "$ref" : "#/definitions/ServiceProperties"
            } ]
          }
        },
        "description" : "The resource representation of a service in a service topology.",
        "allOf" : [ {
          "required" : [ "location" ],
          "properties" : {
            "location" : {
              "type" : "string",
              "description" : "The geo-location where the resource lives"
            },
            "tags" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Resource tags."
            }
          },
          "description" : "The resource model definition for a ARM tracked top level resource",
          "allOf" : [ {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string",
                "description" : "Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly" : true
              },
              "name" : {
                "type" : "string",
                "description" : "The name of the resource",
                "readOnly" : true
              },
              "type" : {
                "type" : "string",
                "description" : "The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.",
                "readOnly" : true
              }
            }
          } ]
        } ]
      },
      "ServiceTopologiesListResult" : {
        "type" : "array",
        "description" : "The list of service topologies.",
        "items" : {
          "$ref" : "#/components/schemas/ServiceTopologyResource"
        }
      },
      "ServiceTopologyProperties" : {
        "type" : "object",
        "properties" : {
          "artifactSourceId" : {
            "type" : "string",
            "description" : "The resource Id of the artifact source that contains the artifacts that can be referenced in the service units."
          }
        },
        "description" : "The properties of a service topology."
      },
      "ServiceTopologyResource" : {
        "required" : [ "properties" ],
        "properties" : {
          "properties" : {
            "type" : "object",
            "description" : "The properties that define the service topology.",
            "allOf" : [ {
              "$ref" : "#/definitions/ServiceTopologyProperties"
            } ]
          }
        },
        "description" : "The resource representation of a service topology.",
        "allOf" : [ {
          "required" : [ "location" ],
          "properties" : {
            "location" : {
              "type" : "string",
              "description" : "The geo-location where the resource lives"
            },
            "tags" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Resource tags."
            }
          },
          "description" : "The resource model definition for a ARM tracked top level resource",
          "allOf" : [ {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string",
                "description" : "Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly" : true
              },
              "name" : {
                "type" : "string",
                "description" : "The name of the resource",
                "readOnly" : true
              },
              "type" : {
                "type" : "string",
                "description" : "The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.",
                "readOnly" : true
              }
            }
          } ]
        } ]
      },
      "ServiceUnit" : {
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the service unit."
          },
          "steps" : {
            "type" : "array",
            "description" : "Detailed step information, if present.",
            "items" : {
              "$ref" : "#/components/schemas/RolloutStep"
            }
          }
        },
        "description" : "Defines a service unit.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ServiceUnitProperties"
        } ]
      },
      "ServiceUnitArtifacts" : {
        "type" : "object",
        "properties" : {
          "parametersArtifactSourceRelativePath" : {
            "type" : "string",
            "description" : "The path to the ARM parameters file relative to the artifact source.",
            "example" : "/parameters/resource1.parameters.json"
          },
          "parametersUri" : {
            "type" : "string",
            "description" : "The full URI of the ARM parameters file with the SAS token.",
            "example" : "https://teststore.blob.core.windows.net/payloadcontainer/parameters.json?sasUri"
          },
          "templateArtifactSourceRelativePath" : {
            "type" : "string",
            "description" : "The path to the ARM template file relative to the artifact source.",
            "example" : "/templates/resource1.template.json"
          },
          "templateUri" : {
            "type" : "string",
            "description" : "The full URI of the ARM template file with the SAS token.",
            "example" : "https://teststore.blob.core.windows.net/payloadcontainer/template.json?sasUri"
          }
        },
        "description" : "Defines the artifacts of a service unit."
      },
      "ServiceUnitListResult" : {
        "type" : "array",
        "description" : "The list of service units.",
        "items" : {
          "$ref" : "#/components/schemas/ServiceUnitResource"
        }
      },
      "ServiceUnitProperties" : {
        "required" : [ "deploymentMode", "targetResourceGroup" ],
        "type" : "object",
        "properties" : {
          "artifacts" : {
            "$ref" : "#/components/schemas/ServiceUnitArtifacts"
          },
          "deploymentMode" : {
            "type" : "string",
            "description" : "Describes the type of ARM deployment to be performed on the resource.",
            "enum" : [ "Incremental", "Complete" ]
          },
          "targetResourceGroup" : {
            "type" : "string",
            "description" : "The Azure Resource Group to which the resources in the service unit belong to or should be deployed to."
          }
        },
        "description" : "Defines the properties of a service unit."
      },
      "ServiceUnitResource" : {
        "required" : [ "properties" ],
        "properties" : {
          "properties" : {
            "type" : "object",
            "description" : "The properties that define the service unit.",
            "allOf" : [ {
              "$ref" : "#/definitions/ServiceUnitProperties"
            } ]
          }
        },
        "description" : "Represents the response of a service unit resource.",
        "allOf" : [ {
          "required" : [ "location" ],
          "properties" : {
            "location" : {
              "type" : "string",
              "description" : "The geo-location where the resource lives"
            },
            "tags" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Resource tags."
            }
          },
          "description" : "The resource model definition for a ARM tracked top level resource",
          "allOf" : [ {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string",
                "description" : "Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly" : true
              },
              "name" : {
                "type" : "string",
                "description" : "The name of the resource",
                "readOnly" : true
              },
              "type" : {
                "type" : "string",
                "description" : "The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.",
                "readOnly" : true
              }
            }
          } ]
        } ]
      },
      "StepGroup" : {
        "required" : [ "deploymentTargetId", "name" ],
        "type" : "object",
        "properties" : {
          "dependsOnStepGroups" : {
            "type" : "array",
            "description" : "The list of step group names on which this step group depends on.",
            "example" : [ "stepGroup1", "stepGroup2" ],
            "items" : {
              "type" : "string"
            }
          },
          "deploymentTargetId" : {
            "type" : "string",
            "description" : "The resource Id of service unit to be deployed. The service unit should be from the service topology referenced in targetServiceTopologyId",
            "example" : "Microsoft.DeploymentManager/serviceTopologies/myServiceTopology/services/myService/serviceUnits/database"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the step group."
          },
          "postDeploymentSteps" : {
            "type" : "array",
            "description" : "The list of steps to be run after deploying the target.",
            "items" : {
              "$ref" : "#/components/schemas/PrePostStep"
            }
          },
          "preDeploymentSteps" : {
            "type" : "array",
            "description" : "The list of steps to be run before deploying the target.",
            "items" : {
              "$ref" : "#/components/schemas/PrePostStep"
            }
          }
        },
        "description" : "The properties that define a Step group in a rollout."
      },
      "StepOperationInfo" : {
        "type" : "object",
        "properties" : {
          "correlationId" : {
            "type" : "string",
            "description" : "Unique identifier to track the request for ARM-based resources.",
            "readOnly" : true
          },
          "deploymentName" : {
            "type" : "string",
            "description" : "The name of the ARM deployment initiated as part of the step.",
            "readOnly" : true
          },
          "endTime" : {
            "type" : "string",
            "description" : "End time of the action in UTC.",
            "format" : "date-time",
            "readOnly" : true
          },
          "error" : {
            "$ref" : "#/components/schemas/CloudErrorBody"
          },
          "lastUpdatedTime" : {
            "type" : "string",
            "description" : "Last time in UTC this operation was updated.",
            "format" : "date-time",
            "readOnly" : true
          },
          "startTime" : {
            "type" : "string",
            "description" : "Start time of the action in UTC.",
            "format" : "date-time",
            "readOnly" : true
          }
        },
        "description" : "Detailed information of a specific step run."
      },
      "StepProperties" : {
        "required" : [ "stepType" ],
        "type" : "object",
        "properties" : {
          "stepType" : {
            "type" : "string",
            "description" : "The type of step.",
            "enum" : [ "Wait", "HealthCheck" ]
          }
        },
        "description" : "The properties of a step resource.",
        "discriminator" : {
          "propertyName" : "stepType"
        }
      },
      "StepResource" : {
        "required" : [ "properties" ],
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/StepProperties"
          }
        },
        "description" : "The resource representation of a rollout step.",
        "allOf" : [ {
          "required" : [ "location" ],
          "properties" : {
            "location" : {
              "type" : "string",
              "description" : "The geo-location where the resource lives"
            },
            "tags" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Resource tags."
            }
          },
          "description" : "The resource model definition for a ARM tracked top level resource",
          "allOf" : [ {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string",
                "description" : "Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly" : true
              },
              "name" : {
                "type" : "string",
                "description" : "The name of the resource",
                "readOnly" : true
              },
              "type" : {
                "type" : "string",
                "description" : "The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.",
                "readOnly" : true
              }
            }
          } ]
        } ]
      },
      "StepResourceListResult" : {
        "type" : "array",
        "description" : "The list of steps.",
        "items" : {
          "$ref" : "#/components/schemas/StepResource"
        }
      },
      "WaitStepAttributes" : {
        "required" : [ "duration" ],
        "type" : "object",
        "properties" : {
          "duration" : {
            "type" : "string",
            "description" : "The duration in ISO 8601 format of how long the wait should be.",
            "example" : "PT30M"
          }
        },
        "description" : "The parameters for the wait step."
      },
      "WaitStepProperties" : {
        "required" : [ "attributes" ],
        "properties" : {
          "attributes" : {
            "$ref" : "#/components/schemas/WaitStepAttributes"
          }
        },
        "description" : "Defines the properties of a Wait step.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/StepProperties"
        } ]
      }
    },
    "parameters" : {
      "ApiVersionParameter" : {
        "name" : "api-version",
        "in" : "query",
        "description" : "The API version to use for this operation.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "artifactSourceName" : {
        "name" : "artifactSourceName",
        "in" : "path",
        "description" : "The name of the artifact source.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "resourceGroupName" : {
        "name" : "resourceGroupName",
        "in" : "path",
        "description" : "The name of the resource group. The name is case insensitive.",
        "required" : true,
        "schema" : {
          "maxLength" : 90,
          "minLength" : 1,
          "pattern" : "^[-\\w\\._\\(\\)]+$",
          "type" : "string"
        }
      },
      "retryAttempt" : {
        "name" : "retryAttempt",
        "in" : "query",
        "description" : "Rollout retry attempt ordinal to get the result of. If not specified, result of the latest attempt will be returned.",
        "schema" : {
          "type" : "integer"
        }
      },
      "rolloutName" : {
        "name" : "rolloutName",
        "in" : "path",
        "description" : "The rollout name.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "serviceName" : {
        "name" : "serviceName",
        "in" : "path",
        "description" : "The name of the service resource.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "serviceTopologyName" : {
        "name" : "serviceTopologyName",
        "in" : "path",
        "description" : "The name of the service topology .",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "serviceUnitName" : {
        "name" : "serviceUnitName",
        "in" : "path",
        "description" : "The name of the service unit resource.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "stepName" : {
        "name" : "stepName",
        "in" : "path",
        "description" : "The name of the deployment step.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "subscriptionId" : {
        "name" : "subscriptionId",
        "in" : "path",
        "description" : "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      }
    },
    "securitySchemes" : {
      "azure_auth" : {
        "type" : "oauth2",
        "description" : "Azure Active Directory OAuth2 Flow"
      }
    }
  }
}