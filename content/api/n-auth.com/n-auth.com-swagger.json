{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "nextAuth API",
    "description" : "API for the nextAuth server",
    "version" : "2.2"
  },
  "servers" : [ {
    "url" : "https://api.nextauth.com/"
  } ],
  "security" : [ {
    "api_key" : null
  }, {
    "api_key" : null,
    "role_id" : null
  } ],
  "tags" : [ {
    "name" : "HTML",
    "description" : "Basic calls that provide you with all the necessary HTML to include into your webpage for logging in (sessions), enrolling new users (registration) and logging out (sessions)."
  }, {
    "name" : "Sessions",
    "description" : "Everything about session management and login."
  }, {
    "name" : "Registration",
    "description" : "Enrolling new users or coupling an exising account to a user."
  }, {
    "name" : "Users",
    "description" : "Everything about users.",
    "externalDocs" : {
      "url" : "https://doc.nextauth.com/introduction/concepts.html#users"
    }
  }, {
    "name" : "Accounts",
    "description" : "Everything about accounts (app instances).",
    "externalDocs" : {
      "url" : "https://doc.nextauth.com/introduction/concepts.html#accounts"
    }
  }, {
    "name" : "Transactions",
    "description" : "Everything about transactions."
  }, {
    "name" : "Servers",
    "description" : "Everything about your servers.",
    "externalDocs" : {
      "url" : "https://doc.nextauth.com/introduction/concepts.html#servers"
    }
  }, {
    "name" : "Management",
    "description" : "Everything for managing the access and authorisations to the servers themselves: permissions, roles and apikeys."
  }, {
    "name" : "Global",
    "description" : "Everything about global and privileged server attributes. Required permission: global 'servers'."
  } ],
  "paths" : {
    "/apikeys/" : {
      "get" : {
        "tags" : [ "Management" ],
        "summary" : "Get all API keys.",
        "description" : "Get all API keys generated by the current role. Required permission: global 'servers'.",
        "operationId" : "getApiKeys",
        "responses" : {
          "200" : {
            "description" : "List of apikeys (with role and description)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiKeys"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Management" ],
        "summary" : "Create a new API key.",
        "description" : "Create a new API key. Required permission: global 'servers'.",
        "operationId" : "createApiKey",
        "parameters" : [ {
          "name" : "description",
          "in" : "query",
          "description" : "Description for the new role",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Newly created apikey (with role and description)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiKey"
                }
              }
            }
          }
        }
      }
    },
    "/attributes/" : {
      "get" : {
        "tags" : [ "Global" ],
        "summary" : "Get all global attributes",
        "description" : "Returns an array containing all global attributes. Required permission: global 'servers'.",
        "operationId" : "getGlobalAttributes",
        "responses" : {
          "200" : {
            "description" : "Array of attributes",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Global" ],
        "summary" : "Update specified global attributes",
        "description" : "Update the specified global attributes. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: 'servers'.",
        "operationId" : "updateGlobalAttributes",
        "requestBody" : {
          "description" : "Array of attributes",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "On successful update"
          }
        }
      },
      "post" : {
        "tags" : [ "Global" ],
        "summary" : "Set all global attributes",
        "description" : "Set the global attributes. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: global 'servers'.",
        "operationId" : "setGlobalAttributes",
        "requestBody" : {
          "description" : "Array of attributes",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "Global" ],
        "summary" : "Delete all global attributes",
        "description" : "Delete all global attributes. Required permission: global 'servers'.",
        "operationId" : "deleteGlobalAttributes",
        "responses" : {
          "200" : {
            "description" : "On successful delete"
          }
        }
      }
    },
    "/attributes/{attributekey}" : {
      "delete" : {
        "tags" : [ "Global" ],
        "summary" : "Delete specific global attribute",
        "description" : "Delete global attribute with the specified key. Required: global 'servers'.",
        "operationId" : "deleteGlobalAttribute",
        "parameters" : [ {
          "name" : "attributekey",
          "in" : "path",
          "description" : "Key of the attribute",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "On successful delete"
          }
        }
      }
    },
    "/servers/" : {
      "get" : {
        "tags" : [ "Servers" ],
        "summary" : "List all your servers",
        "description" : "List all the servers you have the permissions for. Required permission: 'servers'.",
        "operationId" : "getServers",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number of results",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "marker",
          "in" : "query",
          "description" : "Offset in the result list",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of servers",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Servers"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Servers" ],
        "summary" : "Create a new server",
        "description" : "Create a new server. Required permission: global 'createserver'.",
        "operationId" : "createServer",
        "requestBody" : {
          "description" : "Server data (note that serverid, serverpk and validtime are generated by the server)",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Server"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Server config for newly created server",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Server"
                }
              }
            }
          }
        }
      }
    },
    "/servers/{serverid}/" : {
      "get" : {
        "tags" : [ "Servers" ],
        "summary" : "Configuration of a specific server",
        "description" : "Returns the configuration of a specific server. Required permission: 'servers' or 'createserver'.",
        "operationId" : "getServer",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Server config",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Server"
                }
              }
            }
          },
          "404" : {
            "description" : "Server not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Servers" ],
        "summary" : "Update configuration of a specific server",
        "description" : "Update the configuration of a specific server. Required permission: 'createserver'.",
        "operationId" : "updateServer",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Server data (note that serverid and serverpk cannot be changed)",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Server"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Server config",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Server"
                }
              }
            }
          },
          "404" : {
            "description" : "Server not found"
          }
        }
      }
    },
    "/servers/{serverid}/accounts/" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get all accounts",
        "description" : "Returns all account. Required permission 'accounts'.",
        "operationId" : "getAllAccounts",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter users based on an attribute. Takes the format *attributename=attributevalue*. You can filter for multiple values at once, e.g. *group=in:group1,group2*",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number of results",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "marker",
          "in" : "query",
          "description" : "Offset in the result list",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc*",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Array of accounts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Accounts"
                }
              }
            }
          }
        }
      }
    },
    "/servers/{serverid}/accounts/{accountid}/" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get specific account",
        "description" : "Returns the account. Required permission: 'sessions' or 'accounts'.",
        "operationId" : "getAccount",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountid",
          "in" : "path",
          "description" : "Account id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Account",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Account"
                }
              }
            }
          },
          "404" : {
            "description" : "Account not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Accounts" ],
        "summary" : "Update specific account",
        "description" : "Update an account. The only available change is (un)blocking the account. Required permission: 'accounts'.\n",
        "operationId" : "updateAccount",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountid",
          "in" : "path",
          "description" : "Account id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "blocked",
          "in" : "query",
          "description" : "True if the account is blocked",
          "required" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Account after update",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Account"
                }
              }
            }
          },
          "404" : {
            "description" : "Account not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Accounts" ],
        "summary" : "Delete specific account",
        "description" : "Delete an account. Required permission: 'accounts'.",
        "operationId" : "deleteAccount",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountid",
          "in" : "path",
          "description" : "Account id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "On successful delete"
          },
          "404" : {
            "description" : "Account not found"
          }
        }
      }
    },
    "/servers/{serverid}/accounts/{accountid}/provokelogin" : {
      "post" : {
        "tags" : [ "Sessions" ],
        "summary" : "Push a login confirmation to the user's app",
        "description" : "Push a login to the nextAuth app for the user to confirm, based on the given account (app instance). Required permission: 'sessions' or 'accounts'.",
        "operationId" : "provokeLoginOnAccount",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-nonce",
          "in" : "header",
          "description" : "Base64 encoded nonce to identify the browser/webserver session",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountid",
          "in" : "path",
          "description" : "Account id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "description" : "Session information to display to user",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserContext"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/servers/{serverid}/accounts/{accountid}/user" : {
      "put" : {
        "tags" : [ "Accounts", "Registration" ],
        "summary" : "Update user of the given account.",
        "description" : "Update the user of the given account. Required permission: 'accounts'.",
        "operationId" : "updateAccountUser",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountid",
          "in" : "path",
          "description" : "Account id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "userid",
          "in" : "query",
          "description" : "User name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Account after update",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Account"
                }
              }
            }
          },
          "403" : {
            "description" : "Invalid user name"
          },
          "404" : {
            "description" : "Account not found"
          }
        }
      }
    },
    "/servers/{serverid}/attributes/" : {
      "get" : {
        "tags" : [ "Servers" ],
        "summary" : "Get all attributes of a specific server",
        "description" : "Returns an array containing all attributes corresponding to this server. Required permission: 'servers'.",
        "operationId" : "getServerAttributes",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Array of attributes",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "Server not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Servers" ],
        "summary" : "Update specified attributes of a specific server",
        "description" : "Update the specified attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: 'servers'.",
        "operationId" : "updateServerAttributes",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Array of attributes",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "On successful update"
          },
          "404" : {
            "description" : "Server not found"
          }
        }
      },
      "post" : {
        "tags" : [ "Servers" ],
        "summary" : "Set all attributes of a specific server",
        "description" : "Set the attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: 'servers'.",
        "operationId" : "setServerAttributes",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Array of attributes",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Server not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Servers" ],
        "summary" : "Delete all attributes of a specific server",
        "description" : "Delete all attributes of a specific server. Required permission: 'servers'.",
        "operationId" : "deleteServerAttributes",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "On successful delete"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/servers/{serverid}/attributes/{attributekey}" : {
      "delete" : {
        "tags" : [ "Servers" ],
        "summary" : "Delete specific attribute of a specific server",
        "description" : "Delete attribute with the specified key of a specific server. Required permission: 'servers'.",
        "operationId" : "deleteServerAttribute",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributekey",
          "in" : "path",
          "description" : "Key of the attribute",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "On successful delete"
          },
          "404" : {
            "description" : "Server not found"
          }
        }
      }
    },
    "/servers/{serverid}/permissions/" : {
      "get" : {
        "tags" : [ "Management" ],
        "summary" : "Get all permissions for the specified server.",
        "description" : "Returns all permissions. Required permission: 'servers'.",
        "operationId" : "getAllPermissions",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of roles and permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Permissions"
                }
              }
            }
          },
          "404" : {
            "description" : "Server not found"
          }
        }
      }
    },
    "/servers/{serverid}/permissions/{roleid}" : {
      "get" : {
        "tags" : [ "Management" ],
        "summary" : "Get all permissions for the specified server and role.",
        "description" : "Returns all permissions. Required permission: 'servers'.",
        "operationId" : "getPermissions",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "Base64 encoded role id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of roles and permissions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Permissions"
                }
              }
            }
          },
          "404" : {
            "description" : "Server or role not found"
          }
        }
      },
      "post" : {
        "tags" : [ "Management" ],
        "summary" : "Set new permissions for the specified role on a server",
        "description" : "Set new permissions for the specified role on a server. This overwrites any existing permissions on this server for the specified role. Required permission: 'root'.",
        "operationId" : "grantPermissions",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "Base64 encoded role id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Array of new permissions",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "ok"
          },
          "404" : {
            "description" : "Server or role not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Management" ],
        "summary" : "Revoke all permissions for the specified server and role.",
        "description" : "Revoke all permissions for the specified server and role. Required permission: 'root'.",
        "operationId" : "revokePermissions",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "Base64 encoded role id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok"
          },
          "404" : {
            "description" : "Server or role not found"
          }
        }
      }
    },
    "/servers/{serverid}/privilegedattributes/" : {
      "get" : {
        "tags" : [ "Global" ],
        "summary" : "Get all privileged attributes of a specific server",
        "description" : "Returns an array containing all privileged attributes corresponding to this server. Required permission: global 'servers'.",
        "operationId" : "getServerPrivilegedAttributes",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Array of attributes",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "Server not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Global" ],
        "summary" : "Update privileged specified attributes of a specific server",
        "description" : "Update the specified privileged attributes of a specific server. Prior privileged attributes with keys that are not provided in the body of the request will not be deleted. Required permission: global 'servers'.",
        "operationId" : "updateServerPrivilegedAttributes",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Array of attributes",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "On successful update"
          },
          "404" : {
            "description" : "Server not found"
          }
        }
      },
      "post" : {
        "tags" : [ "Global" ],
        "summary" : "Set all privileged attributes of a specific server",
        "description" : "Set the privileged attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: global 'servers'.",
        "operationId" : "setServerPrivilegedAttributes",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Array of attributes",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Server not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Global" ],
        "summary" : "Delete all privileged attributes of a specific server",
        "description" : "Delete all privileged attributes of a specific server. Required permission: global 'servers'.",
        "operationId" : "deleteServerPrivilegedAttributes",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "On successful delete"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/servers/{serverid}/privilegedattributes/{attributekey}" : {
      "delete" : {
        "tags" : [ "Global" ],
        "summary" : "Delete specific privileged attribute of a specific server",
        "description" : "Delete privileged attribute with the specified key of a specific server. Required permission: global 'servers'.",
        "operationId" : "deleteServerPrivilegedAttribute",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributekey",
          "in" : "path",
          "description" : "Key of the attribute",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "On successful delete"
          },
          "404" : {
            "description" : "Server not found"
          }
        }
      }
    },
    "/servers/{serverid}/sessions/" : {
      "get" : {
        "tags" : [ "Sessions", "HTML" ],
        "summary" : "Check if the user is logged in",
        "description" : "Based on the browser/webserver session identifier, check if the user is logged in and return the associated username. This also returns additional information: the data for the login qr code and whether or not a loggin can be provoked directly from the server. Required permission: 'sessions'.",
        "operationId" : "getSession",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-nonce",
          "in" : "header",
          "description" : "Nonce to identify the browser/webserver session",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Current login status.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoginStatus"
                }
              }
            }
          }
        }
      }
    },
    "/servers/{serverid}/sessions/html/enrol" : {
      "get" : {
        "tags" : [ "HTML" ],
        "summary" : "Generate HTML to enrol a new user",
        "description" : "Generate HTML to enrol a new user. Required permission: 'sessions'.\n",
        "operationId" : "getHtmlEnrol",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-nonce",
          "in" : "header",
          "description" : "Nonce to identify the browser/webserver session",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Name to forward to the nextAuth app for this account",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userid",
          "in" : "query",
          "description" : "User name to register this user under",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Generated HTML.",
            "content" : {
              "text/html" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/servers/{serverid}/sessions/html/footer" : {
      "get" : {
        "tags" : [ "HTML" ],
        "summary" : "Generic HTML to add to footer. Required for login/logout/enrol functionality.",
        "description" : "HTML to add to footer of HTML page. Required permission: 'sessions'.\n",
        "operationId" : "getHtmlFooter",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-nonce",
          "in" : "header",
          "description" : "Nonce to identify the browser/webserver session",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Additional sessions that should be monitored through the websocket.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HtmlFooterBody"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Generated HTML.",
            "content" : {
              "text/html" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/servers/{serverid}/sessions/html/login" : {
      "get" : {
        "tags" : [ "HTML" ],
        "summary" : "Generate HTML for the login block",
        "description" : "Generate HTML for the login block. Required permission: 'sessions'.\n",
        "operationId" : "getHtmlLogin",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-nonce",
          "in" : "header",
          "description" : "Nonce to identify the browser/webserver session",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Session information to display to user.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserContext"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Generated HTML.",
            "content" : {
              "text/html" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/servers/{serverid}/sessions/logout" : {
      "post" : {
        "tags" : [ "Sessions", "HTML" ],
        "summary" : "Force a logout on the given session",
        "description" : "Force a logout on the given session. Required permission: 'sessions'.",
        "operationId" : "logout",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-nonce",
          "in" : "header",
          "description" : "Nonce to identify the browser/webserver session",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok"
          }
        }
      }
    },
    "/servers/{serverid}/sessions/provokelogin" : {
      "post" : {
        "tags" : [ "Sessions" ],
        "summary" : "Push a login confirmation to the user's app",
        "description" : "Push a login to the nextAuth app for the user to confirm, based on last account that successfully logged in for the given session. Required permission: 'sessions'.\n",
        "operationId" : "provokeLogin",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-nonce",
          "in" : "header",
          "description" : "Nonce to identify the browser/webserver session",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Session information to display to user.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserContext"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/servers/{serverid}/sessions/qr/enrol" : {
      "get" : {
        "tags" : [ "Registration" ],
        "summary" : "Generate data for an enrol qr code",
        "description" : "Returns the data for an enrol qr code. Required permission: 'sessions'.",
        "operationId" : "getQrEnrol",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-nonce",
          "in" : "header",
          "description" : "Nonce to identify the browser/webserver session",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Name to forward to the nextAuth app for this account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userid",
          "in" : "query",
          "description" : "User name to register this user under",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "img",
          "in" : "query",
          "description" : "'png' for a PNG image, not set for raw data in the qr code",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "s",
          "in" : "query",
          "description" : "size in pixels of the qr code, defaults to 500",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Raw byte array containing the enrol qr code data (either raw or as a PNG image).",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          }
        }
      }
    },
    "/servers/{serverid}/sessions/qr/login" : {
      "get" : {
        "tags" : [ "Sessions" ],
        "summary" : "Generate data for a login qr code",
        "description" : "Returns the data for a login qr code. Required permission: 'sessions'.",
        "operationId" : "getQrLogin",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-nonce",
          "in" : "header",
          "description" : "Nonce to identify the browser/webserver session",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "img",
          "in" : "query",
          "description" : "\"png\" for a PNG image, not set for raw data in the qr code",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "s",
          "in" : "query",
          "description" : "size in pixels of the qr code, defaults to 500",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "description" : "Session information to display to user.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserContext"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "Raw byte array containing the login qr code data (either raw or as a PNG image).",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          }
        }
      }
    },
    "/servers/{serverid}/sessions/registeruser" : {
      "post" : {
        "tags" : [ "Users", "Registration" ],
        "summary" : "Register a userid for the currently logged in account.",
        "description" : "Register a user for the currently logged in account. You can also directly pass a user name when generating an ENROL qr code. Required permission: 'users'.",
        "operationId" : "registerUser",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-nonce",
          "in" : "header",
          "description" : "Nonce to identify the browser/webserver session",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userid",
          "in" : "query",
          "description" : "Username to register",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/servers/{serverid}/sessions/transactions" : {
      "post" : {
        "tags" : [ "Transactions" ],
        "summary" : "Create a transaction to be approved within the current session.",
        "description" : "Create a transaction for approval within the current session. Required permission: 'sessions'.",
        "operationId" : "createTransaction",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-nonce",
          "in" : "header",
          "description" : "Nonce to identify the browser/webserver session",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/Transaction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionId"
                }
              }
            }
          },
          "403" : {
            "description" : "no account associated with this session"
          }
        }
      }
    },
    "/servers/{serverid}/transactions/{transactionid}" : {
      "get" : {
        "tags" : [ "Transactions" ],
        "summary" : "Get transaction result for a given transaction.",
        "description" : "Get transaction result for a given transaction id. Required permission: 'sessions'.",
        "operationId" : "getTransactionResult",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "transactionid",
          "in" : "path",
          "description" : "Base64 encoded transaction id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionResult"
                }
              }
            }
          },
          "404" : {
            "description" : "no transaction with given id found"
          }
        }
      }
    },
    "/servers/{serverid}/users/" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get all users",
        "description" : "Returns an array of arrays containing all accounts corresponding to all users. Required permission: 'users'.",
        "operationId" : "getUsers",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter users based on an attribute. Takes the format *attributename=attributevalue*. You can filter for multiple values at once, e.g. *group=in:group1,group2*",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Search for a username LIKE %search%",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number of results",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "marker",
          "in" : "query",
          "description" : "Offset in the result list",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc*",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Array of users",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Users"
                }
              }
            }
          }
        }
      }
    },
    "/servers/{serverid}/users/{userid}/" : {
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Delete a specific user",
        "description" : "Delete a user. Required permission: 'users'.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userid",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "On successful delete"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/servers/{serverid}/users/{userid}/accounts" : {
      "get" : {
        "tags" : [ "Users", "Accounts" ],
        "summary" : "Get all accounts of a specific user",
        "description" : "Returns an array containing all accounts corresponding to this user. Required permission: 'sessions' or 'users'.",
        "operationId" : "getUser",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userid",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number of results",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "marker",
          "in" : "query",
          "description" : "Offset in the result list",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc*",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Array of accounts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Accounts"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Users", "Accounts" ],
        "summary" : "Delete all accounts of a specific user",
        "description" : "Delete all accounts corresponding to this user. The user itself is not deleted. Required permission: 'accounts' or 'users'.",
        "operationId" : "deleteUserAccounts",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userid",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "On successful delete"
          }
        }
      }
    },
    "/servers/{serverid}/users/{userid}/attributes/" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get all attributes of a specific user",
        "description" : "Returns an array containing all attributes corresponding to this user. Required permission: 'sessions' or 'users'.",
        "operationId" : "getUserAttributes",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userid",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Array of attributes",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Update specified attributes of a specific user",
        "description" : "Update the specified attributes of a specific user. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: 'users'.",
        "operationId" : "updateUserAttributes",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userid",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Array of attributes",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "On successful update"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Set all attributes of a specific user",
        "description" : "Set the attributes of a specific user. Prior attributes with keys that are not provided in the body of the request will be deleted. Creates the user if not exists. Required permission: 'users'.",
        "operationId" : "setUserAttributes",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userid",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Array of attributes",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Delete all attributes of a specific user",
        "description" : "Delete all attributes of a specific user. Required permission: 'users'.",
        "operationId" : "deleteUserAttributes",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userid",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "On successful delete"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/servers/{serverid}/users/{userid}/attributes/{attributekey}" : {
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Delete specific attribute of a specific user",
        "description" : "Delete attribute with the specified key of a specific user. Required permission: 'users'.",
        "operationId" : "deleteUserAttribute",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userid",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributekey",
          "in" : "path",
          "description" : "Key of the attribute",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "On successful delete"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/servers/{serverid}/users/{userid}/provokelogin" : {
      "post" : {
        "tags" : [ "Sessions" ],
        "summary" : "Push a login confirmation to the user's app",
        "description" : "Push a login to the nextAuth app for the user to confirm, based on the given userid. Required permission: 'sessions' or 'users'.",
        "operationId" : "provokeLoginOnUser",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-nonce",
          "in" : "header",
          "description" : "Nonce to identify the browser/webserver session",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userid",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Session information to display to user.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserContext"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/servers/{serverid}/users/{userid}/role/" : {
      "get" : {
        "tags" : [ "Management" ],
        "summary" : "Get role for a specific user.",
        "description" : "Get role for a specific user. Required permission: 'users'.",
        "operationId" : "getUserRole",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userid",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User role (base 64 encoded)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found, no role found for user"
          }
        }
      },
      "post" : {
        "tags" : [ "Management" ],
        "summary" : "Get or create a role for a specific user.",
        "description" : "Get or create a role for a specific user. Required permission: 'users'.",
        "operationId" : "getOrCreateUserRole",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userid",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User role (base 64 encoded)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "role" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/servers/{serverid}/vash" : {
      "get" : {
        "tags" : [ "Registration" ],
        "summary" : "Visual hash of this server",
        "description" : "Returns a PNG of the visual hash corresponding to this server. This visual hash is used during the registration process (optional), for the user to verify that (s)he is registering with the right server in the nextAuth app. For single-server nextAuth-enabled apps (white label or mobile SDK), the public key of the server is typically pinned within the app and hence this visual hash is not displayed to the user. Required permission: 'sessions' or 'servers'.",
        "operationId" : "getServerVash",
        "parameters" : [ {
          "name" : "serverid",
          "in" : "path",
          "description" : "Base64 encoded server id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Raw byte array containing the visual hash of this server as a PNG image.",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "404" : {
            "description" : "Server not found"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Account" : {
        "required" : [ "description", "id" ],
        "type" : "object",
        "properties" : {
          "blocked" : {
            "type" : "boolean",
            "description" : "True if the account is blocked, false otherwise"
          },
          "clientVersion" : {
            "type" : "string",
            "description" : "Version nextAuth client in the app"
          },
          "created" : {
            "type" : "integer",
            "description" : "Timestamp of creation",
            "format" : "int64"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the account (e.g. device name)"
          },
          "id" : {
            "type" : "integer",
            "description" : "Account id"
          },
          "lastlogin" : {
            "type" : "integer",
            "description" : "Timestamp of last login",
            "format" : "int64"
          },
          "lastprovoke" : {
            "type" : "integer",
            "description" : "Timestamp of last provoke (push message)",
            "format" : "int64"
          },
          "userid" : {
            "type" : "string",
            "description" : "User name"
          }
        }
      },
      "Accounts" : {
        "required" : [ "accounts" ],
        "type" : "object",
        "properties" : {
          "accounts" : {
            "type" : "array",
            "description" : "Array of accounts",
            "items" : {
              "$ref" : "#/components/schemas/Account"
            }
          },
          "totalnumber" : {
            "type" : "integer",
            "description" : "total number of accounts"
          }
        }
      },
      "ApiKey" : {
        "type" : "object",
        "properties" : {
          "apikey" : {
            "type" : "string",
            "description" : "API key"
          },
          "description" : {
            "type" : "string",
            "description" : "Description"
          },
          "role" : {
            "type" : "string",
            "description" : "Role id"
          }
        }
      },
      "ApiKeys" : {
        "required" : [ "apikeys" ],
        "type" : "object",
        "properties" : {
          "apikeys" : {
            "type" : "array",
            "description" : "Array of apikeys",
            "items" : {
              "$ref" : "#/components/schemas/ApiKey"
            }
          }
        }
      },
      "HtmlFooterBody" : {
        "type" : "object",
        "properties" : {
          "sessions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServerSession"
            }
          }
        }
      },
      "LoginStatus" : {
        "type" : "object",
        "properties" : {
          "accountid" : {
            "type" : "integer",
            "description" : "Account id"
          },
          "canprovoke" : {
            "type" : "boolean",
            "description" : "True if a login can be pushed from the server, false otherwise"
          },
          "hsid" : {
            "type" : "string",
            "description" : "Converted session id, used by the websockets"
          },
          "loggedin" : {
            "type" : "boolean",
            "description" : "True if the user is loggedin, false otherwise"
          },
          "loginqrdata" : {
            "type" : "string",
            "description" : "Base64 encoded data that is represented in the login qr code"
          },
          "pk" : {
            "type" : "string",
            "description" : "Base64 encoded public key of the nextAuth app. This uniquely identifies the account on the nextAuth app, regardless of the username"
          },
          "userid" : {
            "type" : "string",
            "description" : "User name"
          }
        }
      },
      "Permission" : {
        "type" : "object",
        "properties" : {
          "acl" : {
            "type" : "string",
            "description" : "Comma-seperated list of permissions"
          },
          "role" : {
            "type" : "string",
            "description" : "Role id"
          },
          "server" : {
            "type" : "string",
            "description" : "Base64 encoded server id"
          }
        }
      },
      "Permissions" : {
        "required" : [ "permissions" ],
        "type" : "object",
        "properties" : {
          "permissions" : {
            "type" : "array",
            "description" : "Array of permissions",
            "items" : {
              "$ref" : "#/components/schemas/Permission"
            }
          }
        }
      },
      "Role" : {
        "type" : "object",
        "properties" : {
          "role" : {
            "type" : "string",
            "description" : "Base64 encode role"
          }
        }
      },
      "Server" : {
        "required" : [ "logo", "pinTimeout", "pinTransTimeout", "pingTime", "serverFlags", "serverName", "serverid", "serverpk" ],
        "type" : "object",
        "properties" : {
          "accountCount" : {
            "type" : "integer",
            "description" : "Number of accounts registered with this server"
          },
          "appandroid" : {
            "type" : "string",
            "description" : "URL of the app in Google Play"
          },
          "appios" : {
            "type" : "string",
            "description" : "URL of the app in the App Store"
          },
          "appname" : {
            "type" : "string",
            "description" : "name of the app"
          },
          "appurl" : {
            "type" : "string",
            "description" : "URL (prefix) to launch the app"
          },
          "lastLogin" : {
            "type" : "integer",
            "description" : "Last login on this server",
            "format" : "int64"
          },
          "logo" : {
            "type" : "string",
            "description" : "Base 64 encoded logo"
          },
          "owner" : {
            "type" : "integer",
            "description" : "Owner id"
          },
          "pinTimeout" : {
            "type" : "integer",
            "description" : "Time (minutes) since the last time the user entered his PIN, that the user is not requested a PIN at login. -1 means that the user is never asked for a PIN before logging in, 0 means that the user is asked every time he wants to login"
          },
          "pinTransTimeout" : {
            "type" : "integer",
            "description" : "Time (minutes) since the last time the user entered his PIN, that the user is not requested a PIN at transaction approval. -1 means that the user is never asked for a PIN before approving a transaction, 0 means that the user is asked every time he wants to approve a transaction"
          },
          "pingTime" : {
            "type" : "integer",
            "description" : "Time (seconds) that the nextAuth app has before it needs to reply to a ping request from the nextAuth server (continuous authentication)"
          },
          "serverFlags" : {
            "type" : "array",
            "description" : "Server flags",
            "items" : {
              "type" : "string"
            }
          },
          "serverName" : {
            "type" : "string",
            "description" : "Server name"
          },
          "serverid" : {
            "type" : "string",
            "description" : "Base64 encoded id of the nextAuth server"
          },
          "serverpk" : {
            "type" : "string",
            "description" : "Base64 encoded public key of the nextAuth server"
          },
          "siteurl" : {
            "type" : "string",
            "description" : "URL of the main website"
          },
          "wsurl" : {
            "type" : "string",
            "description" : "Websocket URL"
          }
        }
      },
      "ServerSession" : {
        "required" : [ "serverid", "sessionid" ],
        "type" : "object",
        "properties" : {
          "serverid" : {
            "type" : "string",
            "description" : "Server Id"
          },
          "sessionid" : {
            "type" : "string",
            "description" : "Base64 encoded nonce"
          }
        }
      },
      "Servers" : {
        "required" : [ "servers" ],
        "type" : "object",
        "properties" : {
          "servers" : {
            "type" : "array",
            "description" : "Array of servers",
            "items" : {
              "$ref" : "#/components/schemas/Server"
            }
          },
          "totalnumber" : {
            "type" : "integer",
            "description" : "total number of users"
          }
        }
      },
      "SessionInfo" : {
        "type" : "object",
        "properties" : {
          "info" : {
            "type" : "object",
            "description" : "Information to display to user"
          },
          "ip" : {
            "type" : "string",
            "description" : "IP address"
          },
          "logo" : {
            "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type" : "string",
            "description" : "Base64 encoded logo",
            "format" : "byte"
          },
          "useragent" : {
            "type" : "string",
            "description" : "User agent of the browser"
          }
        }
      },
      "Transaction" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "string"
          },
          "benificiary" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "TransactionId" : {
        "type" : "object",
        "properties" : {
          "tid" : {
            "type" : "string",
            "description" : "Base64 encoded transaction id"
          }
        }
      },
      "TransactionResult" : {
        "type" : "object",
        "properties" : {
          "tstatus" : {
            "type" : "string",
            "description" : "0 = new, 1 = approved, 2 = declined"
          }
        }
      },
      "User" : {
        "required" : [ "userid" ],
        "type" : "object",
        "properties" : {
          "lastlogin" : {
            "type" : "integer",
            "description" : "(aggregated) last login over all accounts",
            "format" : "int64"
          },
          "numberaccounts" : {
            "type" : "integer",
            "description" : "(aggregated) number of accounts"
          },
          "userid" : {
            "type" : "string",
            "description" : "User name"
          }
        }
      },
      "UserContext" : {
        "type" : "object",
        "properties" : {
          "announceinfo" : {
            "$ref" : "#/components/schemas/SessionInfo"
          },
          "sessioninfo" : {
            "$ref" : "#/components/schemas/SessionInfo"
          }
        }
      },
      "Users" : {
        "required" : [ "users" ],
        "type" : "object",
        "properties" : {
          "totalnumber" : {
            "type" : "integer",
            "description" : "total number of users"
          },
          "users" : {
            "type" : "array",
            "description" : "Array of users",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "api_key" : {
        "type" : "apiKey",
        "description" : "API Key for a specific (virtual) server.",
        "name" : "X-apikey",
        "in" : "header"
      },
      "role_id" : {
        "type" : "apiKey",
        "description" : "ID of the role you want to impersonate (requires that the role associated with the API key passed in the header above has global 'root' or global 'setrid' permissions).",
        "name" : "X-su",
        "in" : "header"
      }
    }
  }
}